generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "darwin", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model announcement {
  announcement_id      Int                       @id @default(autoincrement())
  student_id           Int
  major_id             Int
  course_id            Int
  teacher_id           Int
  status               announcement_status_enum
  announcement         Json
  announcement_options announcement_options_enum @default(mandatory)
  sent_at              DateTime?                 @default(now()) @db.Timestamp(6)
  courses              courses                   @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction)
  major                major                     @relation(fields: [major_id], references: [major_id], onDelete: Cascade, onUpdate: NoAction)
  student              student                   @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)
  teacher              teacher                   @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
}

model auth_user {
  user_id                                                       Int                   @id @default(autoincrement())
  login_name                                                    String                @db.VarChar(10)
  password_hash                                                 String
  profile_picture                                               String?
  registry_number                                               String                @db.VarChar(10)
  user_role                                                     user_role_enum
  fname                                                         String                @db.VarChar(50)
  lname                                                         String                @db.VarChar(50)
  birthday                                                      DateTime              @db.Date
  gender                                                        gender_enum
  citizenship                                                   String                @db.VarChar(50)
  state_city                                                    String                @db.VarChar(100)
  town_district                                                 String                @db.VarChar(100)
  valid_address                                                 String                @db.VarChar(100)
  state_city_living                                             String                @db.VarChar(100)
  town_district_living                                          String                @db.VarChar(100)
  valid_address_living                                          String                @db.VarChar(100)
  postal_address                                                String?               @db.VarChar(50)
  home_phone_number                                             String?               @db.VarChar(20)
  phone_number                                                  String                @db.VarChar(20)
  phone_number_emergency                                        String                @db.VarChar(20)
  country                                                       String                @db.VarChar(50)
  ethnicity                                                     String                @db.VarChar(50)
  social_background                                             String                @db.VarChar(50)
  state_city_of_birth                                           String                @db.VarChar(100)
  town_district_of_birth                                        String                @db.VarChar(100)
  place_of_birth                                                String                @db.VarChar(150)
  education                                                     String                @db.VarChar(50)
  current_academic_degree                                       String                @db.VarChar(50)
  profession                                                    String?               @db.VarChar(150)
  profession_certification                                      String?
  f_passport_number                                             String?               @db.VarChar(50)
  married                                                       married_enum
  military_service                                              military_service_enum
  pensions_established                                          String?               @db.VarChar(50)
  additional_notes                                              String?               @db.VarChar(150)
  blood_type                                                    String?               @db.VarChar(5)
  drivers_certificate                                           String?               @db.VarChar(50)
  drivers_certificate_number                                    String?               @db.VarChar(25)
  disabled                                                      disabled_enum
  is_active                                                     Boolean?              @default(true)
  email                                                         String?               @unique
  created_at                                                    DateTime              @default(now()) @db.Timestamp(6)
  family_tree_name                                              String                @default("Халх") @db.VarChar
  signedcontracts                                               signedcontracts[]
  staff                                                         staff[]
  student                                                       student?
  studentclubs_studentclubs_club_assistant_leader_idToauth_user studentclubs[]        @relation("studentclubs_club_assistant_leader_idToauth_user")
  studentclubs_studentclubs_club_primary_leader_idToauth_user   studentclubs[]        @relation("studentclubs_club_primary_leader_idToauth_user")
  teacher                                                       teacher?
  user_signatures                                               user_signatures?      @ignore
  usercard                                                      usercard[]
  userpreferences                                               userpreferences[]
  userprofiles                                                  userprofiles[]

  @@unique([login_name], map: "login_name_key")
}

model basecurriculum {
  base_curriculum_id Int      @id @default(autoincrement())
  major_id           Int
  course_id          Int
  curriculum_year    DateTime @db.Date
  semester_year      String   @db.Char(25)
  courses            courses  @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course")
  major              major    @relation(fields: [major_id], references: [major_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_major")
}

model calendar {
  calendar_id      Int                   @id @default(autoincrement())
  teacher_id       Int
  calendar_title   String                @db.VarChar(100)
  calendar_access  Json
  calendar_purpose calendar_purpose_enum
  event_timestamp  DateTime              @db.Timestamp(6)
  ringer           DateTime              @db.Timestamp(6)
  files            String
  created_at       DateTime?             @default(now()) @db.Timestamp(6)
  teacher          teacher               @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_teacher")
  calendaraccess   calendaraccess?
}

model calendaraccess {
  calendar_id  Int      @id @default(autoincrement())
  teacher_id   Int
  to_course_id Int?
  access_types Json?
  calendar     calendar @relation(fields: [calendar_id], references: [calendar_id], onDelete: Cascade, onUpdate: NoAction)
  courses      courses? @relation(fields: [to_course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction)
}

model classroomproperties {
  classroom_properties_id Int        @id @default(autoincrement())
  classroom_id            Int
  classroom_type          String     @db.VarChar(50)
  number_of_desks_chairs  Int
  number_of_pcs           Int
  desks_chairs_json       Json?
  pcs_json                Json?
  created_at              DateTime?  @default(now()) @db.Timestamp(6)
  classrooms              classrooms @relation(fields: [classroom_id], references: [classroom_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_classroom")
}

model classrooms {
  classroom_id           Int                     @id @default(autoincrement())
  department_id          Int?
  classroom_type         classroom_type_enum
  classroom_number       String                  @unique(map: "classroom_number_uq") @db.Char(5)
  projector              projector_enum          @default(yes)
  tv                     tv_enum                 @default(yes)
  created_at             DateTime?               @default(now()) @db.Timestamp(6)
  capacity               Int
  classroomproperties    classroomproperties[]
  departmentsofeducation departmentsofeducation? @relation(fields: [department_id], references: [departments_of_education_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_department")
}

model clubmembers {
  club_member_id                                                           Int                     @id @default(autoincrement())
  student_club_id                                                          Int
  student_id                                                               Int
  volunteer_hours                                                          Int
  volunteer_hours_attendance                                               Json
  join_date                                                                DateTime?               @default(now()) @db.Timestamp(6)
  studentclubs                                                             studentclubs            @relation(fields: [student_club_id], references: [student_club_id], onDelete: NoAction, onUpdate: NoAction)
  student                                                                  student                 @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)
  internalmessagingclub_internalmessagingclub_club_member_idToclubmembers  internalmessagingclub[] @relation("internalmessagingclub_club_member_idToclubmembers")
  internalmessagingclub_internalmessagingclub_mention_someoneToclubmembers internalmessagingclub[] @relation("internalmessagingclub_mention_someoneToclubmembers")
}

model contracts {
  contract_id     Int               @id @default(autoincrement())
  contract_name   String            @db.Char(50)
  contracts_year  Int
  contract        String
  to_user         Json?
  major_id        Int?
  to_student_year String?           @db.Char(15)
  to_student_id   String?           @db.Char(8)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  send_at         DateTime          @db.Timestamp(6)
  signedcontracts signedcontracts[]
}

model coursemanagement {
  course_management_id          Int         @id @default(autoincrement())
  course_name                   String      @db.Char(50)
  description                   String?     @db.Char(100)
  course_length                 Int 
  teacher_id                    Int
  teacher_code                  String      @db.Char(8)
  created_at                    DateTime?   @default(now()) @db.Timestamp(6)
  teacher_course_planning_id    Int
  course_id                     Int
  teacherscourseplanning        teacherscourseplanning  @relation(fields: [teacher_course_planning_id], references: [teacher_course_planning_id], onDelete: Cascade, onUpdate: NoAction, map: "teachers_course_planning_fkey")
  courseweek                    courseweek[]
  coursematerial                coursematerial[]
}

model courseweek {
  course_week_id                Int         @id @default(autoincrement())
  course_management_id          Int        
  week                          Int
  materials                     Json?
  activity_status               Boolean
  title                         String?
  description                   String?
  coursemanagement              coursemanagement  @relation(fields: [course_management_id], references: [course_management_id], onDelete: Cascade, onUpdate: Cascade, map: "course_management_fkey")
  coursematerial                coursematerial[]
}

model coursematerial {
  course_material_id     Int                    @id @default(autoincrement())
  course_id              Int
  week                   Int
  description            String?                @db.VarChar(250)
  teacher_id             Int
  created_at             DateTime?              @default(now()) @db.Timestamp(6)
  course_management_id   Int 
  course_week_id         Int
  title                  String?
  file                   String?
  course_mat_type        course_mat_type
  courses                courses                @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course")
  teacher                teacher                @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_teacher")
  coursemanagement       coursemanagement       @relation(fields: [course_management_id], references: [course_management_id], onDelete: Cascade, onUpdate: Cascade, map: "course_management_fkey")
  courseweek             courseweek             @relation(fields: [course_week_id], references: [course_week_id], onDelete: Cascade, onUpdate: Cascade, map: "course_week_fkey")
  notificationstudents   notificationstudents[]
  studentattendance      studentattendance[]
  submission             submission[]
}

model courses {
  course_id              Int                      @id @default(autoincrement())
  course_name            String                   @unique(map: "course_name_unique_constraint") @db.VarChar(50)
  course_code            String                   @db.Char(6)
  course_type            course_type_enum
  course_year            String                   @db.VarChar(10)
  total_credits          Int
  major_id               Int
  description            String                   @default("*") @db.VarChar(100)
  course_season          course_season_type_enum  @default(dbgenerated("Намар, Өвөл, Хавар, Зун"))
  times_per_week         Int?                     @default(0)
  announcement           announcement[]
  basecurriculum         basecurriculum[]
  calendaraccess         calendaraccess[]
  coursematerial         coursematerial[]
  major                  major                    @relation(fields: [major_id], references: [major_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_major")
  grades                 grades[]
  invitations            invitations[]
  notificationstudents   notificationstudents[]
  studentschedule        studentsschedule[]
  studentstoadvise       studentstoadvise[]
  teacherscourseplanning teacherscourseplanning[]
}

model department {
  department_id                                Int                      @id @default(autoincrement())
  department_name                              String                   @db.VarChar(50)
  department_code                              String                   @db.VarChar(10)
  department_email                             String                   @db.VarChar(50)
  number_of_staff                              Int?
  logo                                         String
  created_at                                   DateTime?                @default(now()) @db.Timestamp(6)
  department_of_edu_id                         Int
  departmentsofeducation                       departmentsofeducation   @relation(fields: [department_of_edu_id], references: [departments_of_education_id], onDelete: NoAction, onUpdate: NoAction, map: "departmentsofedu_fkey")
  inventoryofteacher                           inventoryofteacher[]
  major_major_department_idTodepartment        major[]                  @relation("major_department_idTodepartment")
  major_major_department_of_edu_idTodepartment major[]                  @relation("major_department_of_edu_idTodepartment")
  propertyofteacher                            propertyofteacher[]
  staff                                        staff[]
  student                                      student[]
  studentstoadvise                             studentstoadvise[]
  teacher                                      teacher[]
  teacherscourseplanning                       teacherscourseplanning[]
  teachersmajorplanning                        teachersmajorplanning[]
}

model departmentsofeducation {
  departments_of_education_id Int                      @id @default(autoincrement())
  ed_department_name          String                   @db.VarChar(50)
  ed_department_code          String                   @db.VarChar(10)
  teachers                    Json?
  classrooms                  classrooms[]
  department                  department[]
  teacher                     teacher[]
  teacherscourseplanning      teacherscourseplanning[]
  teachersmajorplanning       teachersmajorplanning[]
}

model grades {
  grade_id                      Int       @id @default(autoincrement())
  student_id                    Int
  course_id                     Int
  course_grade                  Decimal?  @db.Decimal(3, 2)
  grade_letter                  String?   @db.Char(5)
  finals_grade                  String?   @db.Char(10)
  graded_date                   DateTime? @default(now()) @db.Timestamp(6)
  calculated_credit_grade       Int       @default(0)
  net_credit_of_semester        Int
  credits_collected_of_semester Int       @default(0)
  semester_gpa                  Decimal?  @db.Decimal(3, 2)
  semester_average              Decimal?  @db.Decimal(3, 2)
  prelimenary_grade             Decimal?  @db.Decimal(3, 2)
  overall_credits               Int
  overall_credits_collected     Int       @default(0)
  overall_gpa                   Decimal?  @db.Decimal(3, 2)
  overall_average               Decimal?  @db.Decimal(3, 2)
  courses                       courses   @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
  student                       student   @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
}

model internalmessagingclub {
  internal_messaging_id                                          Int                     @id @default(autoincrement())
  student_club_id                                                Int
  club_member_id                                                 Int
  student_id                                                     Int
  club_member_message                                            Json
  mention_someone                                                Int?
  replied_to                                                     Int?
  created_at                                                     DateTime?               @default(now()) @db.Timestamp(6)
  clubmembers_internalmessagingclub_club_member_idToclubmembers  clubmembers             @relation("internalmessagingclub_club_member_idToclubmembers", fields: [club_member_id], references: [club_member_id], onDelete: Cascade, onUpdate: NoAction)
  clubmembers_internalmessagingclub_mention_someoneToclubmembers clubmembers?            @relation("internalmessagingclub_mention_someoneToclubmembers", fields: [mention_someone], references: [club_member_id], onDelete: Cascade, onUpdate: NoAction)
  internalmessagingclub                                          internalmessagingclub?  @relation("internalmessagingclubTointernalmessagingclub", fields: [replied_to], references: [internal_messaging_id], onDelete: Cascade, onUpdate: NoAction)
  other_internalmessagingclub                                    internalmessagingclub[] @relation("internalmessagingclubTointernalmessagingclub")
  studentclubs                                                   studentclubs            @relation(fields: [student_club_id], references: [student_club_id], onDelete: Cascade, onUpdate: NoAction)
  student                                                        student                 @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
}

model inventoryofteacher {
  inventory_of_teacher_id Int        @id @default(autoincrement())
  teacher_id              Int
  inventory_name          String     @db.VarChar(100)
  inventory_number        String     @db.VarChar(15)
  unit                    String     @db.Char(5)
  quantity                Int
  unit_cost               Decimal?   @db.Decimal(10, 2)
  net_cost                Decimal?   @db.Decimal(10, 2)
  returned_quantity       Decimal?   @db.Decimal(10, 2)
  returned_unit_cost      Decimal?   @db.Decimal(10, 2)
  returned_net_cost       Decimal?   @db.Decimal(10, 2)
  department_id           Int
  created_at              DateTime?  @default(now()) @db.Timestamp(6)
  department              department @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_department")
  teacher                 teacher    @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_teacher")
}

model invitations {
  invitation_id Int                    @id @default(autoincrement())
  student_id    Int
  major_id      Int
  course_id     Int
  teacher_id    Int
  status        invitation_status_enum
  invite        Json
  sent_at       DateTime?              @default(now()) @db.Timestamp(6)
  courses       courses                @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction)
  major         major                  @relation(fields: [major_id], references: [major_id], onDelete: Cascade, onUpdate: NoAction)
  student       student                @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
  teacher       teacher                @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
}

model major {
  major_id                                          Int                @id @default(autoincrement())
  major_name                                        String             @unique(map: "major_name") @db.VarChar(50)
  majors_year                                       DateTime           @db.Date
  majors_type                                       major_type_enum
  credit_unit_rate                                  Decimal            @db.Money
  major_tuition                                     Decimal            @db.Money
  academic_degree                                   String             @db.VarChar(20)
  total_years                                       Int
  total_credits_per_year                            Int
  department_of_edu_id                              Int
  created_at                                        DateTime?          @default(now()) @db.Timestamp(6)
  exam1                                             Float
  exam2                                             Float
  majors_description                                String             @db.VarChar(700)
  description_brief                                 String?            @db.VarChar(50)
  qualifications                                    Json?
  qualifications1                                   String?
  qualifications2                                   String?
  sign_ups                                          sign_ups_enum      @default(dbgenerated("бүртгэл нээлттэй"))
  department_id                                     Int                @default(1)
  announcement                                      announcement[]
  basecurriculum                                    basecurriculum[]
  courses                                           courses[]
  invitations                                       invitations[]
  department_major_department_idTodepartment        department         @relation("major_department_idTodepartment", fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_department_id")
  department_major_department_of_edu_idTodepartment department         @relation("major_department_of_edu_idTodepartment", fields: [department_of_edu_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_departments_of_edu")
  recommended_curriculum                            Json?                 
  recommended_curriculum1                           Json?
  student                                           student[]
  studentclubs                                      studentclubs[]
  surveys                                           surveys[]
  teachersschedule                                  teachersschedule[]
}

model notificationstudents {
  notification_students_id Int             @id @default(autoincrement())
  teacher_id               Int
  course_id                Int
  to_student               Int
  notification_message     Json
  course_material_id       Int?
  created_at               DateTime?       @default(now()) @db.Timestamp(6)
  courses                  courses         @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction)
  coursematerial           coursematerial? @relation(fields: [course_material_id], references: [course_material_id], onDelete: NoAction, onUpdate: NoAction)
  teacher                  teacher         @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
  student                  student         @relation(fields: [to_student], references: [student_id], onDelete: NoAction, onUpdate: NoAction)
}

model paymentinformation {
  payment_information_id  Int                       @id @default(autoincrement())
  payment_to_pay          Decimal?                  @db.Decimal(10, 2)
  payed_payments          Decimal?                  @db.Decimal(10, 2)
  gross_payment           Decimal?                  @db.Decimal(10, 2)
  balance                 Decimal?                  @db.Decimal(10, 2)
  payment_unit_credit     Decimal?                  @db.Decimal(10, 2)
  student_id              Int
  major_id                Int
  student                 student                   @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
  paymentlessonsselection paymentlessonsselection[]
}

model paymentlessonsselection {
  lesson_selection_id    Int                @id @default(autoincrement())
  student_id             Int
  payment_information_id Int
  student_curriculum_id  Int
  course_payment         Decimal?           @db.Decimal(10, 2)
  credit_unit_payment    Decimal            @db.Decimal(10, 2)
  course_credits         Int
  discount               Decimal?           @db.Decimal(10, 2)
  created_at             DateTime?          @default(now()) @db.Timestamp(6)
  net_credit             Int
  gross_payment          Decimal?           @db.Decimal(10, 2)
  gross_discount         Decimal?           @db.Decimal(10, 2)
  paymentinformation     paymentinformation @relation(fields: [payment_information_id], references: [payment_information_id], onDelete: NoAction, onUpdate: NoAction)
  studentcurriculum      studentcurriculum  @relation(fields: [student_curriculum_id], references: [student_curriculum_id], onDelete: NoAction, onUpdate: NoAction)
  student                student            @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
}

model propertyofteacher {
  property_of_teacher_id  Int                    @id @default(autoincrement())
  teacher_id              Int
  property_number         String                 @db.VarChar(100)
  property_category       property_category_enum
  property_code           String                 @db.VarChar(10)
  property_name_and_model DateTime               @db.Timestamp(6)
  started_using           DateTime               @db.Timestamp(6)
  state_of_usage          state_of_usage_enum
  price                   Decimal?               @db.Decimal(10, 2)
  location                String                 @db.VarChar(50)
  department_id           Int
  created_at              DateTime?              @default(now()) @db.Timestamp(6)
  department              department             @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction)
  teacher                 teacher                @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: NoAction)
}

model rules {
  rule_id       Int                @id @default(autoincrement())
  rule_category rule_category_enum
  rule_name     String             @db.VarChar(100)
  rule_pdf      String
  created_at    DateTime?          @default(now()) @db.Timestamp(6)
}

model signedcontracts {
  singed_contract_id Int        @id @default(autoincrement())
  contract_id        Int
  user_id            Int?
  student_id         Int?
  contract           String
  signed_at          DateTime?  @default(now()) @db.Timestamp(6)
  contracts          contracts  @relation(fields: [contract_id], references: [contract_id], onDelete: Cascade, onUpdate: NoAction)
  student            student?   @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
  auth_user          auth_user? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model staff {
  staff_id           Int             @id @default(autoincrement())
  user_id            Int
  staff_role         staff_role_enum
  staff_code         Int             @unique @default(autoincrement())
  staff_email        String          @db.VarChar(50)
  family_description String          @db.Char(100)
  cv                 String?
  certificate        String?
  department_id      Int
  job_position       String          @db.Char(50)
  job_location       String          @db.VarChar(100)
  job_description    String          @db.Char(50)
  department         department      @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction)
  auth_user          auth_user       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model student {
  student_id              Int                       @id @default(autoincrement())
  user_id                 Int                       @unique(map: "uq_student_user_id")
  student_club_id         Int?
  additional_roles        additional_roles_enum     @default(dbgenerated("байхгүй"))
  student_code            String                    @db.Char(8)
  student_email           String                    @db.VarChar(50)
  student_file            Json?
  enrollment_number       Int                       @unique @default(autoincrement())
  enrollment_year         Int
  year_classification     year_classification_enum
  is_active               student_is_active_enum?   @default(dbgenerated("суралцаж байгаа"))
  current_academic_degree String                    @db.Char(25)
  academic_degree_file    String?
  major_id                Int
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  contracts               Json?
  department_id           Int?
  is_curriculum_closed    Boolean
  semester_specification semester_specification_enum
  announcement            announcement[]
  clubmembers             clubmembers[]
  grades                  grades[]
  internalmessagingclub   internalmessagingclub[]
  invitations             invitations[]
  notificationstudents    notificationstudents[]
  paymentinformation      paymentinformation[]
  paymentlessonsselection paymentlessonsselection[]
  signedcontracts         signedcontracts[]
  major                   major                     @relation(fields: [major_id], references: [major_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_major")
  studentclubs            studentclubs?             @relation(fields: [student_club_id], references: [student_club_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_club")
  department              department?               @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_department")
  auth_user               auth_user                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  studentansweredsurvey   studentansweredsurvey[]
  studentattendance       studentattendance[]
  studentbalance          studentbalance[]
  studentcurriculum       studentcurriculum[]
  studentschedule         studentsschedule[]
  studentstoadvise        studentstoadvise[]
  submission              submission[]
  surveys                 surveys[]
  transactioninformation  transactioninformation[]
}

model studentansweredsurvey {
  answered_survey_id Int       @id @default(autoincrement())
  survey_id          Int
  major_id           Int
  student_id         Int
  recieved_at        DateTime? @default(now()) @db.Timestamp(6)
  answers_json       String
  student            student   @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
  surveys            surveys   @relation(fields: [survey_id], references: [surveys_id], onDelete: NoAction, onUpdate: NoAction)
}

model studentattendance {
  attendance_id            Int                     @id @default(autoincrement())
  course_id                Int
  course_material_id       Int
  week_title               Int
  student_attendance       student_attendance_enum
  student_balance          Decimal?                @db.Decimal(10, 2)
  gross_transaction_amount Decimal?                @db.Decimal(10, 2)
  student_id               Int
  created_at               DateTime?               @default(now()) @db.Timestamp(6)
  coursematerial           coursematerial          @relation(fields: [course_material_id], references: [course_material_id], onDelete: Cascade, onUpdate: NoAction)
  student                  student                 @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
}

model studentbalance {
  student_balance_id       Int                    @id @default(autoincrement())
  student_id               Int
  transaction_info_id      Int
  student_code             String?                @db.Char(15)
  registry_number          String?                @db.Char(15)
  student_balance          Decimal?               @db.Decimal(10, 2)
  gross_transaction_amount Decimal?               @db.Decimal(10, 2)
  created_at               DateTime?              @default(now()) @db.Timestamp(6)
  student                  student                @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
  transactioninformation   transactioninformation @relation(fields: [transaction_info_id], references: [transaction_info_id], onDelete: Cascade, onUpdate: NoAction)
}

model studentclubevent {
  club_event_id   Int             @id @default(autoincrement())
  student_club_id Int
  club_type       String          @db.Char(25)
  event_type      event_type_enum
  timestamp       DateTime        @db.Timestamp(6)
  description     String          @db.VarChar(200)
  files           String
  title           String          @db.Char(50)
  attendees       Json
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  studentclubs    studentclubs    @relation(fields: [student_club_id], references: [student_club_id], onDelete: Cascade, onUpdate: NoAction)
}

model studentclubs {
  student_club_id                                            Int                     @id @default(autoincrement())
  club_code                                                  String                  @unique @db.VarChar(10)
  club_name                                                  String                  @db.VarChar(50)
  club_members                                               Int                     @default(0)
  club_type                                                  club_type_enum          @default(professional_club)
  club_major_id                                              Int
  club_primary_leader_id                                     Int
  club_assistant_leader_id                                   Int
  club_advisor_teacher_id                                    Int
  club_logo                                                  String
  club_moto                                                  String                  @db.VarChar(100)
  created_at                                                 DateTime?               @default(now()) @db.Timestamp(6)
  clubmembers                                                clubmembers[]
  internalmessagingclub                                      internalmessagingclub[]
  student                                                    student[]
  studentclubevent                                           studentclubevent[]
  teacher                                                    teacher                 @relation(fields: [club_advisor_teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
  auth_user_studentclubs_club_assistant_leader_idToauth_user auth_user               @relation("studentclubs_club_assistant_leader_idToauth_user", fields: [club_assistant_leader_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  major                                                      major                   @relation(fields: [club_major_id], references: [major_id], onDelete: NoAction, onUpdate: NoAction)
  auth_user_studentclubs_club_primary_leader_idToauth_user   auth_user               @relation("studentclubs_club_primary_leader_idToauth_user", fields: [club_primary_leader_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model studentcurriculum {
  student_curriculum_id   Int                       @id @default(autoincrement())
  student_id              Int                       @unique
  credit                  Int?
  student_curriculum_year DateTime                  @db.Date
  modified_at             DateTime?                 @default(now()) @db.Timestamp(6)
  students_curriculum     Json
  student_code            String                    @db.Char(8)
  paymentlessonsselection paymentlessonsselection[]
  student                 student                   @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
}

model studentsschedule {
  students_schedule_id     Int       @id @default(autoincrement())
  student_id               Int
  course_id                Int
  classroom_number         String?   @db.VarChar(5)
  class_group              Int?
  modified_at              DateTime  @default(now())
  schedules_timetable_position Int?
  course_name              String?   @db.VarChar(50)
  time                     schedule_time_type_enum?
  teachers_email           String?   @db.VarChar(50)
  teachers_name            String?   @db.VarChar(25)
  schedule_type            schedule_type_enum?
  days                     days_type_enum?
  student_code             String?   @db.VarChar(8)
  teacher_code             String?   @db.VarChar(8)
  teachers_schedule_id     Int
  course                  courses   @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  student                 student   @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  teachersschedule        teachersschedule @relation(fields: [teachers_schedule_id], references: [teachers_schedule_id], onDelete: Cascade)

  @@map("studentsschedule")
}

model studentstoadvise {
  students_to_advise_id    Int        @id @default(autoincrement())
  teacher_id               Int
  academic_degree_of_major String     @db.VarChar(20)
  major_id                 Decimal?   @db.Decimal(10, 2)
  course_id                Int
  student_id               Int
  students_full_name       String     @db.VarChar(25)
  student_phone_numbers    String     @db.Char(50)
  department_id            Int
  created_at               DateTime?  @default(now()) @db.Timestamp(6)
  courses                  courses    @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction)
  department               department @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction)
  student                  student    @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
  teacher                  teacher    @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
}

model submission {
  submission_id      Int               @id @default(autoincrement())
  course_material_id Int
  submitted_at       DateTime?         @default(now()) @db.Timestamp(6)
  submission_file    String
  student_id         Int
  graded_points      Decimal?          @db.Decimal(2, 2)
  grade_status       grade_status_enum @default(submitted)
  grader_comment     String?
  teacher_id         Int
  graded_at          DateTime?         @db.Timestamp(6)
  created_at         DateTime?         @default(now()) @db.Timestamp(6)
  coursematerial     coursematerial    @relation(fields: [course_material_id], references: [course_material_id], onDelete: Cascade, onUpdate: NoAction)
  student            student           @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
  teacher            teacher           @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
}

model surveys {
  surveys_id            Int                     @id @default(autoincrement())
  survey_name           String                  @db.Char(25)
  due_date              DateTime                @db.Date
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  major_id              Int
  to_student_year       Int
  to_student_id         Int
  questions_json        String
  studentansweredsurvey studentansweredsurvey[]
  major                 major                   @relation(fields: [major_id], references: [major_id], onDelete: Cascade, onUpdate: NoAction)
  student               student                 @relation(fields: [to_student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
}

model teacher {
  teacher_id                  Int                      @id @default(autoincrement())
  user_id                     Int                      @unique(map: "uq_teacher_user_id")
  teacher_code                String                   @db.VarChar(10)
  teacher_email               String                   @db.VarChar(50)
  certificate                 String?
  profession                  String                   @db.Char(25)
  academic_degree             String                   @db.Char(25)
  job_title                   String?
  is_active                   is_active_enum           @default(is_working)
  job_description             String                   @default("Багшлах") @db.Char(100)
  departments_of_education_id Int
  department_id               Int?
  is_major_planning_closed    Boolean?
  is_course_planning_closed   Boolean? 
  announcement                announcement[]
  calendar                    calendar[]
  coursematerial              coursematerial[]
  inventoryofteacher          inventoryofteacher[]
  invitations                 invitations[]
  notificationstudents        notificationstudents[]
  propertyofteacher           propertyofteacher[]
  studentclubs                studentclubs[]
  studentstoadvise            studentstoadvise[]
  submission                  submission[]
  department                  department?              @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_department")
  departmentsofeducation      departmentsofeducation   @relation(fields: [departments_of_education_id], references: [departments_of_education_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_departments_of_edu")
  auth_user                   auth_user                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  teacherscourseplanning      teacherscourseplanning[]
  teachersmajorplanning       teachersmajorplanning[]
  teachersschedule            teachersschedule[]
}

model teacherscourseplanning {
  teacher_course_planning_id Int                    @id(map: "teachercourseplanning_pkey") @default(autoincrement())
  teacher_id                 Int
  major_name                 String                 @db.VarChar(50)
  major_id                   Int
  course_name                String                 @db.VarChar(50)
  credit                     Int
  course_id                  Int
  department_id              Int
  created_at                 DateTime?              @default(now()) @db.Timestamp(6)
  department_of_edu_id       Int
  course_code                String                 @db.VarChar(6)
  teacher_major_id           Int
  course_length              Int
  coursemanagement           coursemanagement[]
  courses                    courses                @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_course")
  department                 department             @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_department")
  departmentsofeducation     departmentsofeducation @relation(fields: [department_of_edu_id], references: [departments_of_education_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_departments_of_edu")
  teacher                    teacher                @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_teacher")
  teachersmajorplanning      teachersmajorplanning  @relation(fields: [teacher_major_id], references: [teacher_major_id], onDelete: Cascade, map: "fk_teacher_major")
  teachersschedule           teachersschedule[]

  @@unique([teacher_id, major_id, course_id], map: "teachers_id_and_course_id_uq")
}

model teachersmajorplanning {
  teacher_major_id            Int                      @id(map: "teacher_major_id") @default(autoincrement())
  teacher_id                  Int
  academic_degree_of_major    String                   @db.VarChar(20)
  major_name                  String                   @db.VarChar(50)
  major_id                    Int
  credit                      Int
  department_id               Int
  created_at                  DateTime?                @default(now()) @db.Timestamp(6)
  department_of_educations_id Int
  teacherscourseplanning      teacherscourseplanning[]
  department                  department               @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_department")
  departmentsofeducation      departmentsofeducation   @relation(fields: [department_of_educations_id], references: [departments_of_education_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_departments_of_edu")
  teacher                     teacher                  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_teacher")

  @@unique([teacher_id, major_id], map: "unique_teacher_major")
}

model teachersschedule {
  classroom_id                 Int?                    @default(0)
  students                     Int?                    @default(0)
  teacher_id                   Int
  course_id                    Int
  major_id                     Int
  teacher_name                 String                  @db.VarChar(50)
  teachers_email               String                  @db.VarChar(50)
  schedule_type                schedule_type_enum?     @default(dbgenerated("Лаборатори"))
  time                         schedule_time_type_enum
  course_planning_id           Int                     @default(0)
  days                         days_type_enum
  teachers_schedule_id         Int                     @id(map: "pk_teachers_schedule_id") @default(autoincrement())
  created_at                   DateTime                @default(now()) @db.Date
  course_name                  String                  @db.VarChar(50)
  classroom_capacity           Int?
  classroom_type               classroom_type_enum?
  classroom_number             String?                 @db.VarChar(5)
  schedules_timetable_position Int                     @default(0)
  course_code                  String
  major                        major                   @relation(fields: [major_id], references: [major_id], onDelete: Cascade, map: "fk_major")
  teacher                      teacher                 @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_teacher")
  teacherscourseplanning       teacherscourseplanning  @relation(fields: [course_planning_id], references: [teacher_course_planning_id], onDelete: Cascade, map: "fk_teachers_course_planning")
  studentsschedules studentsschedule[]

  @@unique([classroom_id, teacher_id, time, days], map: "uq_classroom_time_teacher")
}

model transactioninformation {
  transaction_info_id Int              @id @default(autoincrement())
  student_id          Int
  reciept             String?
  recipient_bank      String           @db.Char(25)
  transaction_string  String           @db.Char(100)
  transaction_amount  Decimal?         @db.Decimal(10, 2)
  parsed_string       Int
  created_at          DateTime?        @default(now()) @db.Timestamp(6)
  studentbalance      studentbalance[]
  student             student          @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_signatures {
  user_signature_id    Int            @default(autoincrement())
  user_id              Int?           @unique(map: "uq_user_signatures_user_id")
  user_registry_number String?        @db.VarChar(10)
  user_role            user_role_enum
  signature            Bytes?
  auth_user            auth_user?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_signatures")

  @@ignore
}

model usercard {
  user_card_id     Int            @id @default(autoincrement())
  card_code        Int
  user_id          Int
  user_role        user_role_enum @default(student)
  user_information Json
  valid_from       DateTime       @db.Timestamp(6)
  valid_until      DateTime       @db.Timestamp(6)
  recieved         recieved_enum  @default(yes)
  signature        String
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  auth_user        auth_user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model userpreferences {
  user_preferences_id Int       @id @default(autoincrement())
  app_theme           String    @db.VarChar(20)
  user_id             Int       @unique
  auth_user           auth_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_auth_user")
}

model userprofiles {
  profile_id      Int       @id @default(autoincrement())
  user_id         Int
  user_code       String    @db.Char(10)
  user_role       String    @db.Char(25)
  profile_picture String
  description     String    @db.VarChar(100)
  department_id   Int
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  auth_user       auth_user @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

enum additional_roles_enum {
  club_primary_leader
  club_assistant_leader
  none
  laborant
  // Клубын тэргүүн @map("Клубын тэргүүн")
  // Клубын туслах тэргүүн @map("Клубын туслах тэргүүн")
  // байхгүй @map("байхгүй")
  // Лаборант @map("Лаборант")
}

enum announcement_options_enum {
  mandatory
  is_not_mandatory
}

enum announcement_status_enum {
  has_read
  has_not_read
}

enum app_theme_enum {
  Light_Mode
  Dark_Mode
}

enum calendar_purpose_enum {
  important
  statement
  notification
}

enum course_mat_type {
  Introduction
  Lecture
  Laboratory
  Seminar
  Quiz
  Final
  SemiFinal
  SemiFinal1
  SatisfactionSurvey
}

enum classroom_type_enum {
  computerLaboratory 
  seminar
  students_dev        @map("students-dev")
  lecture
  tv_classroom        @map("tv-classroom")
  online
  // Компьютерийн лаборатори анги @map("Компьютерийн лаборатори анги")
  // Оюутны хөгжлийн төв @map("Оюутны хөгжлийн төв")
  // Лекцийн анги @map("Лекцийн анги")
  // Семинар анги @map("Семинар анги")
  // Семинар / Лекцийн анги @map("Семинар / Лекцийн анги")
  // Телевизортой анги @map("Телевизортой анги")
  // Биеийн тамирын заал @map("Биеийн тамирын заал")
}

enum club_type_enum {
  professional_club
  amatuer_club
}

enum course_season_type_enum {
  // Намар, Өвөл, Хавар, Зун @map("Намар, Өвөл, Хавар, Зун")
  // Намар, Өвөл, Зун @map("Намар, Өвөл, Зун")
  // Намар @map("Намар")
  // Хавар @map("Хавар")
  // Намар, Хавар @map("Намар, Хавар")
  // Өвөл, Хавар, Зун @map("Өвөл, Хавар, Зун")
  AutumnWinterSpringSummer
  AutumnWinterSummer
  Autumn
  Spring
  AutumnSpring
  WinterSpringSummer
}

enum course_type_enum {
  bachelors
  masters
  doctors
  professors
  selective
  mandatory
  // Заавал судлах @map("Заавал судлах")
  // Сонгон судлах @map("Сонгон судлах")
}

enum days_type_enum {
  // Даваа гараг @map("Даваа гараг")
  // Мягмар гараг @map("Мягмар гараг")
  // Лхагва гараг @map("Лхагва гараг")
  // Пүрэв гараг @map("Пүрэв гараг")
  // Баасан гараг @map("Баасан гараг")
  // Бямба гараг @map("Бямба гараг")
  // Ням гараг @map("Ням гараг")
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum disabled_enum {
  yes
  no
  // Тийм @map("Тийм")
  // Үгүй @map("Үгүй")
}

enum event_type_enum {
  mandatory
  non_mandatory @map("non-mandatory")
  recreational
  outside_event @map("outside-event")
}

enum gender_enum {
  male
  female
  other
  // эрэгтэй @map("эрэгтэй")
  // эмэгтэй @map("эмэгтэй")
  // бусад @map("бусад")
}

enum grade_status_enum {
  incomplete
  complete
  missing
  submitted
  other
}

enum invitation_status_enum {
  pending
  accepted
  denied
}

enum is_active_enum {
  is_working
  vacation
  left
}

enum major_type_enum {
  afternoon
  evening
  // орой @map("орой")
  // өдөр @map("өдөр")
}

enum married_enum {
  married
  not_married
  // Гэрлээгүй @map("Гэрлээгүй")
  // Гэрлэсэн @map("Гэрлэсэн")
}

enum material_type_enum {
  assignment
  discussion
  attendance_question
  lecture_material
  exam
  exam_entry
  exam_exit
  exam_final
}

enum military_service_enum {
  served
  not_served
  // Тийм @map("Тийм")
  // Үгүй @map("Үгүй")
  // Хаасан @map("Хаасан")
  // Хаагаагүй @map("Хаагаагүй")
}

enum projector_enum {
  yes
  no
  // тийм @map("тийм")
  // үгүй @map("үгүй")
}

enum property_category_enum {
  offices
  computer
  office_utilities
}

enum recieved_enum {
  yes
  no
}

enum rule_category_enum {
  university_academic_procedures
  tuition_payment_procedures
  laboratory_rules
  library_rules
  user_guide_canvas
}

enum schedule_time_type_enum {
  // 1-р цаг @map("1-р цаг")
  // 2-р цаг @map("2-р цаг")
  // 3-р цаг @map("3-р цаг")
  // 4-р цаг @map("4-р цаг")
  // 5-р цаг @map("5-р цаг")
  // 6-р цаг @map("6-р цаг")
  // 7-р цаг @map("7-р цаг")
  // 8-р цаг @map("8-р цаг")
  // 9-р цаг @map("9-р цаг")
  firstPeriod
  secondPeriod
  thirdPeriod
  fourthPeriod
  fifthPeriod
  sixthPeriod
  seventhPeriod
  eightPeriod
  ninthPeriod
}

enum schedule_type_enum {
  // Лекц @map("Лекц")
  // Семинар @map("Семинар")
  // Лаборатори @map("Лаборатори")
  Lecture
  Seminar
  Laboratory
  computerLaboratory
  seminar
}

enum sign_ups_enum {
  // бүртгэл хаагдсан @map("бүртгэл хаагдсан")
  // бүртгэл нээлттэй @map("бүртгэл нээлттэй")
  admissions_closed
  admissions_open
}

enum staff_role_enum {
  security
  cleaner
  electrician
  inventory_manager
  manager
}

enum state_of_usage_enum {
  normal
  broken
  needs_service
}

enum student_attendance_enum {
  arrived
  absent
  excused
  ill
}

enum student_is_active_enum {
  graduated
  transfered
  expelled
  studying
  // төгссөн @map("төгссөн")
  // шилжсэн @map("шилжсэн")
  // хөөгдсөн @map("хөөгдсөн")
  // суралцаж байгаа @map("суралцаж байгаа")
  // чөлөө авсан @map("чөлөө авсан")
}

enum semester_specification_enum {
  firstSemester
  secondSemester
  thirdSemester
  fourthSemester
}

enum tv_enum {
  yes
  no
  // тийм @map("тийм")
  // үгүй @map("үгүй")
}

enum type_enum {
  computer_science
  business
  social_studies
  foriegn_language
  administration
  financial
  admission_committee
  journalism
}

enum user_role {
  student
  teacher
  administration
  staff
  principal
  hr
  department_chair
  admissions_officer
  mental_health_counselor
  librarian
  marketing
  teacher_assistant
}

enum user_role_enum {
  student
  teacher
  administration
  staff
  principal
  hr
  department_chair
  admissions_officer
  mental_health_counselor
  librarian
  marketing
  teacher_assistant
  // Оюутан @map("Оюутан")
  // Багш @map("Багш")
  // Удирдлага @map("Удирдлага")
  // Ажилтан @map("Ажилтан")
  // Захирал @map("Захирал")
  // Хүний Нөөц @map("Хүний Нөөц")
  // Салбар Сургуулийн Захирал @map("Салбар Сургуулийн Захирал")
  // Элсэлтийн Комисс @map("Элсэлтийн Комисс")
  // Сэтгэл Зүйч @map("Сэтгэл Зүйч")
  // Номын Санч @map("Номын Санч")
  // Маркетинг @map("Маркетинг")
}

enum year_classification_enum {
  freshman
  junior
  sophomore
  senior
  // 1-р курс @map("1-р курс")
  // 2-р курс @map("2-р курс")
  // 3-р курс @map("3-р курс")
  // 4-р курс @map("4-р курс")
}
