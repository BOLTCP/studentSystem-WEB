
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model auth_user
 * 
 */
export type auth_user = $Result.DefaultSelection<Prisma.$auth_userPayload>
/**
 * Model TeacherSchedule
 * 
 */
export type TeacherSchedule = $Result.DefaultSelection<Prisma.$TeacherSchedulePayload>
/**
 * Model TeachersCoursePlanning
 * 
 */
export type TeachersCoursePlanning = $Result.DefaultSelection<Prisma.$TeachersCoursePlanningPayload>
/**
 * Model Classrooms
 * 
 */
export type Classrooms = $Result.DefaultSelection<Prisma.$ClassroomsPayload>
/**
 * Model Courses
 * 
 */
export type Courses = $Result.DefaultSelection<Prisma.$CoursesPayload>
/**
 * Model TeachersMajorPlanning
 * 
 */
export type TeachersMajorPlanning = $Result.DefaultSelection<Prisma.$TeachersMajorPlanningPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model StudentClubs
 * 
 */
export type StudentClubs = $Result.DefaultSelection<Prisma.$StudentClubsPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Major
 * 
 */
export type Major = $Result.DefaultSelection<Prisma.$MajorPayload>
/**
 * Model DepartmentsOfEducation
 * 
 */
export type DepartmentsOfEducation = $Result.DefaultSelection<Prisma.$DepartmentsOfEducationPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model StudentCurriculum
 * 
 */
export type StudentCurriculum = $Result.DefaultSelection<Prisma.$StudentCurriculumPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AdditionalRolesEnum: {
  club_primary_leader: 'club_primary_leader',
  club_assistant_leader: 'club_assistant_leader',
  none: 'none',
  laborant: 'laborant',
  Клубын_тэргүүн: 'Клубын_тэргүүн',
  Клубын_туслах_тэргүүн: 'Клубын_туслах_тэргүүн',
  байхгүй: 'байхгүй',
  Лаборант: 'Лаборант'
};

export type AdditionalRolesEnum = (typeof AdditionalRolesEnum)[keyof typeof AdditionalRolesEnum]


export const AnnouncementOptionsEnum: {
  mandatory: 'mandatory',
  is_not_mandatory: 'is_not_mandatory'
};

export type AnnouncementOptionsEnum = (typeof AnnouncementOptionsEnum)[keyof typeof AnnouncementOptionsEnum]


export const AnnouncementStatusEnum: {
  has_read: 'has_read',
  has_not_read: 'has_not_read'
};

export type AnnouncementStatusEnum = (typeof AnnouncementStatusEnum)[keyof typeof AnnouncementStatusEnum]


export const CalendarPurposeEnum: {
  important: 'important',
  statement: 'statement',
  notification: 'notification'
};

export type CalendarPurposeEnum = (typeof CalendarPurposeEnum)[keyof typeof CalendarPurposeEnum]


export const ClassroomTypeEnum: {
  computer_laboratory: 'computer_laboratory',
  students_dev: 'students_dev',
  lecture: 'lecture',
  tv_classroom: 'tv_classroom',
  Компьютерийн_лаборатори_анги: 'Компьютерийн_лаборатори_анги',
  Оюутны_хөгжлийн_төв: 'Оюутны_хөгжлийн_төв',
  Лекцийн_анги: 'Лекцийн_анги',
  Семинар_анги: 'Семинар_анги',
  Семинар_Лекцийн_анги: 'Семинар_Лекцийн_анги',
  Телевизортой_анги: 'Телевизортой_анги',
  Биеийн_тамирын_заал: 'Биеийн_тамирын_заал'
};

export type ClassroomTypeEnum = (typeof ClassroomTypeEnum)[keyof typeof ClassroomTypeEnum]


export const ClubTypeEnum: {
  professional_club: 'professional_club',
  amatuer_club: 'amatuer_club'
};

export type ClubTypeEnum = (typeof ClubTypeEnum)[keyof typeof ClubTypeEnum]


export const CourseSeasonTypeEnum: {
  Намар_Өвөл_Хавар_Зун: 'Намар_Өвөл_Хавар_Зун',
  Намар_Өвөл_Зун: 'Намар_Өвөл_Зун',
  Намар: 'Намар',
  Хавар: 'Хавар',
  Намар_Хавар: 'Намар_Хавар',
  Өвөл_Хавар_Зун: 'Өвөл_Хавар_Зун'
};

export type CourseSeasonTypeEnum = (typeof CourseSeasonTypeEnum)[keyof typeof CourseSeasonTypeEnum]


export const CourseTypeEnum: {
  bachelors: 'bachelors',
  masters: 'masters',
  doctors: 'doctors',
  professors: 'professors',
  Заавал_судлах: 'Заавал_судлах',
  Сонгон_судлах: 'Сонгон_судлах'
};

export type CourseTypeEnum = (typeof CourseTypeEnum)[keyof typeof CourseTypeEnum]


export const DaysTypeEnum: {
  Даваа_гараг: 'Даваа_гараг',
  Мягмар_гараг: 'Мягмар_гараг',
  Лхагва_гараг: 'Лхагва_гараг',
  Пүрэв_гараг: 'Пүрэв_гараг',
  Баасан_гараг: 'Баасан_гараг',
  Бямба_гараг: 'Бямба_гараг',
  Ням_гараг: 'Ням_гараг'
};

export type DaysTypeEnum = (typeof DaysTypeEnum)[keyof typeof DaysTypeEnum]


export const DisabledEnum: {
  yes: 'yes',
  no: 'no',
  Тийм: 'Тийм',
  Үгүй: 'Үгүй'
};

export type DisabledEnum = (typeof DisabledEnum)[keyof typeof DisabledEnum]


export const EventTypeEnum: {
  mandatory: 'mandatory',
  non_mandatory: 'non_mandatory',
  recreational: 'recreational',
  outside_event: 'outside_event'
};

export type EventTypeEnum = (typeof EventTypeEnum)[keyof typeof EventTypeEnum]


export const GenderEnum: {
  male: 'male',
  female: 'female',
  other: 'other',
  эрэгтэй: 'эрэгтэй',
  эмэгтэй: 'эмэгтэй',
  бусад: 'бусад'
};

export type GenderEnum = (typeof GenderEnum)[keyof typeof GenderEnum]


export const GradeStatusEnum: {
  incomplete: 'incomplete',
  complete: 'complete',
  missing: 'missing',
  submitted: 'submitted',
  other: 'other'
};

export type GradeStatusEnum = (typeof GradeStatusEnum)[keyof typeof GradeStatusEnum]


export const InvitationStatusEnum: {
  pending: 'pending',
  accepted: 'accepted',
  denied: 'denied'
};

export type InvitationStatusEnum = (typeof InvitationStatusEnum)[keyof typeof InvitationStatusEnum]


export const IsActiveEnum: {
  is_working: 'is_working',
  vacation: 'vacation',
  left: 'left'
};

export type IsActiveEnum = (typeof IsActiveEnum)[keyof typeof IsActiveEnum]


export const MajorTypeEnum: {
  afternoon: 'afternoon',
  evening: 'evening',
  орой: 'орой',
  өдөр: 'өдөр'
};

export type MajorTypeEnum = (typeof MajorTypeEnum)[keyof typeof MajorTypeEnum]


export const MarriedEnum: {
  married: 'married',
  not_married: 'not_married',
  Гэрлээгүй: 'Гэрлээгүй',
  Гэрлэсэн: 'Гэрлэсэн'
};

export type MarriedEnum = (typeof MarriedEnum)[keyof typeof MarriedEnum]


export const MaterialTypeEnum: {
  assignment: 'assignment',
  discussion: 'discussion',
  attendance_question: 'attendance_question',
  lecture_material: 'lecture_material',
  exam: 'exam',
  exam_entry: 'exam_entry',
  exam_exit: 'exam_exit',
  exam_final: 'exam_final'
};

export type MaterialTypeEnum = (typeof MaterialTypeEnum)[keyof typeof MaterialTypeEnum]


export const MilitaryServiceEnum: {
  served: 'served',
  not_served: 'not_served',
  Тийм: 'Тийм',
  Үгүй: 'Үгүй',
  Хаасан: 'Хаасан',
  Хаагаагүй: 'Хаагаагүй'
};

export type MilitaryServiceEnum = (typeof MilitaryServiceEnum)[keyof typeof MilitaryServiceEnum]


export const ProjectorEnum: {
  yes: 'yes',
  no: 'no',
  тийм: 'тийм',
  үгүй: 'үгүй'
};

export type ProjectorEnum = (typeof ProjectorEnum)[keyof typeof ProjectorEnum]


export const PropertyCategoryEnum: {
  offices: 'offices',
  computer: 'computer',
  office_utilities: 'office_utilities'
};

export type PropertyCategoryEnum = (typeof PropertyCategoryEnum)[keyof typeof PropertyCategoryEnum]


export const RecievedEnum: {
  yes: 'yes',
  no: 'no'
};

export type RecievedEnum = (typeof RecievedEnum)[keyof typeof RecievedEnum]


export const RuleCategoryEnum: {
  university_academic_procedures: 'university_academic_procedures',
  tuition_payment_procedures: 'tuition_payment_procedures',
  laboratory_rules: 'laboratory_rules',
  library_rules: 'library_rules',
  user_guide_canvas: 'user_guide_canvas'
};

export type RuleCategoryEnum = (typeof RuleCategoryEnum)[keyof typeof RuleCategoryEnum]


export const ScheduleTimeTypeEnum: {
  value_1_р_цаг: 'value_1_р_цаг',
  value_2_р_цаг: 'value_2_р_цаг',
  value_3_р_цаг: 'value_3_р_цаг',
  value_4_р_цаг: 'value_4_р_цаг',
  value_5_р_цаг: 'value_5_р_цаг',
  value_6_р_цаг: 'value_6_р_цаг',
  value_7_р_цаг: 'value_7_р_цаг',
  value_8_р_цаг: 'value_8_р_цаг',
  value_9_р_цаг: 'value_9_р_цаг'
};

export type ScheduleTimeTypeEnum = (typeof ScheduleTimeTypeEnum)[keyof typeof ScheduleTimeTypeEnum]


export const ScheduleTypeEnum: {
  Лекц: 'Лекц',
  Семинар: 'Семинар',
  Лаборатори: 'Лаборатори'
};

export type ScheduleTypeEnum = (typeof ScheduleTypeEnum)[keyof typeof ScheduleTypeEnum]


export const SignUpsEnum: {
  бүртгэл_хаагдсан: 'бүртгэл_хаагдсан',
  бүртгэл_нээлттэй: 'бүртгэл_нээлттэй'
};

export type SignUpsEnum = (typeof SignUpsEnum)[keyof typeof SignUpsEnum]


export const StaffRoleEnum: {
  security: 'security',
  cleaner: 'cleaner',
  electrician: 'electrician',
  inventory_manager: 'inventory_manager',
  manager: 'manager'
};

export type StaffRoleEnum = (typeof StaffRoleEnum)[keyof typeof StaffRoleEnum]


export const StateOfUsageEnum: {
  normal: 'normal',
  broken: 'broken',
  needs_service: 'needs_service'
};

export type StateOfUsageEnum = (typeof StateOfUsageEnum)[keyof typeof StateOfUsageEnum]


export const StudentAttendanceEnum: {
  arrived: 'arrived',
  absent: 'absent',
  excused: 'excused',
  ill: 'ill'
};

export type StudentAttendanceEnum = (typeof StudentAttendanceEnum)[keyof typeof StudentAttendanceEnum]


export const StudentIsActiveEnum: {
  graduated: 'graduated',
  transfered: 'transfered',
  expelled: 'expelled',
  studying: 'studying',
  төгссөн: 'төгссөн',
  шилжсэн: 'шилжсэн',
  хөөгдсөн: 'хөөгдсөн',
  суралцаж_байгаа: 'суралцаж_байгаа',
  чөлөө_авсан: 'чөлөө_авсан'
};

export type StudentIsActiveEnum = (typeof StudentIsActiveEnum)[keyof typeof StudentIsActiveEnum]


export const TvEnum: {
  yes: 'yes',
  no: 'no',
  тийм: 'тийм',
  үгүй: 'үгүй'
};

export type TvEnum = (typeof TvEnum)[keyof typeof TvEnum]


export const TypeEnum: {
  computer_science: 'computer_science',
  business: 'business',
  social_studies: 'social_studies',
  foriegn_language: 'foriegn_language',
  administration: 'administration',
  financial: 'financial',
  admission_committee: 'admission_committee',
  journalism: 'journalism'
};

export type TypeEnum = (typeof TypeEnum)[keyof typeof TypeEnum]


export const UserRoleEnum: {
  student: 'student',
  teacher: 'teacher',
  administration: 'administration',
  staff: 'staff',
  principal: 'principal',
  hr: 'hr',
  department_chair: 'department_chair',
  admissions_officer: 'admissions_officer',
  mental_health_counselor: 'mental_health_counselor',
  librarian: 'librarian',
  marketing: 'marketing',
  teacher_assistant: 'teacher_assistant',
  Оюутан: 'Оюутан',
  Багш: 'Багш',
  Удирдлага: 'Удирдлага',
  Ажилтан: 'Ажилтан',
  Захирал: 'Захирал',
  Хүний_Нөөц: 'Хүний_Нөөц',
  Салбар_Сургуулийн_Захирал: 'Салбар_Сургуулийн_Захирал',
  Элсэлтийн_Комисс: 'Элсэлтийн_Комисс',
  Сэтгэл_Зүйч: 'Сэтгэл_Зүйч',
  Номын_Санч: 'Номын_Санч',
  Маркетинг: 'Маркетинг'
};

export type UserRoleEnum = (typeof UserRoleEnum)[keyof typeof UserRoleEnum]


export const YearClassificationEnum: {
  freshman: 'freshman',
  junior: 'junior',
  sophomore: 'sophomore',
  senior: 'senior',
  value_1_р_курс: 'value_1_р_курс',
  value_2_р_курс: 'value_2_р_курс',
  value_3_р_курс: 'value_3_р_курс',
  value_4_р_курс: 'value_4_р_курс'
};

export type YearClassificationEnum = (typeof YearClassificationEnum)[keyof typeof YearClassificationEnum]

}

export type AdditionalRolesEnum = $Enums.AdditionalRolesEnum

export const AdditionalRolesEnum: typeof $Enums.AdditionalRolesEnum

export type AnnouncementOptionsEnum = $Enums.AnnouncementOptionsEnum

export const AnnouncementOptionsEnum: typeof $Enums.AnnouncementOptionsEnum

export type AnnouncementStatusEnum = $Enums.AnnouncementStatusEnum

export const AnnouncementStatusEnum: typeof $Enums.AnnouncementStatusEnum

export type CalendarPurposeEnum = $Enums.CalendarPurposeEnum

export const CalendarPurposeEnum: typeof $Enums.CalendarPurposeEnum

export type ClassroomTypeEnum = $Enums.ClassroomTypeEnum

export const ClassroomTypeEnum: typeof $Enums.ClassroomTypeEnum

export type ClubTypeEnum = $Enums.ClubTypeEnum

export const ClubTypeEnum: typeof $Enums.ClubTypeEnum

export type CourseSeasonTypeEnum = $Enums.CourseSeasonTypeEnum

export const CourseSeasonTypeEnum: typeof $Enums.CourseSeasonTypeEnum

export type CourseTypeEnum = $Enums.CourseTypeEnum

export const CourseTypeEnum: typeof $Enums.CourseTypeEnum

export type DaysTypeEnum = $Enums.DaysTypeEnum

export const DaysTypeEnum: typeof $Enums.DaysTypeEnum

export type DisabledEnum = $Enums.DisabledEnum

export const DisabledEnum: typeof $Enums.DisabledEnum

export type EventTypeEnum = $Enums.EventTypeEnum

export const EventTypeEnum: typeof $Enums.EventTypeEnum

export type GenderEnum = $Enums.GenderEnum

export const GenderEnum: typeof $Enums.GenderEnum

export type GradeStatusEnum = $Enums.GradeStatusEnum

export const GradeStatusEnum: typeof $Enums.GradeStatusEnum

export type InvitationStatusEnum = $Enums.InvitationStatusEnum

export const InvitationStatusEnum: typeof $Enums.InvitationStatusEnum

export type IsActiveEnum = $Enums.IsActiveEnum

export const IsActiveEnum: typeof $Enums.IsActiveEnum

export type MajorTypeEnum = $Enums.MajorTypeEnum

export const MajorTypeEnum: typeof $Enums.MajorTypeEnum

export type MarriedEnum = $Enums.MarriedEnum

export const MarriedEnum: typeof $Enums.MarriedEnum

export type MaterialTypeEnum = $Enums.MaterialTypeEnum

export const MaterialTypeEnum: typeof $Enums.MaterialTypeEnum

export type MilitaryServiceEnum = $Enums.MilitaryServiceEnum

export const MilitaryServiceEnum: typeof $Enums.MilitaryServiceEnum

export type ProjectorEnum = $Enums.ProjectorEnum

export const ProjectorEnum: typeof $Enums.ProjectorEnum

export type PropertyCategoryEnum = $Enums.PropertyCategoryEnum

export const PropertyCategoryEnum: typeof $Enums.PropertyCategoryEnum

export type RecievedEnum = $Enums.RecievedEnum

export const RecievedEnum: typeof $Enums.RecievedEnum

export type RuleCategoryEnum = $Enums.RuleCategoryEnum

export const RuleCategoryEnum: typeof $Enums.RuleCategoryEnum

export type ScheduleTimeTypeEnum = $Enums.ScheduleTimeTypeEnum

export const ScheduleTimeTypeEnum: typeof $Enums.ScheduleTimeTypeEnum

export type ScheduleTypeEnum = $Enums.ScheduleTypeEnum

export const ScheduleTypeEnum: typeof $Enums.ScheduleTypeEnum

export type SignUpsEnum = $Enums.SignUpsEnum

export const SignUpsEnum: typeof $Enums.SignUpsEnum

export type StaffRoleEnum = $Enums.StaffRoleEnum

export const StaffRoleEnum: typeof $Enums.StaffRoleEnum

export type StateOfUsageEnum = $Enums.StateOfUsageEnum

export const StateOfUsageEnum: typeof $Enums.StateOfUsageEnum

export type StudentAttendanceEnum = $Enums.StudentAttendanceEnum

export const StudentAttendanceEnum: typeof $Enums.StudentAttendanceEnum

export type StudentIsActiveEnum = $Enums.StudentIsActiveEnum

export const StudentIsActiveEnum: typeof $Enums.StudentIsActiveEnum

export type TvEnum = $Enums.TvEnum

export const TvEnum: typeof $Enums.TvEnum

export type TypeEnum = $Enums.TypeEnum

export const TypeEnum: typeof $Enums.TypeEnum

export type UserRoleEnum = $Enums.UserRoleEnum

export const UserRoleEnum: typeof $Enums.UserRoleEnum

export type YearClassificationEnum = $Enums.YearClassificationEnum

export const YearClassificationEnum: typeof $Enums.YearClassificationEnum

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Auth_users
 * const auth_users = await prisma.auth_user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Auth_users
   * const auth_users = await prisma.auth_user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.auth_user`: Exposes CRUD operations for the **auth_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auth_users
    * const auth_users = await prisma.auth_user.findMany()
    * ```
    */
  get auth_user(): Prisma.auth_userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacherSchedule`: Exposes CRUD operations for the **TeacherSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeacherSchedules
    * const teacherSchedules = await prisma.teacherSchedule.findMany()
    * ```
    */
  get teacherSchedule(): Prisma.TeacherScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teachersCoursePlanning`: Exposes CRUD operations for the **TeachersCoursePlanning** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeachersCoursePlannings
    * const teachersCoursePlannings = await prisma.teachersCoursePlanning.findMany()
    * ```
    */
  get teachersCoursePlanning(): Prisma.TeachersCoursePlanningDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classrooms`: Exposes CRUD operations for the **Classrooms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classrooms
    * const classrooms = await prisma.classrooms.findMany()
    * ```
    */
  get classrooms(): Prisma.ClassroomsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courses`: Exposes CRUD operations for the **Courses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.courses.findMany()
    * ```
    */
  get courses(): Prisma.CoursesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teachersMajorPlanning`: Exposes CRUD operations for the **TeachersMajorPlanning** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeachersMajorPlannings
    * const teachersMajorPlannings = await prisma.teachersMajorPlanning.findMany()
    * ```
    */
  get teachersMajorPlanning(): Prisma.TeachersMajorPlanningDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentClubs`: Exposes CRUD operations for the **StudentClubs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentClubs
    * const studentClubs = await prisma.studentClubs.findMany()
    * ```
    */
  get studentClubs(): Prisma.StudentClubsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.major`: Exposes CRUD operations for the **Major** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Majors
    * const majors = await prisma.major.findMany()
    * ```
    */
  get major(): Prisma.MajorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.departmentsOfEducation`: Exposes CRUD operations for the **DepartmentsOfEducation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepartmentsOfEducations
    * const departmentsOfEducations = await prisma.departmentsOfEducation.findMany()
    * ```
    */
  get departmentsOfEducation(): Prisma.DepartmentsOfEducationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentCurriculum`: Exposes CRUD operations for the **StudentCurriculum** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentCurricula
    * const studentCurricula = await prisma.studentCurriculum.findMany()
    * ```
    */
  get studentCurriculum(): Prisma.StudentCurriculumDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    auth_user: 'auth_user',
    TeacherSchedule: 'TeacherSchedule',
    TeachersCoursePlanning: 'TeachersCoursePlanning',
    Classrooms: 'Classrooms',
    Courses: 'Courses',
    TeachersMajorPlanning: 'TeachersMajorPlanning',
    Teacher: 'Teacher',
    StudentClubs: 'StudentClubs',
    Student: 'Student',
    Major: 'Major',
    DepartmentsOfEducation: 'DepartmentsOfEducation',
    Department: 'Department',
    StudentCurriculum: 'StudentCurriculum'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "auth_user" | "teacherSchedule" | "teachersCoursePlanning" | "classrooms" | "courses" | "teachersMajorPlanning" | "teacher" | "studentClubs" | "student" | "major" | "departmentsOfEducation" | "department" | "studentCurriculum"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      auth_user: {
        payload: Prisma.$auth_userPayload<ExtArgs>
        fields: Prisma.auth_userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.auth_userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.auth_userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>
          }
          findFirst: {
            args: Prisma.auth_userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.auth_userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>
          }
          findMany: {
            args: Prisma.auth_userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>[]
          }
          create: {
            args: Prisma.auth_userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>
          }
          createMany: {
            args: Prisma.auth_userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.auth_userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>[]
          }
          delete: {
            args: Prisma.auth_userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>
          }
          update: {
            args: Prisma.auth_userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>
          }
          deleteMany: {
            args: Prisma.auth_userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.auth_userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.auth_userUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>[]
          }
          upsert: {
            args: Prisma.auth_userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auth_userPayload>
          }
          aggregate: {
            args: Prisma.Auth_userAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuth_user>
          }
          groupBy: {
            args: Prisma.auth_userGroupByArgs<ExtArgs>
            result: $Utils.Optional<Auth_userGroupByOutputType>[]
          }
          count: {
            args: Prisma.auth_userCountArgs<ExtArgs>
            result: $Utils.Optional<Auth_userCountAggregateOutputType> | number
          }
        }
      }
      TeacherSchedule: {
        payload: Prisma.$TeacherSchedulePayload<ExtArgs>
        fields: Prisma.TeacherScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>
          }
          findFirst: {
            args: Prisma.TeacherScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>
          }
          findMany: {
            args: Prisma.TeacherScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>[]
          }
          create: {
            args: Prisma.TeacherScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>
          }
          createMany: {
            args: Prisma.TeacherScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>[]
          }
          delete: {
            args: Prisma.TeacherScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>
          }
          update: {
            args: Prisma.TeacherScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>
          }
          deleteMany: {
            args: Prisma.TeacherScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>[]
          }
          upsert: {
            args: Prisma.TeacherScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSchedulePayload>
          }
          aggregate: {
            args: Prisma.TeacherScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacherSchedule>
          }
          groupBy: {
            args: Prisma.TeacherScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherScheduleCountAggregateOutputType> | number
          }
        }
      }
      TeachersCoursePlanning: {
        payload: Prisma.$TeachersCoursePlanningPayload<ExtArgs>
        fields: Prisma.TeachersCoursePlanningFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeachersCoursePlanningFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeachersCoursePlanningFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>
          }
          findFirst: {
            args: Prisma.TeachersCoursePlanningFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeachersCoursePlanningFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>
          }
          findMany: {
            args: Prisma.TeachersCoursePlanningFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>[]
          }
          create: {
            args: Prisma.TeachersCoursePlanningCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>
          }
          createMany: {
            args: Prisma.TeachersCoursePlanningCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeachersCoursePlanningCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>[]
          }
          delete: {
            args: Prisma.TeachersCoursePlanningDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>
          }
          update: {
            args: Prisma.TeachersCoursePlanningUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>
          }
          deleteMany: {
            args: Prisma.TeachersCoursePlanningDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeachersCoursePlanningUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeachersCoursePlanningUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>[]
          }
          upsert: {
            args: Prisma.TeachersCoursePlanningUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersCoursePlanningPayload>
          }
          aggregate: {
            args: Prisma.TeachersCoursePlanningAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeachersCoursePlanning>
          }
          groupBy: {
            args: Prisma.TeachersCoursePlanningGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeachersCoursePlanningGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeachersCoursePlanningCountArgs<ExtArgs>
            result: $Utils.Optional<TeachersCoursePlanningCountAggregateOutputType> | number
          }
        }
      }
      Classrooms: {
        payload: Prisma.$ClassroomsPayload<ExtArgs>
        fields: Prisma.ClassroomsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassroomsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassroomsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>
          }
          findFirst: {
            args: Prisma.ClassroomsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassroomsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>
          }
          findMany: {
            args: Prisma.ClassroomsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>[]
          }
          create: {
            args: Prisma.ClassroomsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>
          }
          createMany: {
            args: Prisma.ClassroomsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassroomsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>[]
          }
          delete: {
            args: Prisma.ClassroomsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>
          }
          update: {
            args: Prisma.ClassroomsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>
          }
          deleteMany: {
            args: Prisma.ClassroomsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassroomsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassroomsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>[]
          }
          upsert: {
            args: Prisma.ClassroomsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassroomsPayload>
          }
          aggregate: {
            args: Prisma.ClassroomsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassrooms>
          }
          groupBy: {
            args: Prisma.ClassroomsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassroomsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassroomsCountArgs<ExtArgs>
            result: $Utils.Optional<ClassroomsCountAggregateOutputType> | number
          }
        }
      }
      Courses: {
        payload: Prisma.$CoursesPayload<ExtArgs>
        fields: Prisma.CoursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoursesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoursesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          findFirst: {
            args: Prisma.CoursesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoursesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          findMany: {
            args: Prisma.CoursesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          create: {
            args: Prisma.CoursesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          createMany: {
            args: Prisma.CoursesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoursesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          delete: {
            args: Prisma.CoursesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          update: {
            args: Prisma.CoursesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          deleteMany: {
            args: Prisma.CoursesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoursesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoursesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          upsert: {
            args: Prisma.CoursesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          aggregate: {
            args: Prisma.CoursesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourses>
          }
          groupBy: {
            args: Prisma.CoursesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoursesCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesCountAggregateOutputType> | number
          }
        }
      }
      TeachersMajorPlanning: {
        payload: Prisma.$TeachersMajorPlanningPayload<ExtArgs>
        fields: Prisma.TeachersMajorPlanningFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeachersMajorPlanningFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeachersMajorPlanningFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>
          }
          findFirst: {
            args: Prisma.TeachersMajorPlanningFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeachersMajorPlanningFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>
          }
          findMany: {
            args: Prisma.TeachersMajorPlanningFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>[]
          }
          create: {
            args: Prisma.TeachersMajorPlanningCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>
          }
          createMany: {
            args: Prisma.TeachersMajorPlanningCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeachersMajorPlanningCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>[]
          }
          delete: {
            args: Prisma.TeachersMajorPlanningDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>
          }
          update: {
            args: Prisma.TeachersMajorPlanningUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>
          }
          deleteMany: {
            args: Prisma.TeachersMajorPlanningDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeachersMajorPlanningUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeachersMajorPlanningUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>[]
          }
          upsert: {
            args: Prisma.TeachersMajorPlanningUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersMajorPlanningPayload>
          }
          aggregate: {
            args: Prisma.TeachersMajorPlanningAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeachersMajorPlanning>
          }
          groupBy: {
            args: Prisma.TeachersMajorPlanningGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeachersMajorPlanningGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeachersMajorPlanningCountArgs<ExtArgs>
            result: $Utils.Optional<TeachersMajorPlanningCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      StudentClubs: {
        payload: Prisma.$StudentClubsPayload<ExtArgs>
        fields: Prisma.StudentClubsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentClubsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentClubsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>
          }
          findFirst: {
            args: Prisma.StudentClubsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentClubsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>
          }
          findMany: {
            args: Prisma.StudentClubsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>[]
          }
          create: {
            args: Prisma.StudentClubsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>
          }
          createMany: {
            args: Prisma.StudentClubsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentClubsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>[]
          }
          delete: {
            args: Prisma.StudentClubsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>
          }
          update: {
            args: Prisma.StudentClubsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>
          }
          deleteMany: {
            args: Prisma.StudentClubsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentClubsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentClubsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>[]
          }
          upsert: {
            args: Prisma.StudentClubsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClubsPayload>
          }
          aggregate: {
            args: Prisma.StudentClubsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentClubs>
          }
          groupBy: {
            args: Prisma.StudentClubsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentClubsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentClubsCountArgs<ExtArgs>
            result: $Utils.Optional<StudentClubsCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Major: {
        payload: Prisma.$MajorPayload<ExtArgs>
        fields: Prisma.MajorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MajorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MajorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          findFirst: {
            args: Prisma.MajorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MajorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          findMany: {
            args: Prisma.MajorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>[]
          }
          create: {
            args: Prisma.MajorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          createMany: {
            args: Prisma.MajorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MajorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>[]
          }
          delete: {
            args: Prisma.MajorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          update: {
            args: Prisma.MajorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          deleteMany: {
            args: Prisma.MajorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MajorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MajorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>[]
          }
          upsert: {
            args: Prisma.MajorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          aggregate: {
            args: Prisma.MajorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMajor>
          }
          groupBy: {
            args: Prisma.MajorGroupByArgs<ExtArgs>
            result: $Utils.Optional<MajorGroupByOutputType>[]
          }
          count: {
            args: Prisma.MajorCountArgs<ExtArgs>
            result: $Utils.Optional<MajorCountAggregateOutputType> | number
          }
        }
      }
      DepartmentsOfEducation: {
        payload: Prisma.$DepartmentsOfEducationPayload<ExtArgs>
        fields: Prisma.DepartmentsOfEducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentsOfEducationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentsOfEducationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>
          }
          findFirst: {
            args: Prisma.DepartmentsOfEducationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentsOfEducationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>
          }
          findMany: {
            args: Prisma.DepartmentsOfEducationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>[]
          }
          create: {
            args: Prisma.DepartmentsOfEducationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>
          }
          createMany: {
            args: Prisma.DepartmentsOfEducationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentsOfEducationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>[]
          }
          delete: {
            args: Prisma.DepartmentsOfEducationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>
          }
          update: {
            args: Prisma.DepartmentsOfEducationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentsOfEducationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentsOfEducationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentsOfEducationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentsOfEducationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsOfEducationPayload>
          }
          aggregate: {
            args: Prisma.DepartmentsOfEducationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartmentsOfEducation>
          }
          groupBy: {
            args: Prisma.DepartmentsOfEducationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentsOfEducationGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentsOfEducationCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentsOfEducationCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      StudentCurriculum: {
        payload: Prisma.$StudentCurriculumPayload<ExtArgs>
        fields: Prisma.StudentCurriculumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentCurriculumFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentCurriculumFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>
          }
          findFirst: {
            args: Prisma.StudentCurriculumFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentCurriculumFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>
          }
          findMany: {
            args: Prisma.StudentCurriculumFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>[]
          }
          create: {
            args: Prisma.StudentCurriculumCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>
          }
          createMany: {
            args: Prisma.StudentCurriculumCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCurriculumCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>[]
          }
          delete: {
            args: Prisma.StudentCurriculumDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>
          }
          update: {
            args: Prisma.StudentCurriculumUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>
          }
          deleteMany: {
            args: Prisma.StudentCurriculumDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentCurriculumUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentCurriculumUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>[]
          }
          upsert: {
            args: Prisma.StudentCurriculumUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentCurriculumPayload>
          }
          aggregate: {
            args: Prisma.StudentCurriculumAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentCurriculum>
          }
          groupBy: {
            args: Prisma.StudentCurriculumGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentCurriculumGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCurriculumCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCurriculumCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    auth_user?: auth_userOmit
    teacherSchedule?: TeacherScheduleOmit
    teachersCoursePlanning?: TeachersCoursePlanningOmit
    classrooms?: ClassroomsOmit
    courses?: CoursesOmit
    teachersMajorPlanning?: TeachersMajorPlanningOmit
    teacher?: TeacherOmit
    studentClubs?: StudentClubsOmit
    student?: StudentOmit
    major?: MajorOmit
    departmentsOfEducation?: DepartmentsOfEducationOmit
    department?: DepartmentOmit
    studentCurriculum?: StudentCurriculumOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Auth_userCountOutputType
   */

  export type Auth_userCountOutputType = {
    Teacher: number
    assistantLeaderIn: number
    primaryLeaderIn: number
    Student: number
  }

  export type Auth_userCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Teacher?: boolean | Auth_userCountOutputTypeCountTeacherArgs
    assistantLeaderIn?: boolean | Auth_userCountOutputTypeCountAssistantLeaderInArgs
    primaryLeaderIn?: boolean | Auth_userCountOutputTypeCountPrimaryLeaderInArgs
    Student?: boolean | Auth_userCountOutputTypeCountStudentArgs
  }

  // Custom InputTypes
  /**
   * Auth_userCountOutputType without action
   */
  export type Auth_userCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_userCountOutputType
     */
    select?: Auth_userCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Auth_userCountOutputType without action
   */
  export type Auth_userCountOutputTypeCountTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * Auth_userCountOutputType without action
   */
  export type Auth_userCountOutputTypeCountAssistantLeaderInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentClubsWhereInput
  }

  /**
   * Auth_userCountOutputType without action
   */
  export type Auth_userCountOutputTypeCountPrimaryLeaderInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentClubsWhereInput
  }

  /**
   * Auth_userCountOutputType without action
   */
  export type Auth_userCountOutputTypeCountStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type ClassroomsCountOutputType
   */

  export type ClassroomsCountOutputType = {
    TeacherSchedule: number
    Department: number
  }

  export type ClassroomsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TeacherSchedule?: boolean | ClassroomsCountOutputTypeCountTeacherScheduleArgs
    Department?: boolean | ClassroomsCountOutputTypeCountDepartmentArgs
  }

  // Custom InputTypes
  /**
   * ClassroomsCountOutputType without action
   */
  export type ClassroomsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassroomsCountOutputType
     */
    select?: ClassroomsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassroomsCountOutputType without action
   */
  export type ClassroomsCountOutputTypeCountTeacherScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherScheduleWhereInput
  }

  /**
   * ClassroomsCountOutputType without action
   */
  export type ClassroomsCountOutputTypeCountDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }


  /**
   * Count Type CoursesCountOutputType
   */

  export type CoursesCountOutputType = {
    TeacherSchedule: number
    TeachersCoursePlanning: number
    StudentCurriculum: number
  }

  export type CoursesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TeacherSchedule?: boolean | CoursesCountOutputTypeCountTeacherScheduleArgs
    TeachersCoursePlanning?: boolean | CoursesCountOutputTypeCountTeachersCoursePlanningArgs
    StudentCurriculum?: boolean | CoursesCountOutputTypeCountStudentCurriculumArgs
  }

  // Custom InputTypes
  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesCountOutputType
     */
    select?: CoursesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountTeacherScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherScheduleWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountTeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersCoursePlanningWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountStudentCurriculumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentCurriculumWhereInput
  }


  /**
   * Count Type TeachersMajorPlanningCountOutputType
   */

  export type TeachersMajorPlanningCountOutputType = {
    TeachersCoursePlanning: number
  }

  export type TeachersMajorPlanningCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TeachersCoursePlanning?: boolean | TeachersMajorPlanningCountOutputTypeCountTeachersCoursePlanningArgs
  }

  // Custom InputTypes
  /**
   * TeachersMajorPlanningCountOutputType without action
   */
  export type TeachersMajorPlanningCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanningCountOutputType
     */
    select?: TeachersMajorPlanningCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeachersMajorPlanningCountOutputType without action
   */
  export type TeachersMajorPlanningCountOutputTypeCountTeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersCoursePlanningWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    TeacherSchedule: number
    TeachersCoursePlanning: number
    TeachersMajorPlanning: number
    StudentClubs: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TeacherSchedule?: boolean | TeacherCountOutputTypeCountTeacherScheduleArgs
    TeachersCoursePlanning?: boolean | TeacherCountOutputTypeCountTeachersCoursePlanningArgs
    TeachersMajorPlanning?: boolean | TeacherCountOutputTypeCountTeachersMajorPlanningArgs
    StudentClubs?: boolean | TeacherCountOutputTypeCountStudentClubsArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountTeacherScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherScheduleWhereInput
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountTeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersCoursePlanningWhereInput
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountTeachersMajorPlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersMajorPlanningWhereInput
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountStudentClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentClubsWhereInput
  }


  /**
   * Count Type StudentClubsCountOutputType
   */

  export type StudentClubsCountOutputType = {
    Student: number
  }

  export type StudentClubsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | StudentClubsCountOutputTypeCountStudentArgs
  }

  // Custom InputTypes
  /**
   * StudentClubsCountOutputType without action
   */
  export type StudentClubsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubsCountOutputType
     */
    select?: StudentClubsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentClubsCountOutputType without action
   */
  export type StudentClubsCountOutputTypeCountStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    StudentCurriculum: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StudentCurriculum?: boolean | StudentCountOutputTypeCountStudentCurriculumArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentCurriculumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentCurriculumWhereInput
  }


  /**
   * Count Type MajorCountOutputType
   */

  export type MajorCountOutputType = {
    Courses: number
    Student: number
    StudentClubs: number
  }

  export type MajorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Courses?: boolean | MajorCountOutputTypeCountCoursesArgs
    Student?: boolean | MajorCountOutputTypeCountStudentArgs
    StudentClubs?: boolean | MajorCountOutputTypeCountStudentClubsArgs
  }

  // Custom InputTypes
  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MajorCountOutputType
     */
    select?: MajorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesWhereInput
  }

  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeCountStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeCountStudentClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentClubsWhereInput
  }


  /**
   * Count Type DepartmentsOfEducationCountOutputType
   */

  export type DepartmentsOfEducationCountOutputType = {
    Classrooms: number
    Teacher: number
    TeachersCoursePlanning: number
    TeachersMajorPlanning: number
    Department: number
  }

  export type DepartmentsOfEducationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Classrooms?: boolean | DepartmentsOfEducationCountOutputTypeCountClassroomsArgs
    Teacher?: boolean | DepartmentsOfEducationCountOutputTypeCountTeacherArgs
    TeachersCoursePlanning?: boolean | DepartmentsOfEducationCountOutputTypeCountTeachersCoursePlanningArgs
    TeachersMajorPlanning?: boolean | DepartmentsOfEducationCountOutputTypeCountTeachersMajorPlanningArgs
    Department?: boolean | DepartmentsOfEducationCountOutputTypeCountDepartmentArgs
  }

  // Custom InputTypes
  /**
   * DepartmentsOfEducationCountOutputType without action
   */
  export type DepartmentsOfEducationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducationCountOutputType
     */
    select?: DepartmentsOfEducationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentsOfEducationCountOutputType without action
   */
  export type DepartmentsOfEducationCountOutputTypeCountClassroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassroomsWhereInput
  }

  /**
   * DepartmentsOfEducationCountOutputType without action
   */
  export type DepartmentsOfEducationCountOutputTypeCountTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * DepartmentsOfEducationCountOutputType without action
   */
  export type DepartmentsOfEducationCountOutputTypeCountTeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersCoursePlanningWhereInput
  }

  /**
   * DepartmentsOfEducationCountOutputType without action
   */
  export type DepartmentsOfEducationCountOutputTypeCountTeachersMajorPlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersMajorPlanningWhereInput
  }

  /**
   * DepartmentsOfEducationCountOutputType without action
   */
  export type DepartmentsOfEducationCountOutputTypeCountDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    Classrooms: number
    Courses: number
    majors: number
    majorsOfEducation: number
    Student: number
    Teacher: number
    TeachersCoursePlanning: number
    TeachersMajorPlanning: number
    teacherSchedules: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Classrooms?: boolean | DepartmentCountOutputTypeCountClassroomsArgs
    Courses?: boolean | DepartmentCountOutputTypeCountCoursesArgs
    majors?: boolean | DepartmentCountOutputTypeCountMajorsArgs
    majorsOfEducation?: boolean | DepartmentCountOutputTypeCountMajorsOfEducationArgs
    Student?: boolean | DepartmentCountOutputTypeCountStudentArgs
    Teacher?: boolean | DepartmentCountOutputTypeCountTeacherArgs
    TeachersCoursePlanning?: boolean | DepartmentCountOutputTypeCountTeachersCoursePlanningArgs
    TeachersMajorPlanning?: boolean | DepartmentCountOutputTypeCountTeachersMajorPlanningArgs
    teacherSchedules?: boolean | DepartmentCountOutputTypeCountTeacherSchedulesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountClassroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassroomsWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountMajorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MajorWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountMajorsOfEducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MajorWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersCoursePlanningWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTeachersMajorPlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersMajorPlanningWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTeacherSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherScheduleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model auth_user
   */

  export type AggregateAuth_user = {
    _count: Auth_userCountAggregateOutputType | null
    _avg: Auth_userAvgAggregateOutputType | null
    _sum: Auth_userSumAggregateOutputType | null
    _min: Auth_userMinAggregateOutputType | null
    _max: Auth_userMaxAggregateOutputType | null
  }

  export type Auth_userAvgAggregateOutputType = {
    user_id: number | null
  }

  export type Auth_userSumAggregateOutputType = {
    user_id: number | null
  }

  export type Auth_userMinAggregateOutputType = {
    user_id: number | null
    login_name: string | null
    password_hash: string | null
    profile_picture: string | null
    registry_number: string | null
    user_role: $Enums.UserRoleEnum | null
    fname: string | null
    lname: string | null
    birthday: Date | null
    gender: $Enums.GenderEnum | null
    citizenship: string | null
    state_city: string | null
    town_district: string | null
    valid_address: string | null
    state_city_living: string | null
    town_district_living: string | null
    valid_address_living: string | null
    postal_address: string | null
    home_phone_number: string | null
    phone_number: string | null
    phone_number_emergency: string | null
    country: string | null
    ethnicity: string | null
    social_background: string | null
    state_city_of_birth: string | null
    town_district_of_birth: string | null
    place_of_birth: string | null
    education: string | null
    current_academic_degree: string | null
    profession: string | null
    profession_certification: string | null
    f_passport_number: string | null
    married: $Enums.MarriedEnum | null
    military_service: $Enums.MilitaryServiceEnum | null
    pensions_established: string | null
    additional_notes: string | null
    blood_type: string | null
    drivers_certificate: string | null
    drivers_certificate_number: string | null
    disabled: $Enums.DisabledEnum | null
    is_active: boolean | null
    email: string | null
    created_at: Date | null
    family_tree_name: string | null
  }

  export type Auth_userMaxAggregateOutputType = {
    user_id: number | null
    login_name: string | null
    password_hash: string | null
    profile_picture: string | null
    registry_number: string | null
    user_role: $Enums.UserRoleEnum | null
    fname: string | null
    lname: string | null
    birthday: Date | null
    gender: $Enums.GenderEnum | null
    citizenship: string | null
    state_city: string | null
    town_district: string | null
    valid_address: string | null
    state_city_living: string | null
    town_district_living: string | null
    valid_address_living: string | null
    postal_address: string | null
    home_phone_number: string | null
    phone_number: string | null
    phone_number_emergency: string | null
    country: string | null
    ethnicity: string | null
    social_background: string | null
    state_city_of_birth: string | null
    town_district_of_birth: string | null
    place_of_birth: string | null
    education: string | null
    current_academic_degree: string | null
    profession: string | null
    profession_certification: string | null
    f_passport_number: string | null
    married: $Enums.MarriedEnum | null
    military_service: $Enums.MilitaryServiceEnum | null
    pensions_established: string | null
    additional_notes: string | null
    blood_type: string | null
    drivers_certificate: string | null
    drivers_certificate_number: string | null
    disabled: $Enums.DisabledEnum | null
    is_active: boolean | null
    email: string | null
    created_at: Date | null
    family_tree_name: string | null
  }

  export type Auth_userCountAggregateOutputType = {
    user_id: number
    login_name: number
    password_hash: number
    profile_picture: number
    registry_number: number
    user_role: number
    fname: number
    lname: number
    birthday: number
    gender: number
    citizenship: number
    state_city: number
    town_district: number
    valid_address: number
    state_city_living: number
    town_district_living: number
    valid_address_living: number
    postal_address: number
    home_phone_number: number
    phone_number: number
    phone_number_emergency: number
    country: number
    ethnicity: number
    social_background: number
    state_city_of_birth: number
    town_district_of_birth: number
    place_of_birth: number
    education: number
    current_academic_degree: number
    profession: number
    profession_certification: number
    f_passport_number: number
    married: number
    military_service: number
    pensions_established: number
    additional_notes: number
    blood_type: number
    drivers_certificate: number
    drivers_certificate_number: number
    disabled: number
    is_active: number
    email: number
    created_at: number
    family_tree_name: number
    _all: number
  }


  export type Auth_userAvgAggregateInputType = {
    user_id?: true
  }

  export type Auth_userSumAggregateInputType = {
    user_id?: true
  }

  export type Auth_userMinAggregateInputType = {
    user_id?: true
    login_name?: true
    password_hash?: true
    profile_picture?: true
    registry_number?: true
    user_role?: true
    fname?: true
    lname?: true
    birthday?: true
    gender?: true
    citizenship?: true
    state_city?: true
    town_district?: true
    valid_address?: true
    state_city_living?: true
    town_district_living?: true
    valid_address_living?: true
    postal_address?: true
    home_phone_number?: true
    phone_number?: true
    phone_number_emergency?: true
    country?: true
    ethnicity?: true
    social_background?: true
    state_city_of_birth?: true
    town_district_of_birth?: true
    place_of_birth?: true
    education?: true
    current_academic_degree?: true
    profession?: true
    profession_certification?: true
    f_passport_number?: true
    married?: true
    military_service?: true
    pensions_established?: true
    additional_notes?: true
    blood_type?: true
    drivers_certificate?: true
    drivers_certificate_number?: true
    disabled?: true
    is_active?: true
    email?: true
    created_at?: true
    family_tree_name?: true
  }

  export type Auth_userMaxAggregateInputType = {
    user_id?: true
    login_name?: true
    password_hash?: true
    profile_picture?: true
    registry_number?: true
    user_role?: true
    fname?: true
    lname?: true
    birthday?: true
    gender?: true
    citizenship?: true
    state_city?: true
    town_district?: true
    valid_address?: true
    state_city_living?: true
    town_district_living?: true
    valid_address_living?: true
    postal_address?: true
    home_phone_number?: true
    phone_number?: true
    phone_number_emergency?: true
    country?: true
    ethnicity?: true
    social_background?: true
    state_city_of_birth?: true
    town_district_of_birth?: true
    place_of_birth?: true
    education?: true
    current_academic_degree?: true
    profession?: true
    profession_certification?: true
    f_passport_number?: true
    married?: true
    military_service?: true
    pensions_established?: true
    additional_notes?: true
    blood_type?: true
    drivers_certificate?: true
    drivers_certificate_number?: true
    disabled?: true
    is_active?: true
    email?: true
    created_at?: true
    family_tree_name?: true
  }

  export type Auth_userCountAggregateInputType = {
    user_id?: true
    login_name?: true
    password_hash?: true
    profile_picture?: true
    registry_number?: true
    user_role?: true
    fname?: true
    lname?: true
    birthday?: true
    gender?: true
    citizenship?: true
    state_city?: true
    town_district?: true
    valid_address?: true
    state_city_living?: true
    town_district_living?: true
    valid_address_living?: true
    postal_address?: true
    home_phone_number?: true
    phone_number?: true
    phone_number_emergency?: true
    country?: true
    ethnicity?: true
    social_background?: true
    state_city_of_birth?: true
    town_district_of_birth?: true
    place_of_birth?: true
    education?: true
    current_academic_degree?: true
    profession?: true
    profession_certification?: true
    f_passport_number?: true
    married?: true
    military_service?: true
    pensions_established?: true
    additional_notes?: true
    blood_type?: true
    drivers_certificate?: true
    drivers_certificate_number?: true
    disabled?: true
    is_active?: true
    email?: true
    created_at?: true
    family_tree_name?: true
    _all?: true
  }

  export type Auth_userAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which auth_user to aggregate.
     */
    where?: auth_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auth_users to fetch.
     */
    orderBy?: auth_userOrderByWithRelationInput | auth_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: auth_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auth_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auth_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned auth_users
    **/
    _count?: true | Auth_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Auth_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Auth_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Auth_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Auth_userMaxAggregateInputType
  }

  export type GetAuth_userAggregateType<T extends Auth_userAggregateArgs> = {
        [P in keyof T & keyof AggregateAuth_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuth_user[P]>
      : GetScalarType<T[P], AggregateAuth_user[P]>
  }




  export type auth_userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: auth_userWhereInput
    orderBy?: auth_userOrderByWithAggregationInput | auth_userOrderByWithAggregationInput[]
    by: Auth_userScalarFieldEnum[] | Auth_userScalarFieldEnum
    having?: auth_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Auth_userCountAggregateInputType | true
    _avg?: Auth_userAvgAggregateInputType
    _sum?: Auth_userSumAggregateInputType
    _min?: Auth_userMinAggregateInputType
    _max?: Auth_userMaxAggregateInputType
  }

  export type Auth_userGroupByOutputType = {
    user_id: number
    login_name: string
    password_hash: string
    profile_picture: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address: string | null
    home_phone_number: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession: string | null
    profession_certification: string | null
    f_passport_number: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established: string | null
    additional_notes: string | null
    blood_type: string | null
    drivers_certificate: string | null
    drivers_certificate_number: string | null
    disabled: $Enums.DisabledEnum
    is_active: boolean
    email: string | null
    created_at: Date
    family_tree_name: string
    _count: Auth_userCountAggregateOutputType | null
    _avg: Auth_userAvgAggregateOutputType | null
    _sum: Auth_userSumAggregateOutputType | null
    _min: Auth_userMinAggregateOutputType | null
    _max: Auth_userMaxAggregateOutputType | null
  }

  type GetAuth_userGroupByPayload<T extends auth_userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Auth_userGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Auth_userGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Auth_userGroupByOutputType[P]>
            : GetScalarType<T[P], Auth_userGroupByOutputType[P]>
        }
      >
    >


  export type auth_userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    login_name?: boolean
    password_hash?: boolean
    profile_picture?: boolean
    registry_number?: boolean
    user_role?: boolean
    fname?: boolean
    lname?: boolean
    birthday?: boolean
    gender?: boolean
    citizenship?: boolean
    state_city?: boolean
    town_district?: boolean
    valid_address?: boolean
    state_city_living?: boolean
    town_district_living?: boolean
    valid_address_living?: boolean
    postal_address?: boolean
    home_phone_number?: boolean
    phone_number?: boolean
    phone_number_emergency?: boolean
    country?: boolean
    ethnicity?: boolean
    social_background?: boolean
    state_city_of_birth?: boolean
    town_district_of_birth?: boolean
    place_of_birth?: boolean
    education?: boolean
    current_academic_degree?: boolean
    profession?: boolean
    profession_certification?: boolean
    f_passport_number?: boolean
    married?: boolean
    military_service?: boolean
    pensions_established?: boolean
    additional_notes?: boolean
    blood_type?: boolean
    drivers_certificate?: boolean
    drivers_certificate_number?: boolean
    disabled?: boolean
    is_active?: boolean
    email?: boolean
    created_at?: boolean
    family_tree_name?: boolean
    Teacher?: boolean | auth_user$TeacherArgs<ExtArgs>
    assistantLeaderIn?: boolean | auth_user$assistantLeaderInArgs<ExtArgs>
    primaryLeaderIn?: boolean | auth_user$primaryLeaderInArgs<ExtArgs>
    Student?: boolean | auth_user$StudentArgs<ExtArgs>
    _count?: boolean | Auth_userCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auth_user"]>

  export type auth_userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    login_name?: boolean
    password_hash?: boolean
    profile_picture?: boolean
    registry_number?: boolean
    user_role?: boolean
    fname?: boolean
    lname?: boolean
    birthday?: boolean
    gender?: boolean
    citizenship?: boolean
    state_city?: boolean
    town_district?: boolean
    valid_address?: boolean
    state_city_living?: boolean
    town_district_living?: boolean
    valid_address_living?: boolean
    postal_address?: boolean
    home_phone_number?: boolean
    phone_number?: boolean
    phone_number_emergency?: boolean
    country?: boolean
    ethnicity?: boolean
    social_background?: boolean
    state_city_of_birth?: boolean
    town_district_of_birth?: boolean
    place_of_birth?: boolean
    education?: boolean
    current_academic_degree?: boolean
    profession?: boolean
    profession_certification?: boolean
    f_passport_number?: boolean
    married?: boolean
    military_service?: boolean
    pensions_established?: boolean
    additional_notes?: boolean
    blood_type?: boolean
    drivers_certificate?: boolean
    drivers_certificate_number?: boolean
    disabled?: boolean
    is_active?: boolean
    email?: boolean
    created_at?: boolean
    family_tree_name?: boolean
  }, ExtArgs["result"]["auth_user"]>

  export type auth_userSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    login_name?: boolean
    password_hash?: boolean
    profile_picture?: boolean
    registry_number?: boolean
    user_role?: boolean
    fname?: boolean
    lname?: boolean
    birthday?: boolean
    gender?: boolean
    citizenship?: boolean
    state_city?: boolean
    town_district?: boolean
    valid_address?: boolean
    state_city_living?: boolean
    town_district_living?: boolean
    valid_address_living?: boolean
    postal_address?: boolean
    home_phone_number?: boolean
    phone_number?: boolean
    phone_number_emergency?: boolean
    country?: boolean
    ethnicity?: boolean
    social_background?: boolean
    state_city_of_birth?: boolean
    town_district_of_birth?: boolean
    place_of_birth?: boolean
    education?: boolean
    current_academic_degree?: boolean
    profession?: boolean
    profession_certification?: boolean
    f_passport_number?: boolean
    married?: boolean
    military_service?: boolean
    pensions_established?: boolean
    additional_notes?: boolean
    blood_type?: boolean
    drivers_certificate?: boolean
    drivers_certificate_number?: boolean
    disabled?: boolean
    is_active?: boolean
    email?: boolean
    created_at?: boolean
    family_tree_name?: boolean
  }, ExtArgs["result"]["auth_user"]>

  export type auth_userSelectScalar = {
    user_id?: boolean
    login_name?: boolean
    password_hash?: boolean
    profile_picture?: boolean
    registry_number?: boolean
    user_role?: boolean
    fname?: boolean
    lname?: boolean
    birthday?: boolean
    gender?: boolean
    citizenship?: boolean
    state_city?: boolean
    town_district?: boolean
    valid_address?: boolean
    state_city_living?: boolean
    town_district_living?: boolean
    valid_address_living?: boolean
    postal_address?: boolean
    home_phone_number?: boolean
    phone_number?: boolean
    phone_number_emergency?: boolean
    country?: boolean
    ethnicity?: boolean
    social_background?: boolean
    state_city_of_birth?: boolean
    town_district_of_birth?: boolean
    place_of_birth?: boolean
    education?: boolean
    current_academic_degree?: boolean
    profession?: boolean
    profession_certification?: boolean
    f_passport_number?: boolean
    married?: boolean
    military_service?: boolean
    pensions_established?: boolean
    additional_notes?: boolean
    blood_type?: boolean
    drivers_certificate?: boolean
    drivers_certificate_number?: boolean
    disabled?: boolean
    is_active?: boolean
    email?: boolean
    created_at?: boolean
    family_tree_name?: boolean
  }

  export type auth_userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "login_name" | "password_hash" | "profile_picture" | "registry_number" | "user_role" | "fname" | "lname" | "birthday" | "gender" | "citizenship" | "state_city" | "town_district" | "valid_address" | "state_city_living" | "town_district_living" | "valid_address_living" | "postal_address" | "home_phone_number" | "phone_number" | "phone_number_emergency" | "country" | "ethnicity" | "social_background" | "state_city_of_birth" | "town_district_of_birth" | "place_of_birth" | "education" | "current_academic_degree" | "profession" | "profession_certification" | "f_passport_number" | "married" | "military_service" | "pensions_established" | "additional_notes" | "blood_type" | "drivers_certificate" | "drivers_certificate_number" | "disabled" | "is_active" | "email" | "created_at" | "family_tree_name", ExtArgs["result"]["auth_user"]>
  export type auth_userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Teacher?: boolean | auth_user$TeacherArgs<ExtArgs>
    assistantLeaderIn?: boolean | auth_user$assistantLeaderInArgs<ExtArgs>
    primaryLeaderIn?: boolean | auth_user$primaryLeaderInArgs<ExtArgs>
    Student?: boolean | auth_user$StudentArgs<ExtArgs>
    _count?: boolean | Auth_userCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type auth_userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type auth_userIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $auth_userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "auth_user"
    objects: {
      Teacher: Prisma.$TeacherPayload<ExtArgs>[]
      assistantLeaderIn: Prisma.$StudentClubsPayload<ExtArgs>[]
      primaryLeaderIn: Prisma.$StudentClubsPayload<ExtArgs>[]
      Student: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      login_name: string
      password_hash: string
      profile_picture: string | null
      registry_number: string
      user_role: $Enums.UserRoleEnum
      fname: string
      lname: string
      birthday: Date
      gender: $Enums.GenderEnum
      citizenship: string
      state_city: string
      town_district: string
      valid_address: string
      state_city_living: string
      town_district_living: string
      valid_address_living: string
      postal_address: string | null
      home_phone_number: string | null
      phone_number: string
      phone_number_emergency: string
      country: string
      ethnicity: string
      social_background: string
      state_city_of_birth: string
      town_district_of_birth: string
      place_of_birth: string
      education: string
      current_academic_degree: string
      profession: string | null
      profession_certification: string | null
      f_passport_number: string | null
      married: $Enums.MarriedEnum
      military_service: $Enums.MilitaryServiceEnum
      pensions_established: string | null
      additional_notes: string | null
      blood_type: string | null
      drivers_certificate: string | null
      drivers_certificate_number: string | null
      disabled: $Enums.DisabledEnum
      is_active: boolean
      email: string | null
      created_at: Date
      family_tree_name: string
    }, ExtArgs["result"]["auth_user"]>
    composites: {}
  }

  type auth_userGetPayload<S extends boolean | null | undefined | auth_userDefaultArgs> = $Result.GetResult<Prisma.$auth_userPayload, S>

  type auth_userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<auth_userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Auth_userCountAggregateInputType | true
    }

  export interface auth_userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['auth_user'], meta: { name: 'auth_user' } }
    /**
     * Find zero or one Auth_user that matches the filter.
     * @param {auth_userFindUniqueArgs} args - Arguments to find a Auth_user
     * @example
     * // Get one Auth_user
     * const auth_user = await prisma.auth_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends auth_userFindUniqueArgs>(args: SelectSubset<T, auth_userFindUniqueArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Auth_user that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {auth_userFindUniqueOrThrowArgs} args - Arguments to find a Auth_user
     * @example
     * // Get one Auth_user
     * const auth_user = await prisma.auth_user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends auth_userFindUniqueOrThrowArgs>(args: SelectSubset<T, auth_userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auth_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auth_userFindFirstArgs} args - Arguments to find a Auth_user
     * @example
     * // Get one Auth_user
     * const auth_user = await prisma.auth_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends auth_userFindFirstArgs>(args?: SelectSubset<T, auth_userFindFirstArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auth_user that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auth_userFindFirstOrThrowArgs} args - Arguments to find a Auth_user
     * @example
     * // Get one Auth_user
     * const auth_user = await prisma.auth_user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends auth_userFindFirstOrThrowArgs>(args?: SelectSubset<T, auth_userFindFirstOrThrowArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Auth_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auth_userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auth_users
     * const auth_users = await prisma.auth_user.findMany()
     * 
     * // Get first 10 Auth_users
     * const auth_users = await prisma.auth_user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const auth_userWithUser_idOnly = await prisma.auth_user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends auth_userFindManyArgs>(args?: SelectSubset<T, auth_userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Auth_user.
     * @param {auth_userCreateArgs} args - Arguments to create a Auth_user.
     * @example
     * // Create one Auth_user
     * const Auth_user = await prisma.auth_user.create({
     *   data: {
     *     // ... data to create a Auth_user
     *   }
     * })
     * 
     */
    create<T extends auth_userCreateArgs>(args: SelectSubset<T, auth_userCreateArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Auth_users.
     * @param {auth_userCreateManyArgs} args - Arguments to create many Auth_users.
     * @example
     * // Create many Auth_users
     * const auth_user = await prisma.auth_user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends auth_userCreateManyArgs>(args?: SelectSubset<T, auth_userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auth_users and returns the data saved in the database.
     * @param {auth_userCreateManyAndReturnArgs} args - Arguments to create many Auth_users.
     * @example
     * // Create many Auth_users
     * const auth_user = await prisma.auth_user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auth_users and only return the `user_id`
     * const auth_userWithUser_idOnly = await prisma.auth_user.createManyAndReturn({
     *   select: { user_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends auth_userCreateManyAndReturnArgs>(args?: SelectSubset<T, auth_userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Auth_user.
     * @param {auth_userDeleteArgs} args - Arguments to delete one Auth_user.
     * @example
     * // Delete one Auth_user
     * const Auth_user = await prisma.auth_user.delete({
     *   where: {
     *     // ... filter to delete one Auth_user
     *   }
     * })
     * 
     */
    delete<T extends auth_userDeleteArgs>(args: SelectSubset<T, auth_userDeleteArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Auth_user.
     * @param {auth_userUpdateArgs} args - Arguments to update one Auth_user.
     * @example
     * // Update one Auth_user
     * const auth_user = await prisma.auth_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends auth_userUpdateArgs>(args: SelectSubset<T, auth_userUpdateArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Auth_users.
     * @param {auth_userDeleteManyArgs} args - Arguments to filter Auth_users to delete.
     * @example
     * // Delete a few Auth_users
     * const { count } = await prisma.auth_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends auth_userDeleteManyArgs>(args?: SelectSubset<T, auth_userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auth_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auth_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auth_users
     * const auth_user = await prisma.auth_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends auth_userUpdateManyArgs>(args: SelectSubset<T, auth_userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auth_users and returns the data updated in the database.
     * @param {auth_userUpdateManyAndReturnArgs} args - Arguments to update many Auth_users.
     * @example
     * // Update many Auth_users
     * const auth_user = await prisma.auth_user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Auth_users and only return the `user_id`
     * const auth_userWithUser_idOnly = await prisma.auth_user.updateManyAndReturn({
     *   select: { user_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends auth_userUpdateManyAndReturnArgs>(args: SelectSubset<T, auth_userUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Auth_user.
     * @param {auth_userUpsertArgs} args - Arguments to update or create a Auth_user.
     * @example
     * // Update or create a Auth_user
     * const auth_user = await prisma.auth_user.upsert({
     *   create: {
     *     // ... data to create a Auth_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auth_user we want to update
     *   }
     * })
     */
    upsert<T extends auth_userUpsertArgs>(args: SelectSubset<T, auth_userUpsertArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Auth_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auth_userCountArgs} args - Arguments to filter Auth_users to count.
     * @example
     * // Count the number of Auth_users
     * const count = await prisma.auth_user.count({
     *   where: {
     *     // ... the filter for the Auth_users we want to count
     *   }
     * })
    **/
    count<T extends auth_userCountArgs>(
      args?: Subset<T, auth_userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Auth_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auth_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Auth_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Auth_userAggregateArgs>(args: Subset<T, Auth_userAggregateArgs>): Prisma.PrismaPromise<GetAuth_userAggregateType<T>>

    /**
     * Group by Auth_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auth_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends auth_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: auth_userGroupByArgs['orderBy'] }
        : { orderBy?: auth_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, auth_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuth_userGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the auth_user model
   */
  readonly fields: auth_userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for auth_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__auth_userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Teacher<T extends auth_user$TeacherArgs<ExtArgs> = {}>(args?: Subset<T, auth_user$TeacherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assistantLeaderIn<T extends auth_user$assistantLeaderInArgs<ExtArgs> = {}>(args?: Subset<T, auth_user$assistantLeaderInArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    primaryLeaderIn<T extends auth_user$primaryLeaderInArgs<ExtArgs> = {}>(args?: Subset<T, auth_user$primaryLeaderInArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Student<T extends auth_user$StudentArgs<ExtArgs> = {}>(args?: Subset<T, auth_user$StudentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the auth_user model
   */
  interface auth_userFieldRefs {
    readonly user_id: FieldRef<"auth_user", 'Int'>
    readonly login_name: FieldRef<"auth_user", 'String'>
    readonly password_hash: FieldRef<"auth_user", 'String'>
    readonly profile_picture: FieldRef<"auth_user", 'String'>
    readonly registry_number: FieldRef<"auth_user", 'String'>
    readonly user_role: FieldRef<"auth_user", 'UserRoleEnum'>
    readonly fname: FieldRef<"auth_user", 'String'>
    readonly lname: FieldRef<"auth_user", 'String'>
    readonly birthday: FieldRef<"auth_user", 'DateTime'>
    readonly gender: FieldRef<"auth_user", 'GenderEnum'>
    readonly citizenship: FieldRef<"auth_user", 'String'>
    readonly state_city: FieldRef<"auth_user", 'String'>
    readonly town_district: FieldRef<"auth_user", 'String'>
    readonly valid_address: FieldRef<"auth_user", 'String'>
    readonly state_city_living: FieldRef<"auth_user", 'String'>
    readonly town_district_living: FieldRef<"auth_user", 'String'>
    readonly valid_address_living: FieldRef<"auth_user", 'String'>
    readonly postal_address: FieldRef<"auth_user", 'String'>
    readonly home_phone_number: FieldRef<"auth_user", 'String'>
    readonly phone_number: FieldRef<"auth_user", 'String'>
    readonly phone_number_emergency: FieldRef<"auth_user", 'String'>
    readonly country: FieldRef<"auth_user", 'String'>
    readonly ethnicity: FieldRef<"auth_user", 'String'>
    readonly social_background: FieldRef<"auth_user", 'String'>
    readonly state_city_of_birth: FieldRef<"auth_user", 'String'>
    readonly town_district_of_birth: FieldRef<"auth_user", 'String'>
    readonly place_of_birth: FieldRef<"auth_user", 'String'>
    readonly education: FieldRef<"auth_user", 'String'>
    readonly current_academic_degree: FieldRef<"auth_user", 'String'>
    readonly profession: FieldRef<"auth_user", 'String'>
    readonly profession_certification: FieldRef<"auth_user", 'String'>
    readonly f_passport_number: FieldRef<"auth_user", 'String'>
    readonly married: FieldRef<"auth_user", 'MarriedEnum'>
    readonly military_service: FieldRef<"auth_user", 'MilitaryServiceEnum'>
    readonly pensions_established: FieldRef<"auth_user", 'String'>
    readonly additional_notes: FieldRef<"auth_user", 'String'>
    readonly blood_type: FieldRef<"auth_user", 'String'>
    readonly drivers_certificate: FieldRef<"auth_user", 'String'>
    readonly drivers_certificate_number: FieldRef<"auth_user", 'String'>
    readonly disabled: FieldRef<"auth_user", 'DisabledEnum'>
    readonly is_active: FieldRef<"auth_user", 'Boolean'>
    readonly email: FieldRef<"auth_user", 'String'>
    readonly created_at: FieldRef<"auth_user", 'DateTime'>
    readonly family_tree_name: FieldRef<"auth_user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * auth_user findUnique
   */
  export type auth_userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * Filter, which auth_user to fetch.
     */
    where: auth_userWhereUniqueInput
  }

  /**
   * auth_user findUniqueOrThrow
   */
  export type auth_userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * Filter, which auth_user to fetch.
     */
    where: auth_userWhereUniqueInput
  }

  /**
   * auth_user findFirst
   */
  export type auth_userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * Filter, which auth_user to fetch.
     */
    where?: auth_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auth_users to fetch.
     */
    orderBy?: auth_userOrderByWithRelationInput | auth_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for auth_users.
     */
    cursor?: auth_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auth_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auth_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of auth_users.
     */
    distinct?: Auth_userScalarFieldEnum | Auth_userScalarFieldEnum[]
  }

  /**
   * auth_user findFirstOrThrow
   */
  export type auth_userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * Filter, which auth_user to fetch.
     */
    where?: auth_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auth_users to fetch.
     */
    orderBy?: auth_userOrderByWithRelationInput | auth_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for auth_users.
     */
    cursor?: auth_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auth_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auth_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of auth_users.
     */
    distinct?: Auth_userScalarFieldEnum | Auth_userScalarFieldEnum[]
  }

  /**
   * auth_user findMany
   */
  export type auth_userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * Filter, which auth_users to fetch.
     */
    where?: auth_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auth_users to fetch.
     */
    orderBy?: auth_userOrderByWithRelationInput | auth_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing auth_users.
     */
    cursor?: auth_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auth_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auth_users.
     */
    skip?: number
    distinct?: Auth_userScalarFieldEnum | Auth_userScalarFieldEnum[]
  }

  /**
   * auth_user create
   */
  export type auth_userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * The data needed to create a auth_user.
     */
    data: XOR<auth_userCreateInput, auth_userUncheckedCreateInput>
  }

  /**
   * auth_user createMany
   */
  export type auth_userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many auth_users.
     */
    data: auth_userCreateManyInput | auth_userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * auth_user createManyAndReturn
   */
  export type auth_userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * The data used to create many auth_users.
     */
    data: auth_userCreateManyInput | auth_userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * auth_user update
   */
  export type auth_userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * The data needed to update a auth_user.
     */
    data: XOR<auth_userUpdateInput, auth_userUncheckedUpdateInput>
    /**
     * Choose, which auth_user to update.
     */
    where: auth_userWhereUniqueInput
  }

  /**
   * auth_user updateMany
   */
  export type auth_userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update auth_users.
     */
    data: XOR<auth_userUpdateManyMutationInput, auth_userUncheckedUpdateManyInput>
    /**
     * Filter which auth_users to update
     */
    where?: auth_userWhereInput
    /**
     * Limit how many auth_users to update.
     */
    limit?: number
  }

  /**
   * auth_user updateManyAndReturn
   */
  export type auth_userUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * The data used to update auth_users.
     */
    data: XOR<auth_userUpdateManyMutationInput, auth_userUncheckedUpdateManyInput>
    /**
     * Filter which auth_users to update
     */
    where?: auth_userWhereInput
    /**
     * Limit how many auth_users to update.
     */
    limit?: number
  }

  /**
   * auth_user upsert
   */
  export type auth_userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * The filter to search for the auth_user to update in case it exists.
     */
    where: auth_userWhereUniqueInput
    /**
     * In case the auth_user found by the `where` argument doesn't exist, create a new auth_user with this data.
     */
    create: XOR<auth_userCreateInput, auth_userUncheckedCreateInput>
    /**
     * In case the auth_user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<auth_userUpdateInput, auth_userUncheckedUpdateInput>
  }

  /**
   * auth_user delete
   */
  export type auth_userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    /**
     * Filter which auth_user to delete.
     */
    where: auth_userWhereUniqueInput
  }

  /**
   * auth_user deleteMany
   */
  export type auth_userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which auth_users to delete
     */
    where?: auth_userWhereInput
    /**
     * Limit how many auth_users to delete.
     */
    limit?: number
  }

  /**
   * auth_user.Teacher
   */
  export type auth_user$TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * auth_user.assistantLeaderIn
   */
  export type auth_user$assistantLeaderInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    where?: StudentClubsWhereInput
    orderBy?: StudentClubsOrderByWithRelationInput | StudentClubsOrderByWithRelationInput[]
    cursor?: StudentClubsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentClubsScalarFieldEnum | StudentClubsScalarFieldEnum[]
  }

  /**
   * auth_user.primaryLeaderIn
   */
  export type auth_user$primaryLeaderInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    where?: StudentClubsWhereInput
    orderBy?: StudentClubsOrderByWithRelationInput | StudentClubsOrderByWithRelationInput[]
    cursor?: StudentClubsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentClubsScalarFieldEnum | StudentClubsScalarFieldEnum[]
  }

  /**
   * auth_user.Student
   */
  export type auth_user$StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * auth_user without action
   */
  export type auth_userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
  }


  /**
   * Model TeacherSchedule
   */

  export type AggregateTeacherSchedule = {
    _count: TeacherScheduleCountAggregateOutputType | null
    _avg: TeacherScheduleAvgAggregateOutputType | null
    _sum: TeacherScheduleSumAggregateOutputType | null
    _min: TeacherScheduleMinAggregateOutputType | null
    _max: TeacherScheduleMaxAggregateOutputType | null
  }

  export type TeacherScheduleAvgAggregateOutputType = {
    teacherScheduleId: number | null
    teacherId: number | null
    classroomId: number | null
    credit: number | null
    numberOfStudents: number | null
    courseId: number | null
    departmentId: number | null
  }

  export type TeacherScheduleSumAggregateOutputType = {
    teacherScheduleId: number | null
    teacherId: number | null
    classroomId: number | null
    credit: number | null
    numberOfStudents: number | null
    courseId: number | null
    departmentId: number | null
  }

  export type TeacherScheduleMinAggregateOutputType = {
    teacherScheduleId: number | null
    teacherId: number | null
    weekDay: string | null
    periodOfClass: string | null
    classroomId: number | null
    classGroup: string | null
    courseName: string | null
    credit: number | null
    numberOfStudents: number | null
    courseId: number | null
    departmentId: number | null
    createdAt: Date | null
  }

  export type TeacherScheduleMaxAggregateOutputType = {
    teacherScheduleId: number | null
    teacherId: number | null
    weekDay: string | null
    periodOfClass: string | null
    classroomId: number | null
    classGroup: string | null
    courseName: string | null
    credit: number | null
    numberOfStudents: number | null
    courseId: number | null
    departmentId: number | null
    createdAt: Date | null
  }

  export type TeacherScheduleCountAggregateOutputType = {
    teacherScheduleId: number
    teacherId: number
    weekDay: number
    periodOfClass: number
    classroomId: number
    classGroup: number
    courseName: number
    credit: number
    numberOfStudents: number
    courseId: number
    departmentId: number
    createdAt: number
    _all: number
  }


  export type TeacherScheduleAvgAggregateInputType = {
    teacherScheduleId?: true
    teacherId?: true
    classroomId?: true
    credit?: true
    numberOfStudents?: true
    courseId?: true
    departmentId?: true
  }

  export type TeacherScheduleSumAggregateInputType = {
    teacherScheduleId?: true
    teacherId?: true
    classroomId?: true
    credit?: true
    numberOfStudents?: true
    courseId?: true
    departmentId?: true
  }

  export type TeacherScheduleMinAggregateInputType = {
    teacherScheduleId?: true
    teacherId?: true
    weekDay?: true
    periodOfClass?: true
    classroomId?: true
    classGroup?: true
    courseName?: true
    credit?: true
    numberOfStudents?: true
    courseId?: true
    departmentId?: true
    createdAt?: true
  }

  export type TeacherScheduleMaxAggregateInputType = {
    teacherScheduleId?: true
    teacherId?: true
    weekDay?: true
    periodOfClass?: true
    classroomId?: true
    classGroup?: true
    courseName?: true
    credit?: true
    numberOfStudents?: true
    courseId?: true
    departmentId?: true
    createdAt?: true
  }

  export type TeacherScheduleCountAggregateInputType = {
    teacherScheduleId?: true
    teacherId?: true
    weekDay?: true
    periodOfClass?: true
    classroomId?: true
    classGroup?: true
    courseName?: true
    credit?: true
    numberOfStudents?: true
    courseId?: true
    departmentId?: true
    createdAt?: true
    _all?: true
  }

  export type TeacherScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherSchedule to aggregate.
     */
    where?: TeacherScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherSchedules to fetch.
     */
    orderBy?: TeacherScheduleOrderByWithRelationInput | TeacherScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeacherSchedules
    **/
    _count?: true | TeacherScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherScheduleMaxAggregateInputType
  }

  export type GetTeacherScheduleAggregateType<T extends TeacherScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacherSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacherSchedule[P]>
      : GetScalarType<T[P], AggregateTeacherSchedule[P]>
  }




  export type TeacherScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherScheduleWhereInput
    orderBy?: TeacherScheduleOrderByWithAggregationInput | TeacherScheduleOrderByWithAggregationInput[]
    by: TeacherScheduleScalarFieldEnum[] | TeacherScheduleScalarFieldEnum
    having?: TeacherScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherScheduleCountAggregateInputType | true
    _avg?: TeacherScheduleAvgAggregateInputType
    _sum?: TeacherScheduleSumAggregateInputType
    _min?: TeacherScheduleMinAggregateInputType
    _max?: TeacherScheduleMaxAggregateInputType
  }

  export type TeacherScheduleGroupByOutputType = {
    teacherScheduleId: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    departmentId: number
    createdAt: Date | null
    _count: TeacherScheduleCountAggregateOutputType | null
    _avg: TeacherScheduleAvgAggregateOutputType | null
    _sum: TeacherScheduleSumAggregateOutputType | null
    _min: TeacherScheduleMinAggregateOutputType | null
    _max: TeacherScheduleMaxAggregateOutputType | null
  }

  type GetTeacherScheduleGroupByPayload<T extends TeacherScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherScheduleGroupByOutputType[P]>
        }
      >
    >


  export type TeacherScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherScheduleId?: boolean
    teacherId?: boolean
    weekDay?: boolean
    periodOfClass?: boolean
    classroomId?: boolean
    classGroup?: boolean
    courseName?: boolean
    credit?: boolean
    numberOfStudents?: boolean
    courseId?: boolean
    departmentId?: boolean
    createdAt?: boolean
    classroom?: boolean | ClassroomsDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherSchedule"]>

  export type TeacherScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherScheduleId?: boolean
    teacherId?: boolean
    weekDay?: boolean
    periodOfClass?: boolean
    classroomId?: boolean
    classGroup?: boolean
    courseName?: boolean
    credit?: boolean
    numberOfStudents?: boolean
    courseId?: boolean
    departmentId?: boolean
    createdAt?: boolean
    classroom?: boolean | ClassroomsDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherSchedule"]>

  export type TeacherScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherScheduleId?: boolean
    teacherId?: boolean
    weekDay?: boolean
    periodOfClass?: boolean
    classroomId?: boolean
    classGroup?: boolean
    courseName?: boolean
    credit?: boolean
    numberOfStudents?: boolean
    courseId?: boolean
    departmentId?: boolean
    createdAt?: boolean
    classroom?: boolean | ClassroomsDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherSchedule"]>

  export type TeacherScheduleSelectScalar = {
    teacherScheduleId?: boolean
    teacherId?: boolean
    weekDay?: boolean
    periodOfClass?: boolean
    classroomId?: boolean
    classGroup?: boolean
    courseName?: boolean
    credit?: boolean
    numberOfStudents?: boolean
    courseId?: boolean
    departmentId?: boolean
    createdAt?: boolean
  }

  export type TeacherScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"teacherScheduleId" | "teacherId" | "weekDay" | "periodOfClass" | "classroomId" | "classGroup" | "courseName" | "credit" | "numberOfStudents" | "courseId" | "departmentId" | "createdAt", ExtArgs["result"]["teacherSchedule"]>
  export type TeacherScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classroom?: boolean | ClassroomsDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type TeacherScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classroom?: boolean | ClassroomsDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type TeacherScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classroom?: boolean | ClassroomsDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }

  export type $TeacherSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeacherSchedule"
    objects: {
      classroom: Prisma.$ClassroomsPayload<ExtArgs>
      course: Prisma.$CoursesPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      teacher: Prisma.$TeacherPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      teacherScheduleId: number
      teacherId: number
      weekDay: string
      periodOfClass: string
      classroomId: number
      classGroup: string
      courseName: string
      credit: number
      numberOfStudents: number
      courseId: number
      departmentId: number
      createdAt: Date | null
    }, ExtArgs["result"]["teacherSchedule"]>
    composites: {}
  }

  type TeacherScheduleGetPayload<S extends boolean | null | undefined | TeacherScheduleDefaultArgs> = $Result.GetResult<Prisma.$TeacherSchedulePayload, S>

  type TeacherScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherScheduleCountAggregateInputType | true
    }

  export interface TeacherScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherSchedule'], meta: { name: 'TeacherSchedule' } }
    /**
     * Find zero or one TeacherSchedule that matches the filter.
     * @param {TeacherScheduleFindUniqueArgs} args - Arguments to find a TeacherSchedule
     * @example
     * // Get one TeacherSchedule
     * const teacherSchedule = await prisma.teacherSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherScheduleFindUniqueArgs>(args: SelectSubset<T, TeacherScheduleFindUniqueArgs<ExtArgs>>): Prisma__TeacherScheduleClient<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeacherSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherScheduleFindUniqueOrThrowArgs} args - Arguments to find a TeacherSchedule
     * @example
     * // Get one TeacherSchedule
     * const teacherSchedule = await prisma.teacherSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherScheduleClient<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeacherSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherScheduleFindFirstArgs} args - Arguments to find a TeacherSchedule
     * @example
     * // Get one TeacherSchedule
     * const teacherSchedule = await prisma.teacherSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherScheduleFindFirstArgs>(args?: SelectSubset<T, TeacherScheduleFindFirstArgs<ExtArgs>>): Prisma__TeacherScheduleClient<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeacherSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherScheduleFindFirstOrThrowArgs} args - Arguments to find a TeacherSchedule
     * @example
     * // Get one TeacherSchedule
     * const teacherSchedule = await prisma.teacherSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherScheduleClient<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeacherSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeacherSchedules
     * const teacherSchedules = await prisma.teacherSchedule.findMany()
     * 
     * // Get first 10 TeacherSchedules
     * const teacherSchedules = await prisma.teacherSchedule.findMany({ take: 10 })
     * 
     * // Only select the `teacherScheduleId`
     * const teacherScheduleWithTeacherScheduleIdOnly = await prisma.teacherSchedule.findMany({ select: { teacherScheduleId: true } })
     * 
     */
    findMany<T extends TeacherScheduleFindManyArgs>(args?: SelectSubset<T, TeacherScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeacherSchedule.
     * @param {TeacherScheduleCreateArgs} args - Arguments to create a TeacherSchedule.
     * @example
     * // Create one TeacherSchedule
     * const TeacherSchedule = await prisma.teacherSchedule.create({
     *   data: {
     *     // ... data to create a TeacherSchedule
     *   }
     * })
     * 
     */
    create<T extends TeacherScheduleCreateArgs>(args: SelectSubset<T, TeacherScheduleCreateArgs<ExtArgs>>): Prisma__TeacherScheduleClient<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeacherSchedules.
     * @param {TeacherScheduleCreateManyArgs} args - Arguments to create many TeacherSchedules.
     * @example
     * // Create many TeacherSchedules
     * const teacherSchedule = await prisma.teacherSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherScheduleCreateManyArgs>(args?: SelectSubset<T, TeacherScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeacherSchedules and returns the data saved in the database.
     * @param {TeacherScheduleCreateManyAndReturnArgs} args - Arguments to create many TeacherSchedules.
     * @example
     * // Create many TeacherSchedules
     * const teacherSchedule = await prisma.teacherSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeacherSchedules and only return the `teacherScheduleId`
     * const teacherScheduleWithTeacherScheduleIdOnly = await prisma.teacherSchedule.createManyAndReturn({
     *   select: { teacherScheduleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeacherSchedule.
     * @param {TeacherScheduleDeleteArgs} args - Arguments to delete one TeacherSchedule.
     * @example
     * // Delete one TeacherSchedule
     * const TeacherSchedule = await prisma.teacherSchedule.delete({
     *   where: {
     *     // ... filter to delete one TeacherSchedule
     *   }
     * })
     * 
     */
    delete<T extends TeacherScheduleDeleteArgs>(args: SelectSubset<T, TeacherScheduleDeleteArgs<ExtArgs>>): Prisma__TeacherScheduleClient<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeacherSchedule.
     * @param {TeacherScheduleUpdateArgs} args - Arguments to update one TeacherSchedule.
     * @example
     * // Update one TeacherSchedule
     * const teacherSchedule = await prisma.teacherSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherScheduleUpdateArgs>(args: SelectSubset<T, TeacherScheduleUpdateArgs<ExtArgs>>): Prisma__TeacherScheduleClient<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeacherSchedules.
     * @param {TeacherScheduleDeleteManyArgs} args - Arguments to filter TeacherSchedules to delete.
     * @example
     * // Delete a few TeacherSchedules
     * const { count } = await prisma.teacherSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherScheduleDeleteManyArgs>(args?: SelectSubset<T, TeacherScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeacherSchedules
     * const teacherSchedule = await prisma.teacherSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherScheduleUpdateManyArgs>(args: SelectSubset<T, TeacherScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherSchedules and returns the data updated in the database.
     * @param {TeacherScheduleUpdateManyAndReturnArgs} args - Arguments to update many TeacherSchedules.
     * @example
     * // Update many TeacherSchedules
     * const teacherSchedule = await prisma.teacherSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeacherSchedules and only return the `teacherScheduleId`
     * const teacherScheduleWithTeacherScheduleIdOnly = await prisma.teacherSchedule.updateManyAndReturn({
     *   select: { teacherScheduleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeacherSchedule.
     * @param {TeacherScheduleUpsertArgs} args - Arguments to update or create a TeacherSchedule.
     * @example
     * // Update or create a TeacherSchedule
     * const teacherSchedule = await prisma.teacherSchedule.upsert({
     *   create: {
     *     // ... data to create a TeacherSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeacherSchedule we want to update
     *   }
     * })
     */
    upsert<T extends TeacherScheduleUpsertArgs>(args: SelectSubset<T, TeacherScheduleUpsertArgs<ExtArgs>>): Prisma__TeacherScheduleClient<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeacherSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherScheduleCountArgs} args - Arguments to filter TeacherSchedules to count.
     * @example
     * // Count the number of TeacherSchedules
     * const count = await prisma.teacherSchedule.count({
     *   where: {
     *     // ... the filter for the TeacherSchedules we want to count
     *   }
     * })
    **/
    count<T extends TeacherScheduleCountArgs>(
      args?: Subset<T, TeacherScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeacherSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherScheduleAggregateArgs>(args: Subset<T, TeacherScheduleAggregateArgs>): Prisma.PrismaPromise<GetTeacherScheduleAggregateType<T>>

    /**
     * Group by TeacherSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherScheduleGroupByArgs['orderBy'] }
        : { orderBy?: TeacherScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeacherSchedule model
   */
  readonly fields: TeacherScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeacherSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classroom<T extends ClassroomsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassroomsDefaultArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeacherSchedule model
   */
  interface TeacherScheduleFieldRefs {
    readonly teacherScheduleId: FieldRef<"TeacherSchedule", 'Int'>
    readonly teacherId: FieldRef<"TeacherSchedule", 'Int'>
    readonly weekDay: FieldRef<"TeacherSchedule", 'String'>
    readonly periodOfClass: FieldRef<"TeacherSchedule", 'String'>
    readonly classroomId: FieldRef<"TeacherSchedule", 'Int'>
    readonly classGroup: FieldRef<"TeacherSchedule", 'String'>
    readonly courseName: FieldRef<"TeacherSchedule", 'String'>
    readonly credit: FieldRef<"TeacherSchedule", 'Int'>
    readonly numberOfStudents: FieldRef<"TeacherSchedule", 'Int'>
    readonly courseId: FieldRef<"TeacherSchedule", 'Int'>
    readonly departmentId: FieldRef<"TeacherSchedule", 'Int'>
    readonly createdAt: FieldRef<"TeacherSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeacherSchedule findUnique
   */
  export type TeacherScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSchedule to fetch.
     */
    where: TeacherScheduleWhereUniqueInput
  }

  /**
   * TeacherSchedule findUniqueOrThrow
   */
  export type TeacherScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSchedule to fetch.
     */
    where: TeacherScheduleWhereUniqueInput
  }

  /**
   * TeacherSchedule findFirst
   */
  export type TeacherScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSchedule to fetch.
     */
    where?: TeacherScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherSchedules to fetch.
     */
    orderBy?: TeacherScheduleOrderByWithRelationInput | TeacherScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherSchedules.
     */
    cursor?: TeacherScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherSchedules.
     */
    distinct?: TeacherScheduleScalarFieldEnum | TeacherScheduleScalarFieldEnum[]
  }

  /**
   * TeacherSchedule findFirstOrThrow
   */
  export type TeacherScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSchedule to fetch.
     */
    where?: TeacherScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherSchedules to fetch.
     */
    orderBy?: TeacherScheduleOrderByWithRelationInput | TeacherScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherSchedules.
     */
    cursor?: TeacherScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherSchedules.
     */
    distinct?: TeacherScheduleScalarFieldEnum | TeacherScheduleScalarFieldEnum[]
  }

  /**
   * TeacherSchedule findMany
   */
  export type TeacherScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSchedules to fetch.
     */
    where?: TeacherScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherSchedules to fetch.
     */
    orderBy?: TeacherScheduleOrderByWithRelationInput | TeacherScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeacherSchedules.
     */
    cursor?: TeacherScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherSchedules.
     */
    skip?: number
    distinct?: TeacherScheduleScalarFieldEnum | TeacherScheduleScalarFieldEnum[]
  }

  /**
   * TeacherSchedule create
   */
  export type TeacherScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a TeacherSchedule.
     */
    data: XOR<TeacherScheduleCreateInput, TeacherScheduleUncheckedCreateInput>
  }

  /**
   * TeacherSchedule createMany
   */
  export type TeacherScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeacherSchedules.
     */
    data: TeacherScheduleCreateManyInput | TeacherScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeacherSchedule createManyAndReturn
   */
  export type TeacherScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many TeacherSchedules.
     */
    data: TeacherScheduleCreateManyInput | TeacherScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherSchedule update
   */
  export type TeacherScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a TeacherSchedule.
     */
    data: XOR<TeacherScheduleUpdateInput, TeacherScheduleUncheckedUpdateInput>
    /**
     * Choose, which TeacherSchedule to update.
     */
    where: TeacherScheduleWhereUniqueInput
  }

  /**
   * TeacherSchedule updateMany
   */
  export type TeacherScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeacherSchedules.
     */
    data: XOR<TeacherScheduleUpdateManyMutationInput, TeacherScheduleUncheckedUpdateManyInput>
    /**
     * Filter which TeacherSchedules to update
     */
    where?: TeacherScheduleWhereInput
    /**
     * Limit how many TeacherSchedules to update.
     */
    limit?: number
  }

  /**
   * TeacherSchedule updateManyAndReturn
   */
  export type TeacherScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * The data used to update TeacherSchedules.
     */
    data: XOR<TeacherScheduleUpdateManyMutationInput, TeacherScheduleUncheckedUpdateManyInput>
    /**
     * Filter which TeacherSchedules to update
     */
    where?: TeacherScheduleWhereInput
    /**
     * Limit how many TeacherSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherSchedule upsert
   */
  export type TeacherScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the TeacherSchedule to update in case it exists.
     */
    where: TeacherScheduleWhereUniqueInput
    /**
     * In case the TeacherSchedule found by the `where` argument doesn't exist, create a new TeacherSchedule with this data.
     */
    create: XOR<TeacherScheduleCreateInput, TeacherScheduleUncheckedCreateInput>
    /**
     * In case the TeacherSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherScheduleUpdateInput, TeacherScheduleUncheckedUpdateInput>
  }

  /**
   * TeacherSchedule delete
   */
  export type TeacherScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    /**
     * Filter which TeacherSchedule to delete.
     */
    where: TeacherScheduleWhereUniqueInput
  }

  /**
   * TeacherSchedule deleteMany
   */
  export type TeacherScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherSchedules to delete
     */
    where?: TeacherScheduleWhereInput
    /**
     * Limit how many TeacherSchedules to delete.
     */
    limit?: number
  }

  /**
   * TeacherSchedule without action
   */
  export type TeacherScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
  }


  /**
   * Model TeachersCoursePlanning
   */

  export type AggregateTeachersCoursePlanning = {
    _count: TeachersCoursePlanningCountAggregateOutputType | null
    _avg: TeachersCoursePlanningAvgAggregateOutputType | null
    _sum: TeachersCoursePlanningSumAggregateOutputType | null
    _min: TeachersCoursePlanningMinAggregateOutputType | null
    _max: TeachersCoursePlanningMaxAggregateOutputType | null
  }

  export type TeachersCoursePlanningAvgAggregateOutputType = {
    teacherCoursePlanningId: number | null
    teacherId: number | null
    majorId: Decimal | null
    credit: number | null
    courseId: number | null
    departmentId: number | null
    departmentOfEduId: number | null
    teacherMajorId: number | null
  }

  export type TeachersCoursePlanningSumAggregateOutputType = {
    teacherCoursePlanningId: number | null
    teacherId: number | null
    majorId: Decimal | null
    credit: number | null
    courseId: number | null
    departmentId: number | null
    departmentOfEduId: number | null
    teacherMajorId: number | null
  }

  export type TeachersCoursePlanningMinAggregateOutputType = {
    teacherCoursePlanningId: number | null
    teacherId: number | null
    majorName: string | null
    majorId: Decimal | null
    courseName: string | null
    credit: number | null
    courseId: number | null
    departmentId: number | null
    createdAt: Date | null
    departmentOfEduId: number | null
    courseCode: string | null
    teacherMajorId: number | null
  }

  export type TeachersCoursePlanningMaxAggregateOutputType = {
    teacherCoursePlanningId: number | null
    teacherId: number | null
    majorName: string | null
    majorId: Decimal | null
    courseName: string | null
    credit: number | null
    courseId: number | null
    departmentId: number | null
    createdAt: Date | null
    departmentOfEduId: number | null
    courseCode: string | null
    teacherMajorId: number | null
  }

  export type TeachersCoursePlanningCountAggregateOutputType = {
    teacherCoursePlanningId: number
    teacherId: number
    majorName: number
    majorId: number
    courseName: number
    credit: number
    courseId: number
    departmentId: number
    createdAt: number
    departmentOfEduId: number
    courseCode: number
    teacherMajorId: number
    _all: number
  }


  export type TeachersCoursePlanningAvgAggregateInputType = {
    teacherCoursePlanningId?: true
    teacherId?: true
    majorId?: true
    credit?: true
    courseId?: true
    departmentId?: true
    departmentOfEduId?: true
    teacherMajorId?: true
  }

  export type TeachersCoursePlanningSumAggregateInputType = {
    teacherCoursePlanningId?: true
    teacherId?: true
    majorId?: true
    credit?: true
    courseId?: true
    departmentId?: true
    departmentOfEduId?: true
    teacherMajorId?: true
  }

  export type TeachersCoursePlanningMinAggregateInputType = {
    teacherCoursePlanningId?: true
    teacherId?: true
    majorName?: true
    majorId?: true
    courseName?: true
    credit?: true
    courseId?: true
    departmentId?: true
    createdAt?: true
    departmentOfEduId?: true
    courseCode?: true
    teacherMajorId?: true
  }

  export type TeachersCoursePlanningMaxAggregateInputType = {
    teacherCoursePlanningId?: true
    teacherId?: true
    majorName?: true
    majorId?: true
    courseName?: true
    credit?: true
    courseId?: true
    departmentId?: true
    createdAt?: true
    departmentOfEduId?: true
    courseCode?: true
    teacherMajorId?: true
  }

  export type TeachersCoursePlanningCountAggregateInputType = {
    teacherCoursePlanningId?: true
    teacherId?: true
    majorName?: true
    majorId?: true
    courseName?: true
    credit?: true
    courseId?: true
    departmentId?: true
    createdAt?: true
    departmentOfEduId?: true
    courseCode?: true
    teacherMajorId?: true
    _all?: true
  }

  export type TeachersCoursePlanningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeachersCoursePlanning to aggregate.
     */
    where?: TeachersCoursePlanningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersCoursePlannings to fetch.
     */
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeachersCoursePlanningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersCoursePlannings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersCoursePlannings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeachersCoursePlannings
    **/
    _count?: true | TeachersCoursePlanningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeachersCoursePlanningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeachersCoursePlanningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeachersCoursePlanningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeachersCoursePlanningMaxAggregateInputType
  }

  export type GetTeachersCoursePlanningAggregateType<T extends TeachersCoursePlanningAggregateArgs> = {
        [P in keyof T & keyof AggregateTeachersCoursePlanning]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeachersCoursePlanning[P]>
      : GetScalarType<T[P], AggregateTeachersCoursePlanning[P]>
  }




  export type TeachersCoursePlanningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersCoursePlanningWhereInput
    orderBy?: TeachersCoursePlanningOrderByWithAggregationInput | TeachersCoursePlanningOrderByWithAggregationInput[]
    by: TeachersCoursePlanningScalarFieldEnum[] | TeachersCoursePlanningScalarFieldEnum
    having?: TeachersCoursePlanningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeachersCoursePlanningCountAggregateInputType | true
    _avg?: TeachersCoursePlanningAvgAggregateInputType
    _sum?: TeachersCoursePlanningSumAggregateInputType
    _min?: TeachersCoursePlanningMinAggregateInputType
    _max?: TeachersCoursePlanningMaxAggregateInputType
  }

  export type TeachersCoursePlanningGroupByOutputType = {
    teacherCoursePlanningId: number
    teacherId: number
    majorName: string
    majorId: Decimal | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt: Date | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
    _count: TeachersCoursePlanningCountAggregateOutputType | null
    _avg: TeachersCoursePlanningAvgAggregateOutputType | null
    _sum: TeachersCoursePlanningSumAggregateOutputType | null
    _min: TeachersCoursePlanningMinAggregateOutputType | null
    _max: TeachersCoursePlanningMaxAggregateOutputType | null
  }

  type GetTeachersCoursePlanningGroupByPayload<T extends TeachersCoursePlanningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeachersCoursePlanningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeachersCoursePlanningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeachersCoursePlanningGroupByOutputType[P]>
            : GetScalarType<T[P], TeachersCoursePlanningGroupByOutputType[P]>
        }
      >
    >


  export type TeachersCoursePlanningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherCoursePlanningId?: boolean
    teacherId?: boolean
    majorName?: boolean
    majorId?: boolean
    courseName?: boolean
    credit?: boolean
    courseId?: boolean
    departmentId?: boolean
    createdAt?: boolean
    departmentOfEduId?: boolean
    courseCode?: boolean
    teacherMajorId?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    teachersMajorPlanning?: boolean | TeachersMajorPlanningDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersCoursePlanning"]>

  export type TeachersCoursePlanningSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherCoursePlanningId?: boolean
    teacherId?: boolean
    majorName?: boolean
    majorId?: boolean
    courseName?: boolean
    credit?: boolean
    courseId?: boolean
    departmentId?: boolean
    createdAt?: boolean
    departmentOfEduId?: boolean
    courseCode?: boolean
    teacherMajorId?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    teachersMajorPlanning?: boolean | TeachersMajorPlanningDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersCoursePlanning"]>

  export type TeachersCoursePlanningSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherCoursePlanningId?: boolean
    teacherId?: boolean
    majorName?: boolean
    majorId?: boolean
    courseName?: boolean
    credit?: boolean
    courseId?: boolean
    departmentId?: boolean
    createdAt?: boolean
    departmentOfEduId?: boolean
    courseCode?: boolean
    teacherMajorId?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    teachersMajorPlanning?: boolean | TeachersMajorPlanningDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersCoursePlanning"]>

  export type TeachersCoursePlanningSelectScalar = {
    teacherCoursePlanningId?: boolean
    teacherId?: boolean
    majorName?: boolean
    majorId?: boolean
    courseName?: boolean
    credit?: boolean
    courseId?: boolean
    departmentId?: boolean
    createdAt?: boolean
    departmentOfEduId?: boolean
    courseCode?: boolean
    teacherMajorId?: boolean
  }

  export type TeachersCoursePlanningOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"teacherCoursePlanningId" | "teacherId" | "majorName" | "majorId" | "courseName" | "credit" | "courseId" | "departmentId" | "createdAt" | "departmentOfEduId" | "courseCode" | "teacherMajorId", ExtArgs["result"]["teachersCoursePlanning"]>
  export type TeachersCoursePlanningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    teachersMajorPlanning?: boolean | TeachersMajorPlanningDefaultArgs<ExtArgs>
  }
  export type TeachersCoursePlanningIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    teachersMajorPlanning?: boolean | TeachersMajorPlanningDefaultArgs<ExtArgs>
  }
  export type TeachersCoursePlanningIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    teachersMajorPlanning?: boolean | TeachersMajorPlanningDefaultArgs<ExtArgs>
  }

  export type $TeachersCoursePlanningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeachersCoursePlanning"
    objects: {
      course: Prisma.$CoursesPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      departmentOfEducation: Prisma.$DepartmentsOfEducationPayload<ExtArgs>
      teacher: Prisma.$TeacherPayload<ExtArgs>
      teachersMajorPlanning: Prisma.$TeachersMajorPlanningPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      teacherCoursePlanningId: number
      teacherId: number
      majorName: string
      majorId: Prisma.Decimal | null
      courseName: string
      credit: number
      courseId: number
      departmentId: number
      createdAt: Date | null
      departmentOfEduId: number
      courseCode: string
      teacherMajorId: number
    }, ExtArgs["result"]["teachersCoursePlanning"]>
    composites: {}
  }

  type TeachersCoursePlanningGetPayload<S extends boolean | null | undefined | TeachersCoursePlanningDefaultArgs> = $Result.GetResult<Prisma.$TeachersCoursePlanningPayload, S>

  type TeachersCoursePlanningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeachersCoursePlanningFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeachersCoursePlanningCountAggregateInputType | true
    }

  export interface TeachersCoursePlanningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeachersCoursePlanning'], meta: { name: 'TeachersCoursePlanning' } }
    /**
     * Find zero or one TeachersCoursePlanning that matches the filter.
     * @param {TeachersCoursePlanningFindUniqueArgs} args - Arguments to find a TeachersCoursePlanning
     * @example
     * // Get one TeachersCoursePlanning
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeachersCoursePlanningFindUniqueArgs>(args: SelectSubset<T, TeachersCoursePlanningFindUniqueArgs<ExtArgs>>): Prisma__TeachersCoursePlanningClient<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeachersCoursePlanning that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeachersCoursePlanningFindUniqueOrThrowArgs} args - Arguments to find a TeachersCoursePlanning
     * @example
     * // Get one TeachersCoursePlanning
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeachersCoursePlanningFindUniqueOrThrowArgs>(args: SelectSubset<T, TeachersCoursePlanningFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeachersCoursePlanningClient<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeachersCoursePlanning that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersCoursePlanningFindFirstArgs} args - Arguments to find a TeachersCoursePlanning
     * @example
     * // Get one TeachersCoursePlanning
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeachersCoursePlanningFindFirstArgs>(args?: SelectSubset<T, TeachersCoursePlanningFindFirstArgs<ExtArgs>>): Prisma__TeachersCoursePlanningClient<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeachersCoursePlanning that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersCoursePlanningFindFirstOrThrowArgs} args - Arguments to find a TeachersCoursePlanning
     * @example
     * // Get one TeachersCoursePlanning
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeachersCoursePlanningFindFirstOrThrowArgs>(args?: SelectSubset<T, TeachersCoursePlanningFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeachersCoursePlanningClient<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeachersCoursePlannings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersCoursePlanningFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeachersCoursePlannings
     * const teachersCoursePlannings = await prisma.teachersCoursePlanning.findMany()
     * 
     * // Get first 10 TeachersCoursePlannings
     * const teachersCoursePlannings = await prisma.teachersCoursePlanning.findMany({ take: 10 })
     * 
     * // Only select the `teacherCoursePlanningId`
     * const teachersCoursePlanningWithTeacherCoursePlanningIdOnly = await prisma.teachersCoursePlanning.findMany({ select: { teacherCoursePlanningId: true } })
     * 
     */
    findMany<T extends TeachersCoursePlanningFindManyArgs>(args?: SelectSubset<T, TeachersCoursePlanningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeachersCoursePlanning.
     * @param {TeachersCoursePlanningCreateArgs} args - Arguments to create a TeachersCoursePlanning.
     * @example
     * // Create one TeachersCoursePlanning
     * const TeachersCoursePlanning = await prisma.teachersCoursePlanning.create({
     *   data: {
     *     // ... data to create a TeachersCoursePlanning
     *   }
     * })
     * 
     */
    create<T extends TeachersCoursePlanningCreateArgs>(args: SelectSubset<T, TeachersCoursePlanningCreateArgs<ExtArgs>>): Prisma__TeachersCoursePlanningClient<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeachersCoursePlannings.
     * @param {TeachersCoursePlanningCreateManyArgs} args - Arguments to create many TeachersCoursePlannings.
     * @example
     * // Create many TeachersCoursePlannings
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeachersCoursePlanningCreateManyArgs>(args?: SelectSubset<T, TeachersCoursePlanningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeachersCoursePlannings and returns the data saved in the database.
     * @param {TeachersCoursePlanningCreateManyAndReturnArgs} args - Arguments to create many TeachersCoursePlannings.
     * @example
     * // Create many TeachersCoursePlannings
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeachersCoursePlannings and only return the `teacherCoursePlanningId`
     * const teachersCoursePlanningWithTeacherCoursePlanningIdOnly = await prisma.teachersCoursePlanning.createManyAndReturn({
     *   select: { teacherCoursePlanningId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeachersCoursePlanningCreateManyAndReturnArgs>(args?: SelectSubset<T, TeachersCoursePlanningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeachersCoursePlanning.
     * @param {TeachersCoursePlanningDeleteArgs} args - Arguments to delete one TeachersCoursePlanning.
     * @example
     * // Delete one TeachersCoursePlanning
     * const TeachersCoursePlanning = await prisma.teachersCoursePlanning.delete({
     *   where: {
     *     // ... filter to delete one TeachersCoursePlanning
     *   }
     * })
     * 
     */
    delete<T extends TeachersCoursePlanningDeleteArgs>(args: SelectSubset<T, TeachersCoursePlanningDeleteArgs<ExtArgs>>): Prisma__TeachersCoursePlanningClient<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeachersCoursePlanning.
     * @param {TeachersCoursePlanningUpdateArgs} args - Arguments to update one TeachersCoursePlanning.
     * @example
     * // Update one TeachersCoursePlanning
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeachersCoursePlanningUpdateArgs>(args: SelectSubset<T, TeachersCoursePlanningUpdateArgs<ExtArgs>>): Prisma__TeachersCoursePlanningClient<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeachersCoursePlannings.
     * @param {TeachersCoursePlanningDeleteManyArgs} args - Arguments to filter TeachersCoursePlannings to delete.
     * @example
     * // Delete a few TeachersCoursePlannings
     * const { count } = await prisma.teachersCoursePlanning.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeachersCoursePlanningDeleteManyArgs>(args?: SelectSubset<T, TeachersCoursePlanningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeachersCoursePlannings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersCoursePlanningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeachersCoursePlannings
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeachersCoursePlanningUpdateManyArgs>(args: SelectSubset<T, TeachersCoursePlanningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeachersCoursePlannings and returns the data updated in the database.
     * @param {TeachersCoursePlanningUpdateManyAndReturnArgs} args - Arguments to update many TeachersCoursePlannings.
     * @example
     * // Update many TeachersCoursePlannings
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeachersCoursePlannings and only return the `teacherCoursePlanningId`
     * const teachersCoursePlanningWithTeacherCoursePlanningIdOnly = await prisma.teachersCoursePlanning.updateManyAndReturn({
     *   select: { teacherCoursePlanningId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeachersCoursePlanningUpdateManyAndReturnArgs>(args: SelectSubset<T, TeachersCoursePlanningUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeachersCoursePlanning.
     * @param {TeachersCoursePlanningUpsertArgs} args - Arguments to update or create a TeachersCoursePlanning.
     * @example
     * // Update or create a TeachersCoursePlanning
     * const teachersCoursePlanning = await prisma.teachersCoursePlanning.upsert({
     *   create: {
     *     // ... data to create a TeachersCoursePlanning
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeachersCoursePlanning we want to update
     *   }
     * })
     */
    upsert<T extends TeachersCoursePlanningUpsertArgs>(args: SelectSubset<T, TeachersCoursePlanningUpsertArgs<ExtArgs>>): Prisma__TeachersCoursePlanningClient<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeachersCoursePlannings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersCoursePlanningCountArgs} args - Arguments to filter TeachersCoursePlannings to count.
     * @example
     * // Count the number of TeachersCoursePlannings
     * const count = await prisma.teachersCoursePlanning.count({
     *   where: {
     *     // ... the filter for the TeachersCoursePlannings we want to count
     *   }
     * })
    **/
    count<T extends TeachersCoursePlanningCountArgs>(
      args?: Subset<T, TeachersCoursePlanningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeachersCoursePlanningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeachersCoursePlanning.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersCoursePlanningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeachersCoursePlanningAggregateArgs>(args: Subset<T, TeachersCoursePlanningAggregateArgs>): Prisma.PrismaPromise<GetTeachersCoursePlanningAggregateType<T>>

    /**
     * Group by TeachersCoursePlanning.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersCoursePlanningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeachersCoursePlanningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeachersCoursePlanningGroupByArgs['orderBy'] }
        : { orderBy?: TeachersCoursePlanningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeachersCoursePlanningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachersCoursePlanningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeachersCoursePlanning model
   */
  readonly fields: TeachersCoursePlanningFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeachersCoursePlanning.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeachersCoursePlanningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    departmentOfEducation<T extends DepartmentsOfEducationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducationDefaultArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teachersMajorPlanning<T extends TeachersMajorPlanningDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeachersMajorPlanningDefaultArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeachersCoursePlanning model
   */
  interface TeachersCoursePlanningFieldRefs {
    readonly teacherCoursePlanningId: FieldRef<"TeachersCoursePlanning", 'Int'>
    readonly teacherId: FieldRef<"TeachersCoursePlanning", 'Int'>
    readonly majorName: FieldRef<"TeachersCoursePlanning", 'String'>
    readonly majorId: FieldRef<"TeachersCoursePlanning", 'Decimal'>
    readonly courseName: FieldRef<"TeachersCoursePlanning", 'String'>
    readonly credit: FieldRef<"TeachersCoursePlanning", 'Int'>
    readonly courseId: FieldRef<"TeachersCoursePlanning", 'Int'>
    readonly departmentId: FieldRef<"TeachersCoursePlanning", 'Int'>
    readonly createdAt: FieldRef<"TeachersCoursePlanning", 'DateTime'>
    readonly departmentOfEduId: FieldRef<"TeachersCoursePlanning", 'Int'>
    readonly courseCode: FieldRef<"TeachersCoursePlanning", 'String'>
    readonly teacherMajorId: FieldRef<"TeachersCoursePlanning", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TeachersCoursePlanning findUnique
   */
  export type TeachersCoursePlanningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersCoursePlanning to fetch.
     */
    where: TeachersCoursePlanningWhereUniqueInput
  }

  /**
   * TeachersCoursePlanning findUniqueOrThrow
   */
  export type TeachersCoursePlanningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersCoursePlanning to fetch.
     */
    where: TeachersCoursePlanningWhereUniqueInput
  }

  /**
   * TeachersCoursePlanning findFirst
   */
  export type TeachersCoursePlanningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersCoursePlanning to fetch.
     */
    where?: TeachersCoursePlanningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersCoursePlannings to fetch.
     */
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeachersCoursePlannings.
     */
    cursor?: TeachersCoursePlanningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersCoursePlannings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersCoursePlannings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeachersCoursePlannings.
     */
    distinct?: TeachersCoursePlanningScalarFieldEnum | TeachersCoursePlanningScalarFieldEnum[]
  }

  /**
   * TeachersCoursePlanning findFirstOrThrow
   */
  export type TeachersCoursePlanningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersCoursePlanning to fetch.
     */
    where?: TeachersCoursePlanningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersCoursePlannings to fetch.
     */
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeachersCoursePlannings.
     */
    cursor?: TeachersCoursePlanningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersCoursePlannings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersCoursePlannings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeachersCoursePlannings.
     */
    distinct?: TeachersCoursePlanningScalarFieldEnum | TeachersCoursePlanningScalarFieldEnum[]
  }

  /**
   * TeachersCoursePlanning findMany
   */
  export type TeachersCoursePlanningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersCoursePlannings to fetch.
     */
    where?: TeachersCoursePlanningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersCoursePlannings to fetch.
     */
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeachersCoursePlannings.
     */
    cursor?: TeachersCoursePlanningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersCoursePlannings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersCoursePlannings.
     */
    skip?: number
    distinct?: TeachersCoursePlanningScalarFieldEnum | TeachersCoursePlanningScalarFieldEnum[]
  }

  /**
   * TeachersCoursePlanning create
   */
  export type TeachersCoursePlanningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * The data needed to create a TeachersCoursePlanning.
     */
    data: XOR<TeachersCoursePlanningCreateInput, TeachersCoursePlanningUncheckedCreateInput>
  }

  /**
   * TeachersCoursePlanning createMany
   */
  export type TeachersCoursePlanningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeachersCoursePlannings.
     */
    data: TeachersCoursePlanningCreateManyInput | TeachersCoursePlanningCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeachersCoursePlanning createManyAndReturn
   */
  export type TeachersCoursePlanningCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * The data used to create many TeachersCoursePlannings.
     */
    data: TeachersCoursePlanningCreateManyInput | TeachersCoursePlanningCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeachersCoursePlanning update
   */
  export type TeachersCoursePlanningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * The data needed to update a TeachersCoursePlanning.
     */
    data: XOR<TeachersCoursePlanningUpdateInput, TeachersCoursePlanningUncheckedUpdateInput>
    /**
     * Choose, which TeachersCoursePlanning to update.
     */
    where: TeachersCoursePlanningWhereUniqueInput
  }

  /**
   * TeachersCoursePlanning updateMany
   */
  export type TeachersCoursePlanningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeachersCoursePlannings.
     */
    data: XOR<TeachersCoursePlanningUpdateManyMutationInput, TeachersCoursePlanningUncheckedUpdateManyInput>
    /**
     * Filter which TeachersCoursePlannings to update
     */
    where?: TeachersCoursePlanningWhereInput
    /**
     * Limit how many TeachersCoursePlannings to update.
     */
    limit?: number
  }

  /**
   * TeachersCoursePlanning updateManyAndReturn
   */
  export type TeachersCoursePlanningUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * The data used to update TeachersCoursePlannings.
     */
    data: XOR<TeachersCoursePlanningUpdateManyMutationInput, TeachersCoursePlanningUncheckedUpdateManyInput>
    /**
     * Filter which TeachersCoursePlannings to update
     */
    where?: TeachersCoursePlanningWhereInput
    /**
     * Limit how many TeachersCoursePlannings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeachersCoursePlanning upsert
   */
  export type TeachersCoursePlanningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * The filter to search for the TeachersCoursePlanning to update in case it exists.
     */
    where: TeachersCoursePlanningWhereUniqueInput
    /**
     * In case the TeachersCoursePlanning found by the `where` argument doesn't exist, create a new TeachersCoursePlanning with this data.
     */
    create: XOR<TeachersCoursePlanningCreateInput, TeachersCoursePlanningUncheckedCreateInput>
    /**
     * In case the TeachersCoursePlanning was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeachersCoursePlanningUpdateInput, TeachersCoursePlanningUncheckedUpdateInput>
  }

  /**
   * TeachersCoursePlanning delete
   */
  export type TeachersCoursePlanningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    /**
     * Filter which TeachersCoursePlanning to delete.
     */
    where: TeachersCoursePlanningWhereUniqueInput
  }

  /**
   * TeachersCoursePlanning deleteMany
   */
  export type TeachersCoursePlanningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeachersCoursePlannings to delete
     */
    where?: TeachersCoursePlanningWhereInput
    /**
     * Limit how many TeachersCoursePlannings to delete.
     */
    limit?: number
  }

  /**
   * TeachersCoursePlanning without action
   */
  export type TeachersCoursePlanningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
  }


  /**
   * Model Classrooms
   */

  export type AggregateClassrooms = {
    _count: ClassroomsCountAggregateOutputType | null
    _avg: ClassroomsAvgAggregateOutputType | null
    _sum: ClassroomsSumAggregateOutputType | null
    _min: ClassroomsMinAggregateOutputType | null
    _max: ClassroomsMaxAggregateOutputType | null
  }

  export type ClassroomsAvgAggregateOutputType = {
    classroom_id: number | null
    department_id: number | null
    capacity: number | null
  }

  export type ClassroomsSumAggregateOutputType = {
    classroom_id: number | null
    department_id: number | null
    capacity: number | null
  }

  export type ClassroomsMinAggregateOutputType = {
    classroom_id: number | null
    department_id: number | null
    classroom_type: $Enums.ClassroomTypeEnum | null
    classroom_number: string | null
    projector: $Enums.ProjectorEnum | null
    tv: $Enums.TvEnum | null
    createdAt: Date | null
    capacity: number | null
  }

  export type ClassroomsMaxAggregateOutputType = {
    classroom_id: number | null
    department_id: number | null
    classroom_type: $Enums.ClassroomTypeEnum | null
    classroom_number: string | null
    projector: $Enums.ProjectorEnum | null
    tv: $Enums.TvEnum | null
    createdAt: Date | null
    capacity: number | null
  }

  export type ClassroomsCountAggregateOutputType = {
    classroom_id: number
    department_id: number
    classroom_type: number
    classroom_number: number
    projector: number
    tv: number
    createdAt: number
    capacity: number
    _all: number
  }


  export type ClassroomsAvgAggregateInputType = {
    classroom_id?: true
    department_id?: true
    capacity?: true
  }

  export type ClassroomsSumAggregateInputType = {
    classroom_id?: true
    department_id?: true
    capacity?: true
  }

  export type ClassroomsMinAggregateInputType = {
    classroom_id?: true
    department_id?: true
    classroom_type?: true
    classroom_number?: true
    projector?: true
    tv?: true
    createdAt?: true
    capacity?: true
  }

  export type ClassroomsMaxAggregateInputType = {
    classroom_id?: true
    department_id?: true
    classroom_type?: true
    classroom_number?: true
    projector?: true
    tv?: true
    createdAt?: true
    capacity?: true
  }

  export type ClassroomsCountAggregateInputType = {
    classroom_id?: true
    department_id?: true
    classroom_type?: true
    classroom_number?: true
    projector?: true
    tv?: true
    createdAt?: true
    capacity?: true
    _all?: true
  }

  export type ClassroomsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classrooms to aggregate.
     */
    where?: ClassroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: ClassroomsOrderByWithRelationInput | ClassroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classrooms
    **/
    _count?: true | ClassroomsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassroomsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassroomsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassroomsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassroomsMaxAggregateInputType
  }

  export type GetClassroomsAggregateType<T extends ClassroomsAggregateArgs> = {
        [P in keyof T & keyof AggregateClassrooms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassrooms[P]>
      : GetScalarType<T[P], AggregateClassrooms[P]>
  }




  export type ClassroomsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassroomsWhereInput
    orderBy?: ClassroomsOrderByWithAggregationInput | ClassroomsOrderByWithAggregationInput[]
    by: ClassroomsScalarFieldEnum[] | ClassroomsScalarFieldEnum
    having?: ClassroomsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassroomsCountAggregateInputType | true
    _avg?: ClassroomsAvgAggregateInputType
    _sum?: ClassroomsSumAggregateInputType
    _min?: ClassroomsMinAggregateInputType
    _max?: ClassroomsMaxAggregateInputType
  }

  export type ClassroomsGroupByOutputType = {
    classroom_id: number
    department_id: number | null
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector: $Enums.ProjectorEnum
    tv: $Enums.TvEnum
    createdAt: Date | null
    capacity: number
    _count: ClassroomsCountAggregateOutputType | null
    _avg: ClassroomsAvgAggregateOutputType | null
    _sum: ClassroomsSumAggregateOutputType | null
    _min: ClassroomsMinAggregateOutputType | null
    _max: ClassroomsMaxAggregateOutputType | null
  }

  type GetClassroomsGroupByPayload<T extends ClassroomsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassroomsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassroomsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassroomsGroupByOutputType[P]>
            : GetScalarType<T[P], ClassroomsGroupByOutputType[P]>
        }
      >
    >


  export type ClassroomsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classroom_id?: boolean
    department_id?: boolean
    classroom_type?: boolean
    classroom_number?: boolean
    projector?: boolean
    tv?: boolean
    createdAt?: boolean
    capacity?: boolean
    departmentOfEducation?: boolean | Classrooms$departmentOfEducationArgs<ExtArgs>
    TeacherSchedule?: boolean | Classrooms$TeacherScheduleArgs<ExtArgs>
    Department?: boolean | Classrooms$DepartmentArgs<ExtArgs>
    _count?: boolean | ClassroomsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type ClassroomsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classroom_id?: boolean
    department_id?: boolean
    classroom_type?: boolean
    classroom_number?: boolean
    projector?: boolean
    tv?: boolean
    createdAt?: boolean
    capacity?: boolean
    departmentOfEducation?: boolean | Classrooms$departmentOfEducationArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type ClassroomsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classroom_id?: boolean
    department_id?: boolean
    classroom_type?: boolean
    classroom_number?: boolean
    projector?: boolean
    tv?: boolean
    createdAt?: boolean
    capacity?: boolean
    departmentOfEducation?: boolean | Classrooms$departmentOfEducationArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type ClassroomsSelectScalar = {
    classroom_id?: boolean
    department_id?: boolean
    classroom_type?: boolean
    classroom_number?: boolean
    projector?: boolean
    tv?: boolean
    createdAt?: boolean
    capacity?: boolean
  }

  export type ClassroomsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"classroom_id" | "department_id" | "classroom_type" | "classroom_number" | "projector" | "tv" | "createdAt" | "capacity", ExtArgs["result"]["classrooms"]>
  export type ClassroomsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentOfEducation?: boolean | Classrooms$departmentOfEducationArgs<ExtArgs>
    TeacherSchedule?: boolean | Classrooms$TeacherScheduleArgs<ExtArgs>
    Department?: boolean | Classrooms$DepartmentArgs<ExtArgs>
    _count?: boolean | ClassroomsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassroomsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentOfEducation?: boolean | Classrooms$departmentOfEducationArgs<ExtArgs>
  }
  export type ClassroomsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentOfEducation?: boolean | Classrooms$departmentOfEducationArgs<ExtArgs>
  }

  export type $ClassroomsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Classrooms"
    objects: {
      departmentOfEducation: Prisma.$DepartmentsOfEducationPayload<ExtArgs> | null
      TeacherSchedule: Prisma.$TeacherSchedulePayload<ExtArgs>[]
      Department: Prisma.$DepartmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      classroom_id: number
      department_id: number | null
      classroom_type: $Enums.ClassroomTypeEnum
      classroom_number: string
      projector: $Enums.ProjectorEnum
      tv: $Enums.TvEnum
      createdAt: Date | null
      capacity: number
    }, ExtArgs["result"]["classrooms"]>
    composites: {}
  }

  type ClassroomsGetPayload<S extends boolean | null | undefined | ClassroomsDefaultArgs> = $Result.GetResult<Prisma.$ClassroomsPayload, S>

  type ClassroomsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassroomsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassroomsCountAggregateInputType | true
    }

  export interface ClassroomsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Classrooms'], meta: { name: 'Classrooms' } }
    /**
     * Find zero or one Classrooms that matches the filter.
     * @param {ClassroomsFindUniqueArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassroomsFindUniqueArgs>(args: SelectSubset<T, ClassroomsFindUniqueArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Classrooms that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassroomsFindUniqueOrThrowArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassroomsFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassroomsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsFindFirstArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassroomsFindFirstArgs>(args?: SelectSubset<T, ClassroomsFindFirstArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classrooms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsFindFirstOrThrowArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassroomsFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassroomsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classrooms
     * const classrooms = await prisma.classrooms.findMany()
     * 
     * // Get first 10 Classrooms
     * const classrooms = await prisma.classrooms.findMany({ take: 10 })
     * 
     * // Only select the `classroom_id`
     * const classroomsWithClassroom_idOnly = await prisma.classrooms.findMany({ select: { classroom_id: true } })
     * 
     */
    findMany<T extends ClassroomsFindManyArgs>(args?: SelectSubset<T, ClassroomsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Classrooms.
     * @param {ClassroomsCreateArgs} args - Arguments to create a Classrooms.
     * @example
     * // Create one Classrooms
     * const Classrooms = await prisma.classrooms.create({
     *   data: {
     *     // ... data to create a Classrooms
     *   }
     * })
     * 
     */
    create<T extends ClassroomsCreateArgs>(args: SelectSubset<T, ClassroomsCreateArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classrooms.
     * @param {ClassroomsCreateManyArgs} args - Arguments to create many Classrooms.
     * @example
     * // Create many Classrooms
     * const classrooms = await prisma.classrooms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassroomsCreateManyArgs>(args?: SelectSubset<T, ClassroomsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classrooms and returns the data saved in the database.
     * @param {ClassroomsCreateManyAndReturnArgs} args - Arguments to create many Classrooms.
     * @example
     * // Create many Classrooms
     * const classrooms = await prisma.classrooms.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classrooms and only return the `classroom_id`
     * const classroomsWithClassroom_idOnly = await prisma.classrooms.createManyAndReturn({
     *   select: { classroom_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassroomsCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassroomsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Classrooms.
     * @param {ClassroomsDeleteArgs} args - Arguments to delete one Classrooms.
     * @example
     * // Delete one Classrooms
     * const Classrooms = await prisma.classrooms.delete({
     *   where: {
     *     // ... filter to delete one Classrooms
     *   }
     * })
     * 
     */
    delete<T extends ClassroomsDeleteArgs>(args: SelectSubset<T, ClassroomsDeleteArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Classrooms.
     * @param {ClassroomsUpdateArgs} args - Arguments to update one Classrooms.
     * @example
     * // Update one Classrooms
     * const classrooms = await prisma.classrooms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassroomsUpdateArgs>(args: SelectSubset<T, ClassroomsUpdateArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classrooms.
     * @param {ClassroomsDeleteManyArgs} args - Arguments to filter Classrooms to delete.
     * @example
     * // Delete a few Classrooms
     * const { count } = await prisma.classrooms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassroomsDeleteManyArgs>(args?: SelectSubset<T, ClassroomsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classrooms
     * const classrooms = await prisma.classrooms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassroomsUpdateManyArgs>(args: SelectSubset<T, ClassroomsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classrooms and returns the data updated in the database.
     * @param {ClassroomsUpdateManyAndReturnArgs} args - Arguments to update many Classrooms.
     * @example
     * // Update many Classrooms
     * const classrooms = await prisma.classrooms.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classrooms and only return the `classroom_id`
     * const classroomsWithClassroom_idOnly = await prisma.classrooms.updateManyAndReturn({
     *   select: { classroom_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassroomsUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassroomsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Classrooms.
     * @param {ClassroomsUpsertArgs} args - Arguments to update or create a Classrooms.
     * @example
     * // Update or create a Classrooms
     * const classrooms = await prisma.classrooms.upsert({
     *   create: {
     *     // ... data to create a Classrooms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classrooms we want to update
     *   }
     * })
     */
    upsert<T extends ClassroomsUpsertArgs>(args: SelectSubset<T, ClassroomsUpsertArgs<ExtArgs>>): Prisma__ClassroomsClient<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsCountArgs} args - Arguments to filter Classrooms to count.
     * @example
     * // Count the number of Classrooms
     * const count = await prisma.classrooms.count({
     *   where: {
     *     // ... the filter for the Classrooms we want to count
     *   }
     * })
    **/
    count<T extends ClassroomsCountArgs>(
      args?: Subset<T, ClassroomsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassroomsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassroomsAggregateArgs>(args: Subset<T, ClassroomsAggregateArgs>): Prisma.PrismaPromise<GetClassroomsAggregateType<T>>

    /**
     * Group by Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassroomsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassroomsGroupByArgs['orderBy'] }
        : { orderBy?: ClassroomsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassroomsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassroomsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Classrooms model
   */
  readonly fields: ClassroomsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Classrooms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassroomsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departmentOfEducation<T extends Classrooms$departmentOfEducationArgs<ExtArgs> = {}>(args?: Subset<T, Classrooms$departmentOfEducationArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    TeacherSchedule<T extends Classrooms$TeacherScheduleArgs<ExtArgs> = {}>(args?: Subset<T, Classrooms$TeacherScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Department<T extends Classrooms$DepartmentArgs<ExtArgs> = {}>(args?: Subset<T, Classrooms$DepartmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Classrooms model
   */
  interface ClassroomsFieldRefs {
    readonly classroom_id: FieldRef<"Classrooms", 'Int'>
    readonly department_id: FieldRef<"Classrooms", 'Int'>
    readonly classroom_type: FieldRef<"Classrooms", 'ClassroomTypeEnum'>
    readonly classroom_number: FieldRef<"Classrooms", 'String'>
    readonly projector: FieldRef<"Classrooms", 'ProjectorEnum'>
    readonly tv: FieldRef<"Classrooms", 'TvEnum'>
    readonly createdAt: FieldRef<"Classrooms", 'DateTime'>
    readonly capacity: FieldRef<"Classrooms", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Classrooms findUnique
   */
  export type ClassroomsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * Filter, which Classrooms to fetch.
     */
    where: ClassroomsWhereUniqueInput
  }

  /**
   * Classrooms findUniqueOrThrow
   */
  export type ClassroomsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * Filter, which Classrooms to fetch.
     */
    where: ClassroomsWhereUniqueInput
  }

  /**
   * Classrooms findFirst
   */
  export type ClassroomsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * Filter, which Classrooms to fetch.
     */
    where?: ClassroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: ClassroomsOrderByWithRelationInput | ClassroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classrooms.
     */
    cursor?: ClassroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classrooms.
     */
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * Classrooms findFirstOrThrow
   */
  export type ClassroomsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * Filter, which Classrooms to fetch.
     */
    where?: ClassroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: ClassroomsOrderByWithRelationInput | ClassroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classrooms.
     */
    cursor?: ClassroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classrooms.
     */
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * Classrooms findMany
   */
  export type ClassroomsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * Filter, which Classrooms to fetch.
     */
    where?: ClassroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: ClassroomsOrderByWithRelationInput | ClassroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classrooms.
     */
    cursor?: ClassroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * Classrooms create
   */
  export type ClassroomsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * The data needed to create a Classrooms.
     */
    data: XOR<ClassroomsCreateInput, ClassroomsUncheckedCreateInput>
  }

  /**
   * Classrooms createMany
   */
  export type ClassroomsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classrooms.
     */
    data: ClassroomsCreateManyInput | ClassroomsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Classrooms createManyAndReturn
   */
  export type ClassroomsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * The data used to create many Classrooms.
     */
    data: ClassroomsCreateManyInput | ClassroomsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Classrooms update
   */
  export type ClassroomsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * The data needed to update a Classrooms.
     */
    data: XOR<ClassroomsUpdateInput, ClassroomsUncheckedUpdateInput>
    /**
     * Choose, which Classrooms to update.
     */
    where: ClassroomsWhereUniqueInput
  }

  /**
   * Classrooms updateMany
   */
  export type ClassroomsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classrooms.
     */
    data: XOR<ClassroomsUpdateManyMutationInput, ClassroomsUncheckedUpdateManyInput>
    /**
     * Filter which Classrooms to update
     */
    where?: ClassroomsWhereInput
    /**
     * Limit how many Classrooms to update.
     */
    limit?: number
  }

  /**
   * Classrooms updateManyAndReturn
   */
  export type ClassroomsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * The data used to update Classrooms.
     */
    data: XOR<ClassroomsUpdateManyMutationInput, ClassroomsUncheckedUpdateManyInput>
    /**
     * Filter which Classrooms to update
     */
    where?: ClassroomsWhereInput
    /**
     * Limit how many Classrooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Classrooms upsert
   */
  export type ClassroomsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * The filter to search for the Classrooms to update in case it exists.
     */
    where: ClassroomsWhereUniqueInput
    /**
     * In case the Classrooms found by the `where` argument doesn't exist, create a new Classrooms with this data.
     */
    create: XOR<ClassroomsCreateInput, ClassroomsUncheckedCreateInput>
    /**
     * In case the Classrooms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassroomsUpdateInput, ClassroomsUncheckedUpdateInput>
  }

  /**
   * Classrooms delete
   */
  export type ClassroomsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    /**
     * Filter which Classrooms to delete.
     */
    where: ClassroomsWhereUniqueInput
  }

  /**
   * Classrooms deleteMany
   */
  export type ClassroomsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classrooms to delete
     */
    where?: ClassroomsWhereInput
    /**
     * Limit how many Classrooms to delete.
     */
    limit?: number
  }

  /**
   * Classrooms.departmentOfEducation
   */
  export type Classrooms$departmentOfEducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    where?: DepartmentsOfEducationWhereInput
  }

  /**
   * Classrooms.TeacherSchedule
   */
  export type Classrooms$TeacherScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    where?: TeacherScheduleWhereInput
    orderBy?: TeacherScheduleOrderByWithRelationInput | TeacherScheduleOrderByWithRelationInput[]
    cursor?: TeacherScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScheduleScalarFieldEnum | TeacherScheduleScalarFieldEnum[]
  }

  /**
   * Classrooms.Department
   */
  export type Classrooms$DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Classrooms without action
   */
  export type ClassroomsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
  }


  /**
   * Model Courses
   */

  export type AggregateCourses = {
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  export type CoursesAvgAggregateOutputType = {
    courseId: number | null
    totalCredits: number | null
    majorId: number | null
    timesPerWeek: number | null
    departmentId: number | null
  }

  export type CoursesSumAggregateOutputType = {
    courseId: number | null
    totalCredits: number | null
    majorId: number | null
    timesPerWeek: number | null
    departmentId: number | null
  }

  export type CoursesMinAggregateOutputType = {
    courseId: number | null
    courseName: string | null
    courseCode: string | null
    courseType: $Enums.CourseTypeEnum | null
    courseYear: string | null
    totalCredits: number | null
    majorId: number | null
    description: string | null
    courseSeason: $Enums.CourseSeasonTypeEnum | null
    timesPerWeek: number | null
    departmentId: number | null
  }

  export type CoursesMaxAggregateOutputType = {
    courseId: number | null
    courseName: string | null
    courseCode: string | null
    courseType: $Enums.CourseTypeEnum | null
    courseYear: string | null
    totalCredits: number | null
    majorId: number | null
    description: string | null
    courseSeason: $Enums.CourseSeasonTypeEnum | null
    timesPerWeek: number | null
    departmentId: number | null
  }

  export type CoursesCountAggregateOutputType = {
    courseId: number
    courseName: number
    courseCode: number
    courseType: number
    courseYear: number
    totalCredits: number
    majorId: number
    description: number
    courseSeason: number
    timesPerWeek: number
    departmentId: number
    _all: number
  }


  export type CoursesAvgAggregateInputType = {
    courseId?: true
    totalCredits?: true
    majorId?: true
    timesPerWeek?: true
    departmentId?: true
  }

  export type CoursesSumAggregateInputType = {
    courseId?: true
    totalCredits?: true
    majorId?: true
    timesPerWeek?: true
    departmentId?: true
  }

  export type CoursesMinAggregateInputType = {
    courseId?: true
    courseName?: true
    courseCode?: true
    courseType?: true
    courseYear?: true
    totalCredits?: true
    majorId?: true
    description?: true
    courseSeason?: true
    timesPerWeek?: true
    departmentId?: true
  }

  export type CoursesMaxAggregateInputType = {
    courseId?: true
    courseName?: true
    courseCode?: true
    courseType?: true
    courseYear?: true
    totalCredits?: true
    majorId?: true
    description?: true
    courseSeason?: true
    timesPerWeek?: true
    departmentId?: true
  }

  export type CoursesCountAggregateInputType = {
    courseId?: true
    courseName?: true
    courseCode?: true
    courseType?: true
    courseYear?: true
    totalCredits?: true
    majorId?: true
    description?: true
    courseSeason?: true
    timesPerWeek?: true
    departmentId?: true
    _all?: true
  }

  export type CoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to aggregate.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoursesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoursesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesMaxAggregateInputType
  }

  export type GetCoursesAggregateType<T extends CoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourses[P]>
      : GetScalarType<T[P], AggregateCourses[P]>
  }




  export type CoursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesWhereInput
    orderBy?: CoursesOrderByWithAggregationInput | CoursesOrderByWithAggregationInput[]
    by: CoursesScalarFieldEnum[] | CoursesScalarFieldEnum
    having?: CoursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesCountAggregateInputType | true
    _avg?: CoursesAvgAggregateInputType
    _sum?: CoursesSumAggregateInputType
    _min?: CoursesMinAggregateInputType
    _max?: CoursesMaxAggregateInputType
  }

  export type CoursesGroupByOutputType = {
    courseId: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    majorId: number
    description: string
    courseSeason: $Enums.CourseSeasonTypeEnum
    timesPerWeek: number | null
    departmentId: number | null
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  type GetCoursesGroupByPayload<T extends CoursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesGroupByOutputType[P]>
        }
      >
    >


  export type CoursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    courseId?: boolean
    courseName?: boolean
    courseCode?: boolean
    courseType?: boolean
    courseYear?: boolean
    totalCredits?: boolean
    majorId?: boolean
    description?: boolean
    courseSeason?: boolean
    timesPerWeek?: boolean
    departmentId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    TeacherSchedule?: boolean | Courses$TeacherScheduleArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | Courses$TeachersCoursePlanningArgs<ExtArgs>
    department?: boolean | Courses$departmentArgs<ExtArgs>
    StudentCurriculum?: boolean | Courses$StudentCurriculumArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    courseId?: boolean
    courseName?: boolean
    courseCode?: boolean
    courseType?: boolean
    courseYear?: boolean
    totalCredits?: boolean
    majorId?: boolean
    description?: boolean
    courseSeason?: boolean
    timesPerWeek?: boolean
    departmentId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    department?: boolean | Courses$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    courseId?: boolean
    courseName?: boolean
    courseCode?: boolean
    courseType?: boolean
    courseYear?: boolean
    totalCredits?: boolean
    majorId?: boolean
    description?: boolean
    courseSeason?: boolean
    timesPerWeek?: boolean
    departmentId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    department?: boolean | Courses$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectScalar = {
    courseId?: boolean
    courseName?: boolean
    courseCode?: boolean
    courseType?: boolean
    courseYear?: boolean
    totalCredits?: boolean
    majorId?: boolean
    description?: boolean
    courseSeason?: boolean
    timesPerWeek?: boolean
    departmentId?: boolean
  }

  export type CoursesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"courseId" | "courseName" | "courseCode" | "courseType" | "courseYear" | "totalCredits" | "majorId" | "description" | "courseSeason" | "timesPerWeek" | "departmentId", ExtArgs["result"]["courses"]>
  export type CoursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    TeacherSchedule?: boolean | Courses$TeacherScheduleArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | Courses$TeachersCoursePlanningArgs<ExtArgs>
    department?: boolean | Courses$departmentArgs<ExtArgs>
    StudentCurriculum?: boolean | Courses$StudentCurriculumArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoursesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    department?: boolean | Courses$departmentArgs<ExtArgs>
  }
  export type CoursesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    department?: boolean | Courses$departmentArgs<ExtArgs>
  }

  export type $CoursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Courses"
    objects: {
      major: Prisma.$MajorPayload<ExtArgs>
      TeacherSchedule: Prisma.$TeacherSchedulePayload<ExtArgs>[]
      TeachersCoursePlanning: Prisma.$TeachersCoursePlanningPayload<ExtArgs>[]
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      StudentCurriculum: Prisma.$StudentCurriculumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      courseId: number
      courseName: string
      courseCode: string
      courseType: $Enums.CourseTypeEnum
      courseYear: string
      totalCredits: number
      majorId: number
      description: string
      courseSeason: $Enums.CourseSeasonTypeEnum
      timesPerWeek: number | null
      departmentId: number | null
    }, ExtArgs["result"]["courses"]>
    composites: {}
  }

  type CoursesGetPayload<S extends boolean | null | undefined | CoursesDefaultArgs> = $Result.GetResult<Prisma.$CoursesPayload, S>

  type CoursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoursesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoursesCountAggregateInputType | true
    }

  export interface CoursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Courses'], meta: { name: 'Courses' } }
    /**
     * Find zero or one Courses that matches the filter.
     * @param {CoursesFindUniqueArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoursesFindUniqueArgs>(args: SelectSubset<T, CoursesFindUniqueArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Courses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoursesFindUniqueOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoursesFindUniqueOrThrowArgs>(args: SelectSubset<T, CoursesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindFirstArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoursesFindFirstArgs>(args?: SelectSubset<T, CoursesFindFirstArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindFirstOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoursesFindFirstOrThrowArgs>(args?: SelectSubset<T, CoursesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.courses.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.courses.findMany({ take: 10 })
     * 
     * // Only select the `courseId`
     * const coursesWithCourseIdOnly = await prisma.courses.findMany({ select: { courseId: true } })
     * 
     */
    findMany<T extends CoursesFindManyArgs>(args?: SelectSubset<T, CoursesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Courses.
     * @param {CoursesCreateArgs} args - Arguments to create a Courses.
     * @example
     * // Create one Courses
     * const Courses = await prisma.courses.create({
     *   data: {
     *     // ... data to create a Courses
     *   }
     * })
     * 
     */
    create<T extends CoursesCreateArgs>(args: SelectSubset<T, CoursesCreateArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CoursesCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoursesCreateManyArgs>(args?: SelectSubset<T, CoursesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CoursesCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `courseId`
     * const coursesWithCourseIdOnly = await prisma.courses.createManyAndReturn({
     *   select: { courseId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoursesCreateManyAndReturnArgs>(args?: SelectSubset<T, CoursesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Courses.
     * @param {CoursesDeleteArgs} args - Arguments to delete one Courses.
     * @example
     * // Delete one Courses
     * const Courses = await prisma.courses.delete({
     *   where: {
     *     // ... filter to delete one Courses
     *   }
     * })
     * 
     */
    delete<T extends CoursesDeleteArgs>(args: SelectSubset<T, CoursesDeleteArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Courses.
     * @param {CoursesUpdateArgs} args - Arguments to update one Courses.
     * @example
     * // Update one Courses
     * const courses = await prisma.courses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoursesUpdateArgs>(args: SelectSubset<T, CoursesUpdateArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CoursesDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.courses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoursesDeleteManyArgs>(args?: SelectSubset<T, CoursesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoursesUpdateManyArgs>(args: SelectSubset<T, CoursesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CoursesUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `courseId`
     * const coursesWithCourseIdOnly = await prisma.courses.updateManyAndReturn({
     *   select: { courseId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoursesUpdateManyAndReturnArgs>(args: SelectSubset<T, CoursesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Courses.
     * @param {CoursesUpsertArgs} args - Arguments to update or create a Courses.
     * @example
     * // Update or create a Courses
     * const courses = await prisma.courses.upsert({
     *   create: {
     *     // ... data to create a Courses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courses we want to update
     *   }
     * })
     */
    upsert<T extends CoursesUpsertArgs>(args: SelectSubset<T, CoursesUpsertArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.courses.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CoursesCountArgs>(
      args?: Subset<T, CoursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAggregateArgs>(args: Subset<T, CoursesAggregateArgs>): Prisma.PrismaPromise<GetCoursesAggregateType<T>>

    /**
     * Group by Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoursesGroupByArgs['orderBy'] }
        : { orderBy?: CoursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Courses model
   */
  readonly fields: CoursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Courses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    major<T extends MajorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MajorDefaultArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    TeacherSchedule<T extends Courses$TeacherScheduleArgs<ExtArgs> = {}>(args?: Subset<T, Courses$TeacherScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeachersCoursePlanning<T extends Courses$TeachersCoursePlanningArgs<ExtArgs> = {}>(args?: Subset<T, Courses$TeachersCoursePlanningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    department<T extends Courses$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Courses$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    StudentCurriculum<T extends Courses$StudentCurriculumArgs<ExtArgs> = {}>(args?: Subset<T, Courses$StudentCurriculumArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Courses model
   */
  interface CoursesFieldRefs {
    readonly courseId: FieldRef<"Courses", 'Int'>
    readonly courseName: FieldRef<"Courses", 'String'>
    readonly courseCode: FieldRef<"Courses", 'String'>
    readonly courseType: FieldRef<"Courses", 'CourseTypeEnum'>
    readonly courseYear: FieldRef<"Courses", 'String'>
    readonly totalCredits: FieldRef<"Courses", 'Int'>
    readonly majorId: FieldRef<"Courses", 'Int'>
    readonly description: FieldRef<"Courses", 'String'>
    readonly courseSeason: FieldRef<"Courses", 'CourseSeasonTypeEnum'>
    readonly timesPerWeek: FieldRef<"Courses", 'Int'>
    readonly departmentId: FieldRef<"Courses", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Courses findUnique
   */
  export type CoursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses findUniqueOrThrow
   */
  export type CoursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses findFirst
   */
  export type CoursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses findFirstOrThrow
   */
  export type CoursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses findMany
   */
  export type CoursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses create
   */
  export type CoursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The data needed to create a Courses.
     */
    data: XOR<CoursesCreateInput, CoursesUncheckedCreateInput>
  }

  /**
   * Courses createMany
   */
  export type CoursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CoursesCreateManyInput | CoursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Courses createManyAndReturn
   */
  export type CoursesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CoursesCreateManyInput | CoursesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Courses update
   */
  export type CoursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The data needed to update a Courses.
     */
    data: XOR<CoursesUpdateInput, CoursesUncheckedUpdateInput>
    /**
     * Choose, which Courses to update.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses updateMany
   */
  export type CoursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CoursesUpdateManyMutationInput, CoursesUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CoursesWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Courses updateManyAndReturn
   */
  export type CoursesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CoursesUpdateManyMutationInput, CoursesUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CoursesWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Courses upsert
   */
  export type CoursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The filter to search for the Courses to update in case it exists.
     */
    where: CoursesWhereUniqueInput
    /**
     * In case the Courses found by the `where` argument doesn't exist, create a new Courses with this data.
     */
    create: XOR<CoursesCreateInput, CoursesUncheckedCreateInput>
    /**
     * In case the Courses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoursesUpdateInput, CoursesUncheckedUpdateInput>
  }

  /**
   * Courses delete
   */
  export type CoursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter which Courses to delete.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses deleteMany
   */
  export type CoursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CoursesWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Courses.TeacherSchedule
   */
  export type Courses$TeacherScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    where?: TeacherScheduleWhereInput
    orderBy?: TeacherScheduleOrderByWithRelationInput | TeacherScheduleOrderByWithRelationInput[]
    cursor?: TeacherScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScheduleScalarFieldEnum | TeacherScheduleScalarFieldEnum[]
  }

  /**
   * Courses.TeachersCoursePlanning
   */
  export type Courses$TeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    where?: TeachersCoursePlanningWhereInput
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    cursor?: TeachersCoursePlanningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersCoursePlanningScalarFieldEnum | TeachersCoursePlanningScalarFieldEnum[]
  }

  /**
   * Courses.department
   */
  export type Courses$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Courses.StudentCurriculum
   */
  export type Courses$StudentCurriculumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    where?: StudentCurriculumWhereInput
    orderBy?: StudentCurriculumOrderByWithRelationInput | StudentCurriculumOrderByWithRelationInput[]
    cursor?: StudentCurriculumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentCurriculumScalarFieldEnum | StudentCurriculumScalarFieldEnum[]
  }

  /**
   * Courses without action
   */
  export type CoursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
  }


  /**
   * Model TeachersMajorPlanning
   */

  export type AggregateTeachersMajorPlanning = {
    _count: TeachersMajorPlanningCountAggregateOutputType | null
    _avg: TeachersMajorPlanningAvgAggregateOutputType | null
    _sum: TeachersMajorPlanningSumAggregateOutputType | null
    _min: TeachersMajorPlanningMinAggregateOutputType | null
    _max: TeachersMajorPlanningMaxAggregateOutputType | null
  }

  export type TeachersMajorPlanningAvgAggregateOutputType = {
    teacherMajorId: number | null
    teacherId: number | null
    majorId: Decimal | null
    credit: number | null
    departmentId: number | null
    departmentOfEducationsId: number | null
  }

  export type TeachersMajorPlanningSumAggregateOutputType = {
    teacherMajorId: number | null
    teacherId: number | null
    majorId: Decimal | null
    credit: number | null
    departmentId: number | null
    departmentOfEducationsId: number | null
  }

  export type TeachersMajorPlanningMinAggregateOutputType = {
    teacherMajorId: number | null
    teacherId: number | null
    academicDegreeOfMajor: string | null
    majorName: string | null
    majorId: Decimal | null
    credit: number | null
    departmentId: number | null
    createdAt: Date | null
    departmentOfEducationsId: number | null
  }

  export type TeachersMajorPlanningMaxAggregateOutputType = {
    teacherMajorId: number | null
    teacherId: number | null
    academicDegreeOfMajor: string | null
    majorName: string | null
    majorId: Decimal | null
    credit: number | null
    departmentId: number | null
    createdAt: Date | null
    departmentOfEducationsId: number | null
  }

  export type TeachersMajorPlanningCountAggregateOutputType = {
    teacherMajorId: number
    teacherId: number
    academicDegreeOfMajor: number
    majorName: number
    majorId: number
    credit: number
    departmentId: number
    createdAt: number
    departmentOfEducationsId: number
    _all: number
  }


  export type TeachersMajorPlanningAvgAggregateInputType = {
    teacherMajorId?: true
    teacherId?: true
    majorId?: true
    credit?: true
    departmentId?: true
    departmentOfEducationsId?: true
  }

  export type TeachersMajorPlanningSumAggregateInputType = {
    teacherMajorId?: true
    teacherId?: true
    majorId?: true
    credit?: true
    departmentId?: true
    departmentOfEducationsId?: true
  }

  export type TeachersMajorPlanningMinAggregateInputType = {
    teacherMajorId?: true
    teacherId?: true
    academicDegreeOfMajor?: true
    majorName?: true
    majorId?: true
    credit?: true
    departmentId?: true
    createdAt?: true
    departmentOfEducationsId?: true
  }

  export type TeachersMajorPlanningMaxAggregateInputType = {
    teacherMajorId?: true
    teacherId?: true
    academicDegreeOfMajor?: true
    majorName?: true
    majorId?: true
    credit?: true
    departmentId?: true
    createdAt?: true
    departmentOfEducationsId?: true
  }

  export type TeachersMajorPlanningCountAggregateInputType = {
    teacherMajorId?: true
    teacherId?: true
    academicDegreeOfMajor?: true
    majorName?: true
    majorId?: true
    credit?: true
    departmentId?: true
    createdAt?: true
    departmentOfEducationsId?: true
    _all?: true
  }

  export type TeachersMajorPlanningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeachersMajorPlanning to aggregate.
     */
    where?: TeachersMajorPlanningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersMajorPlannings to fetch.
     */
    orderBy?: TeachersMajorPlanningOrderByWithRelationInput | TeachersMajorPlanningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeachersMajorPlanningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersMajorPlannings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersMajorPlannings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeachersMajorPlannings
    **/
    _count?: true | TeachersMajorPlanningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeachersMajorPlanningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeachersMajorPlanningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeachersMajorPlanningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeachersMajorPlanningMaxAggregateInputType
  }

  export type GetTeachersMajorPlanningAggregateType<T extends TeachersMajorPlanningAggregateArgs> = {
        [P in keyof T & keyof AggregateTeachersMajorPlanning]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeachersMajorPlanning[P]>
      : GetScalarType<T[P], AggregateTeachersMajorPlanning[P]>
  }




  export type TeachersMajorPlanningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersMajorPlanningWhereInput
    orderBy?: TeachersMajorPlanningOrderByWithAggregationInput | TeachersMajorPlanningOrderByWithAggregationInput[]
    by: TeachersMajorPlanningScalarFieldEnum[] | TeachersMajorPlanningScalarFieldEnum
    having?: TeachersMajorPlanningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeachersMajorPlanningCountAggregateInputType | true
    _avg?: TeachersMajorPlanningAvgAggregateInputType
    _sum?: TeachersMajorPlanningSumAggregateInputType
    _min?: TeachersMajorPlanningMinAggregateInputType
    _max?: TeachersMajorPlanningMaxAggregateInputType
  }

  export type TeachersMajorPlanningGroupByOutputType = {
    teacherMajorId: number
    teacherId: number
    academicDegreeOfMajor: string
    majorName: string
    majorId: Decimal | null
    credit: number
    departmentId: number
    createdAt: Date | null
    departmentOfEducationsId: number
    _count: TeachersMajorPlanningCountAggregateOutputType | null
    _avg: TeachersMajorPlanningAvgAggregateOutputType | null
    _sum: TeachersMajorPlanningSumAggregateOutputType | null
    _min: TeachersMajorPlanningMinAggregateOutputType | null
    _max: TeachersMajorPlanningMaxAggregateOutputType | null
  }

  type GetTeachersMajorPlanningGroupByPayload<T extends TeachersMajorPlanningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeachersMajorPlanningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeachersMajorPlanningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeachersMajorPlanningGroupByOutputType[P]>
            : GetScalarType<T[P], TeachersMajorPlanningGroupByOutputType[P]>
        }
      >
    >


  export type TeachersMajorPlanningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherMajorId?: boolean
    teacherId?: boolean
    academicDegreeOfMajor?: boolean
    majorName?: boolean
    majorId?: boolean
    credit?: boolean
    departmentId?: boolean
    createdAt?: boolean
    departmentOfEducationsId?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | TeachersMajorPlanning$TeachersCoursePlanningArgs<ExtArgs>
    _count?: boolean | TeachersMajorPlanningCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersMajorPlanning"]>

  export type TeachersMajorPlanningSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherMajorId?: boolean
    teacherId?: boolean
    academicDegreeOfMajor?: boolean
    majorName?: boolean
    majorId?: boolean
    credit?: boolean
    departmentId?: boolean
    createdAt?: boolean
    departmentOfEducationsId?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersMajorPlanning"]>

  export type TeachersMajorPlanningSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherMajorId?: boolean
    teacherId?: boolean
    academicDegreeOfMajor?: boolean
    majorName?: boolean
    majorId?: boolean
    credit?: boolean
    departmentId?: boolean
    createdAt?: boolean
    departmentOfEducationsId?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersMajorPlanning"]>

  export type TeachersMajorPlanningSelectScalar = {
    teacherMajorId?: boolean
    teacherId?: boolean
    academicDegreeOfMajor?: boolean
    majorName?: boolean
    majorId?: boolean
    credit?: boolean
    departmentId?: boolean
    createdAt?: boolean
    departmentOfEducationsId?: boolean
  }

  export type TeachersMajorPlanningOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"teacherMajorId" | "teacherId" | "academicDegreeOfMajor" | "majorName" | "majorId" | "credit" | "departmentId" | "createdAt" | "departmentOfEducationsId", ExtArgs["result"]["teachersMajorPlanning"]>
  export type TeachersMajorPlanningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | TeachersMajorPlanning$TeachersCoursePlanningArgs<ExtArgs>
    _count?: boolean | TeachersMajorPlanningCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeachersMajorPlanningIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type TeachersMajorPlanningIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }

  export type $TeachersMajorPlanningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeachersMajorPlanning"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      departmentOfEducation: Prisma.$DepartmentsOfEducationPayload<ExtArgs>
      teacher: Prisma.$TeacherPayload<ExtArgs>
      TeachersCoursePlanning: Prisma.$TeachersCoursePlanningPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      teacherMajorId: number
      teacherId: number
      academicDegreeOfMajor: string
      majorName: string
      majorId: Prisma.Decimal | null
      credit: number
      departmentId: number
      createdAt: Date | null
      departmentOfEducationsId: number
    }, ExtArgs["result"]["teachersMajorPlanning"]>
    composites: {}
  }

  type TeachersMajorPlanningGetPayload<S extends boolean | null | undefined | TeachersMajorPlanningDefaultArgs> = $Result.GetResult<Prisma.$TeachersMajorPlanningPayload, S>

  type TeachersMajorPlanningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeachersMajorPlanningFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeachersMajorPlanningCountAggregateInputType | true
    }

  export interface TeachersMajorPlanningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeachersMajorPlanning'], meta: { name: 'TeachersMajorPlanning' } }
    /**
     * Find zero or one TeachersMajorPlanning that matches the filter.
     * @param {TeachersMajorPlanningFindUniqueArgs} args - Arguments to find a TeachersMajorPlanning
     * @example
     * // Get one TeachersMajorPlanning
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeachersMajorPlanningFindUniqueArgs>(args: SelectSubset<T, TeachersMajorPlanningFindUniqueArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeachersMajorPlanning that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeachersMajorPlanningFindUniqueOrThrowArgs} args - Arguments to find a TeachersMajorPlanning
     * @example
     * // Get one TeachersMajorPlanning
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeachersMajorPlanningFindUniqueOrThrowArgs>(args: SelectSubset<T, TeachersMajorPlanningFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeachersMajorPlanning that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersMajorPlanningFindFirstArgs} args - Arguments to find a TeachersMajorPlanning
     * @example
     * // Get one TeachersMajorPlanning
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeachersMajorPlanningFindFirstArgs>(args?: SelectSubset<T, TeachersMajorPlanningFindFirstArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeachersMajorPlanning that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersMajorPlanningFindFirstOrThrowArgs} args - Arguments to find a TeachersMajorPlanning
     * @example
     * // Get one TeachersMajorPlanning
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeachersMajorPlanningFindFirstOrThrowArgs>(args?: SelectSubset<T, TeachersMajorPlanningFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeachersMajorPlannings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersMajorPlanningFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeachersMajorPlannings
     * const teachersMajorPlannings = await prisma.teachersMajorPlanning.findMany()
     * 
     * // Get first 10 TeachersMajorPlannings
     * const teachersMajorPlannings = await prisma.teachersMajorPlanning.findMany({ take: 10 })
     * 
     * // Only select the `teacherMajorId`
     * const teachersMajorPlanningWithTeacherMajorIdOnly = await prisma.teachersMajorPlanning.findMany({ select: { teacherMajorId: true } })
     * 
     */
    findMany<T extends TeachersMajorPlanningFindManyArgs>(args?: SelectSubset<T, TeachersMajorPlanningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeachersMajorPlanning.
     * @param {TeachersMajorPlanningCreateArgs} args - Arguments to create a TeachersMajorPlanning.
     * @example
     * // Create one TeachersMajorPlanning
     * const TeachersMajorPlanning = await prisma.teachersMajorPlanning.create({
     *   data: {
     *     // ... data to create a TeachersMajorPlanning
     *   }
     * })
     * 
     */
    create<T extends TeachersMajorPlanningCreateArgs>(args: SelectSubset<T, TeachersMajorPlanningCreateArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeachersMajorPlannings.
     * @param {TeachersMajorPlanningCreateManyArgs} args - Arguments to create many TeachersMajorPlannings.
     * @example
     * // Create many TeachersMajorPlannings
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeachersMajorPlanningCreateManyArgs>(args?: SelectSubset<T, TeachersMajorPlanningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeachersMajorPlannings and returns the data saved in the database.
     * @param {TeachersMajorPlanningCreateManyAndReturnArgs} args - Arguments to create many TeachersMajorPlannings.
     * @example
     * // Create many TeachersMajorPlannings
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeachersMajorPlannings and only return the `teacherMajorId`
     * const teachersMajorPlanningWithTeacherMajorIdOnly = await prisma.teachersMajorPlanning.createManyAndReturn({
     *   select: { teacherMajorId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeachersMajorPlanningCreateManyAndReturnArgs>(args?: SelectSubset<T, TeachersMajorPlanningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeachersMajorPlanning.
     * @param {TeachersMajorPlanningDeleteArgs} args - Arguments to delete one TeachersMajorPlanning.
     * @example
     * // Delete one TeachersMajorPlanning
     * const TeachersMajorPlanning = await prisma.teachersMajorPlanning.delete({
     *   where: {
     *     // ... filter to delete one TeachersMajorPlanning
     *   }
     * })
     * 
     */
    delete<T extends TeachersMajorPlanningDeleteArgs>(args: SelectSubset<T, TeachersMajorPlanningDeleteArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeachersMajorPlanning.
     * @param {TeachersMajorPlanningUpdateArgs} args - Arguments to update one TeachersMajorPlanning.
     * @example
     * // Update one TeachersMajorPlanning
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeachersMajorPlanningUpdateArgs>(args: SelectSubset<T, TeachersMajorPlanningUpdateArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeachersMajorPlannings.
     * @param {TeachersMajorPlanningDeleteManyArgs} args - Arguments to filter TeachersMajorPlannings to delete.
     * @example
     * // Delete a few TeachersMajorPlannings
     * const { count } = await prisma.teachersMajorPlanning.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeachersMajorPlanningDeleteManyArgs>(args?: SelectSubset<T, TeachersMajorPlanningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeachersMajorPlannings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersMajorPlanningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeachersMajorPlannings
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeachersMajorPlanningUpdateManyArgs>(args: SelectSubset<T, TeachersMajorPlanningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeachersMajorPlannings and returns the data updated in the database.
     * @param {TeachersMajorPlanningUpdateManyAndReturnArgs} args - Arguments to update many TeachersMajorPlannings.
     * @example
     * // Update many TeachersMajorPlannings
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeachersMajorPlannings and only return the `teacherMajorId`
     * const teachersMajorPlanningWithTeacherMajorIdOnly = await prisma.teachersMajorPlanning.updateManyAndReturn({
     *   select: { teacherMajorId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeachersMajorPlanningUpdateManyAndReturnArgs>(args: SelectSubset<T, TeachersMajorPlanningUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeachersMajorPlanning.
     * @param {TeachersMajorPlanningUpsertArgs} args - Arguments to update or create a TeachersMajorPlanning.
     * @example
     * // Update or create a TeachersMajorPlanning
     * const teachersMajorPlanning = await prisma.teachersMajorPlanning.upsert({
     *   create: {
     *     // ... data to create a TeachersMajorPlanning
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeachersMajorPlanning we want to update
     *   }
     * })
     */
    upsert<T extends TeachersMajorPlanningUpsertArgs>(args: SelectSubset<T, TeachersMajorPlanningUpsertArgs<ExtArgs>>): Prisma__TeachersMajorPlanningClient<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeachersMajorPlannings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersMajorPlanningCountArgs} args - Arguments to filter TeachersMajorPlannings to count.
     * @example
     * // Count the number of TeachersMajorPlannings
     * const count = await prisma.teachersMajorPlanning.count({
     *   where: {
     *     // ... the filter for the TeachersMajorPlannings we want to count
     *   }
     * })
    **/
    count<T extends TeachersMajorPlanningCountArgs>(
      args?: Subset<T, TeachersMajorPlanningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeachersMajorPlanningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeachersMajorPlanning.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersMajorPlanningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeachersMajorPlanningAggregateArgs>(args: Subset<T, TeachersMajorPlanningAggregateArgs>): Prisma.PrismaPromise<GetTeachersMajorPlanningAggregateType<T>>

    /**
     * Group by TeachersMajorPlanning.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersMajorPlanningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeachersMajorPlanningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeachersMajorPlanningGroupByArgs['orderBy'] }
        : { orderBy?: TeachersMajorPlanningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeachersMajorPlanningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachersMajorPlanningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeachersMajorPlanning model
   */
  readonly fields: TeachersMajorPlanningFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeachersMajorPlanning.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeachersMajorPlanningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    departmentOfEducation<T extends DepartmentsOfEducationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducationDefaultArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    TeachersCoursePlanning<T extends TeachersMajorPlanning$TeachersCoursePlanningArgs<ExtArgs> = {}>(args?: Subset<T, TeachersMajorPlanning$TeachersCoursePlanningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeachersMajorPlanning model
   */
  interface TeachersMajorPlanningFieldRefs {
    readonly teacherMajorId: FieldRef<"TeachersMajorPlanning", 'Int'>
    readonly teacherId: FieldRef<"TeachersMajorPlanning", 'Int'>
    readonly academicDegreeOfMajor: FieldRef<"TeachersMajorPlanning", 'String'>
    readonly majorName: FieldRef<"TeachersMajorPlanning", 'String'>
    readonly majorId: FieldRef<"TeachersMajorPlanning", 'Decimal'>
    readonly credit: FieldRef<"TeachersMajorPlanning", 'Int'>
    readonly departmentId: FieldRef<"TeachersMajorPlanning", 'Int'>
    readonly createdAt: FieldRef<"TeachersMajorPlanning", 'DateTime'>
    readonly departmentOfEducationsId: FieldRef<"TeachersMajorPlanning", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TeachersMajorPlanning findUnique
   */
  export type TeachersMajorPlanningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersMajorPlanning to fetch.
     */
    where: TeachersMajorPlanningWhereUniqueInput
  }

  /**
   * TeachersMajorPlanning findUniqueOrThrow
   */
  export type TeachersMajorPlanningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersMajorPlanning to fetch.
     */
    where: TeachersMajorPlanningWhereUniqueInput
  }

  /**
   * TeachersMajorPlanning findFirst
   */
  export type TeachersMajorPlanningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersMajorPlanning to fetch.
     */
    where?: TeachersMajorPlanningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersMajorPlannings to fetch.
     */
    orderBy?: TeachersMajorPlanningOrderByWithRelationInput | TeachersMajorPlanningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeachersMajorPlannings.
     */
    cursor?: TeachersMajorPlanningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersMajorPlannings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersMajorPlannings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeachersMajorPlannings.
     */
    distinct?: TeachersMajorPlanningScalarFieldEnum | TeachersMajorPlanningScalarFieldEnum[]
  }

  /**
   * TeachersMajorPlanning findFirstOrThrow
   */
  export type TeachersMajorPlanningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersMajorPlanning to fetch.
     */
    where?: TeachersMajorPlanningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersMajorPlannings to fetch.
     */
    orderBy?: TeachersMajorPlanningOrderByWithRelationInput | TeachersMajorPlanningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeachersMajorPlannings.
     */
    cursor?: TeachersMajorPlanningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersMajorPlannings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersMajorPlannings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeachersMajorPlannings.
     */
    distinct?: TeachersMajorPlanningScalarFieldEnum | TeachersMajorPlanningScalarFieldEnum[]
  }

  /**
   * TeachersMajorPlanning findMany
   */
  export type TeachersMajorPlanningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * Filter, which TeachersMajorPlannings to fetch.
     */
    where?: TeachersMajorPlanningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersMajorPlannings to fetch.
     */
    orderBy?: TeachersMajorPlanningOrderByWithRelationInput | TeachersMajorPlanningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeachersMajorPlannings.
     */
    cursor?: TeachersMajorPlanningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersMajorPlannings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersMajorPlannings.
     */
    skip?: number
    distinct?: TeachersMajorPlanningScalarFieldEnum | TeachersMajorPlanningScalarFieldEnum[]
  }

  /**
   * TeachersMajorPlanning create
   */
  export type TeachersMajorPlanningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * The data needed to create a TeachersMajorPlanning.
     */
    data: XOR<TeachersMajorPlanningCreateInput, TeachersMajorPlanningUncheckedCreateInput>
  }

  /**
   * TeachersMajorPlanning createMany
   */
  export type TeachersMajorPlanningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeachersMajorPlannings.
     */
    data: TeachersMajorPlanningCreateManyInput | TeachersMajorPlanningCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeachersMajorPlanning createManyAndReturn
   */
  export type TeachersMajorPlanningCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * The data used to create many TeachersMajorPlannings.
     */
    data: TeachersMajorPlanningCreateManyInput | TeachersMajorPlanningCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeachersMajorPlanning update
   */
  export type TeachersMajorPlanningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * The data needed to update a TeachersMajorPlanning.
     */
    data: XOR<TeachersMajorPlanningUpdateInput, TeachersMajorPlanningUncheckedUpdateInput>
    /**
     * Choose, which TeachersMajorPlanning to update.
     */
    where: TeachersMajorPlanningWhereUniqueInput
  }

  /**
   * TeachersMajorPlanning updateMany
   */
  export type TeachersMajorPlanningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeachersMajorPlannings.
     */
    data: XOR<TeachersMajorPlanningUpdateManyMutationInput, TeachersMajorPlanningUncheckedUpdateManyInput>
    /**
     * Filter which TeachersMajorPlannings to update
     */
    where?: TeachersMajorPlanningWhereInput
    /**
     * Limit how many TeachersMajorPlannings to update.
     */
    limit?: number
  }

  /**
   * TeachersMajorPlanning updateManyAndReturn
   */
  export type TeachersMajorPlanningUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * The data used to update TeachersMajorPlannings.
     */
    data: XOR<TeachersMajorPlanningUpdateManyMutationInput, TeachersMajorPlanningUncheckedUpdateManyInput>
    /**
     * Filter which TeachersMajorPlannings to update
     */
    where?: TeachersMajorPlanningWhereInput
    /**
     * Limit how many TeachersMajorPlannings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeachersMajorPlanning upsert
   */
  export type TeachersMajorPlanningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * The filter to search for the TeachersMajorPlanning to update in case it exists.
     */
    where: TeachersMajorPlanningWhereUniqueInput
    /**
     * In case the TeachersMajorPlanning found by the `where` argument doesn't exist, create a new TeachersMajorPlanning with this data.
     */
    create: XOR<TeachersMajorPlanningCreateInput, TeachersMajorPlanningUncheckedCreateInput>
    /**
     * In case the TeachersMajorPlanning was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeachersMajorPlanningUpdateInput, TeachersMajorPlanningUncheckedUpdateInput>
  }

  /**
   * TeachersMajorPlanning delete
   */
  export type TeachersMajorPlanningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    /**
     * Filter which TeachersMajorPlanning to delete.
     */
    where: TeachersMajorPlanningWhereUniqueInput
  }

  /**
   * TeachersMajorPlanning deleteMany
   */
  export type TeachersMajorPlanningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeachersMajorPlannings to delete
     */
    where?: TeachersMajorPlanningWhereInput
    /**
     * Limit how many TeachersMajorPlannings to delete.
     */
    limit?: number
  }

  /**
   * TeachersMajorPlanning.TeachersCoursePlanning
   */
  export type TeachersMajorPlanning$TeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    where?: TeachersCoursePlanningWhereInput
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    cursor?: TeachersCoursePlanningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersCoursePlanningScalarFieldEnum | TeachersCoursePlanningScalarFieldEnum[]
  }

  /**
   * TeachersMajorPlanning without action
   */
  export type TeachersMajorPlanningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    teacherId: number | null
    userId: number | null
    departmentsOfEducationId: number | null
    departmentId: number | null
  }

  export type TeacherSumAggregateOutputType = {
    teacherId: number | null
    userId: number | null
    departmentsOfEducationId: number | null
    departmentId: number | null
  }

  export type TeacherMinAggregateOutputType = {
    teacherId: number | null
    userId: number | null
    teacherCode: string | null
    teacherEmail: string | null
    certificate: string | null
    profession: string | null
    academicDegree: string | null
    jobTitle: string | null
    isActive: $Enums.IsActiveEnum | null
    jobDescription: string | null
    departmentsOfEducationId: number | null
    departmentId: number | null
  }

  export type TeacherMaxAggregateOutputType = {
    teacherId: number | null
    userId: number | null
    teacherCode: string | null
    teacherEmail: string | null
    certificate: string | null
    profession: string | null
    academicDegree: string | null
    jobTitle: string | null
    isActive: $Enums.IsActiveEnum | null
    jobDescription: string | null
    departmentsOfEducationId: number | null
    departmentId: number | null
  }

  export type TeacherCountAggregateOutputType = {
    teacherId: number
    userId: number
    teacherCode: number
    teacherEmail: number
    certificate: number
    profession: number
    academicDegree: number
    jobTitle: number
    isActive: number
    jobDescription: number
    departmentsOfEducationId: number
    departmentId: number
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    teacherId?: true
    userId?: true
    departmentsOfEducationId?: true
    departmentId?: true
  }

  export type TeacherSumAggregateInputType = {
    teacherId?: true
    userId?: true
    departmentsOfEducationId?: true
    departmentId?: true
  }

  export type TeacherMinAggregateInputType = {
    teacherId?: true
    userId?: true
    teacherCode?: true
    teacherEmail?: true
    certificate?: true
    profession?: true
    academicDegree?: true
    jobTitle?: true
    isActive?: true
    jobDescription?: true
    departmentsOfEducationId?: true
    departmentId?: true
  }

  export type TeacherMaxAggregateInputType = {
    teacherId?: true
    userId?: true
    teacherCode?: true
    teacherEmail?: true
    certificate?: true
    profession?: true
    academicDegree?: true
    jobTitle?: true
    isActive?: true
    jobDescription?: true
    departmentsOfEducationId?: true
    departmentId?: true
  }

  export type TeacherCountAggregateInputType = {
    teacherId?: true
    userId?: true
    teacherCode?: true
    teacherEmail?: true
    certificate?: true
    profession?: true
    academicDegree?: true
    jobTitle?: true
    isActive?: true
    jobDescription?: true
    departmentsOfEducationId?: true
    departmentId?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _avg?: TeacherAvgAggregateInputType
    _sum?: TeacherSumAggregateInputType
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    teacherId: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate: string | null
    profession: string
    academicDegree: string
    jobTitle: string | null
    isActive: $Enums.IsActiveEnum
    jobDescription: string
    departmentsOfEducationId: number
    departmentId: number | null
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    userId?: boolean
    teacherCode?: boolean
    teacherEmail?: boolean
    certificate?: boolean
    profession?: boolean
    academicDegree?: boolean
    jobTitle?: boolean
    isActive?: boolean
    jobDescription?: boolean
    departmentsOfEducationId?: boolean
    departmentId?: boolean
    auth_user?: boolean | Teacher$auth_userArgs<ExtArgs>
    department?: boolean | Teacher$departmentArgs<ExtArgs>
    departmentsOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    TeacherSchedule?: boolean | Teacher$TeacherScheduleArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | Teacher$TeachersCoursePlanningArgs<ExtArgs>
    TeachersMajorPlanning?: boolean | Teacher$TeachersMajorPlanningArgs<ExtArgs>
    StudentClubs?: boolean | Teacher$StudentClubsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    userId?: boolean
    teacherCode?: boolean
    teacherEmail?: boolean
    certificate?: boolean
    profession?: boolean
    academicDegree?: boolean
    jobTitle?: boolean
    isActive?: boolean
    jobDescription?: boolean
    departmentsOfEducationId?: boolean
    departmentId?: boolean
    auth_user?: boolean | Teacher$auth_userArgs<ExtArgs>
    department?: boolean | Teacher$departmentArgs<ExtArgs>
    departmentsOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    userId?: boolean
    teacherCode?: boolean
    teacherEmail?: boolean
    certificate?: boolean
    profession?: boolean
    academicDegree?: boolean
    jobTitle?: boolean
    isActive?: boolean
    jobDescription?: boolean
    departmentsOfEducationId?: boolean
    departmentId?: boolean
    auth_user?: boolean | Teacher$auth_userArgs<ExtArgs>
    department?: boolean | Teacher$departmentArgs<ExtArgs>
    departmentsOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    teacherId?: boolean
    userId?: boolean
    teacherCode?: boolean
    teacherEmail?: boolean
    certificate?: boolean
    profession?: boolean
    academicDegree?: boolean
    jobTitle?: boolean
    isActive?: boolean
    jobDescription?: boolean
    departmentsOfEducationId?: boolean
    departmentId?: boolean
  }

  export type TeacherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"teacherId" | "userId" | "teacherCode" | "teacherEmail" | "certificate" | "profession" | "academicDegree" | "jobTitle" | "isActive" | "jobDescription" | "departmentsOfEducationId" | "departmentId", ExtArgs["result"]["teacher"]>
  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_user?: boolean | Teacher$auth_userArgs<ExtArgs>
    department?: boolean | Teacher$departmentArgs<ExtArgs>
    departmentsOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    TeacherSchedule?: boolean | Teacher$TeacherScheduleArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | Teacher$TeachersCoursePlanningArgs<ExtArgs>
    TeachersMajorPlanning?: boolean | Teacher$TeachersMajorPlanningArgs<ExtArgs>
    StudentClubs?: boolean | Teacher$StudentClubsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_user?: boolean | Teacher$auth_userArgs<ExtArgs>
    department?: boolean | Teacher$departmentArgs<ExtArgs>
    departmentsOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_user?: boolean | Teacher$auth_userArgs<ExtArgs>
    department?: boolean | Teacher$departmentArgs<ExtArgs>
    departmentsOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
  }

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      auth_user: Prisma.$auth_userPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      departmentsOfEducation: Prisma.$DepartmentsOfEducationPayload<ExtArgs>
      TeacherSchedule: Prisma.$TeacherSchedulePayload<ExtArgs>[]
      TeachersCoursePlanning: Prisma.$TeachersCoursePlanningPayload<ExtArgs>[]
      TeachersMajorPlanning: Prisma.$TeachersMajorPlanningPayload<ExtArgs>[]
      StudentClubs: Prisma.$StudentClubsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      teacherId: number
      userId: number
      teacherCode: string
      teacherEmail: string
      certificate: string | null
      profession: string
      academicDegree: string
      jobTitle: string | null
      isActive: $Enums.IsActiveEnum
      jobDescription: string
      departmentsOfEducationId: number
      departmentId: number | null
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `teacherId`
     * const teacherWithTeacherIdOnly = await prisma.teacher.findMany({ select: { teacherId: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `teacherId`
     * const teacherWithTeacherIdOnly = await prisma.teacher.createManyAndReturn({
     *   select: { teacherId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers and returns the data updated in the database.
     * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teachers and only return the `teacherId`
     * const teacherWithTeacherIdOnly = await prisma.teacher.updateManyAndReturn({
     *   select: { teacherId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auth_user<T extends Teacher$auth_userArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$auth_userArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends Teacher$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    departmentsOfEducation<T extends DepartmentsOfEducationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducationDefaultArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    TeacherSchedule<T extends Teacher$TeacherScheduleArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$TeacherScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeachersCoursePlanning<T extends Teacher$TeachersCoursePlanningArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$TeachersCoursePlanningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeachersMajorPlanning<T extends Teacher$TeachersMajorPlanningArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$TeachersMajorPlanningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StudentClubs<T extends Teacher$StudentClubsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$StudentClubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */
  interface TeacherFieldRefs {
    readonly teacherId: FieldRef<"Teacher", 'Int'>
    readonly userId: FieldRef<"Teacher", 'Int'>
    readonly teacherCode: FieldRef<"Teacher", 'String'>
    readonly teacherEmail: FieldRef<"Teacher", 'String'>
    readonly certificate: FieldRef<"Teacher", 'String'>
    readonly profession: FieldRef<"Teacher", 'String'>
    readonly academicDegree: FieldRef<"Teacher", 'String'>
    readonly jobTitle: FieldRef<"Teacher", 'String'>
    readonly isActive: FieldRef<"Teacher", 'IsActiveEnum'>
    readonly jobDescription: FieldRef<"Teacher", 'String'>
    readonly departmentsOfEducationId: FieldRef<"Teacher", 'Int'>
    readonly departmentId: FieldRef<"Teacher", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher updateManyAndReturn
   */
  export type TeacherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to delete.
     */
    limit?: number
  }

  /**
   * Teacher.auth_user
   */
  export type Teacher$auth_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    where?: auth_userWhereInput
  }

  /**
   * Teacher.department
   */
  export type Teacher$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Teacher.TeacherSchedule
   */
  export type Teacher$TeacherScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    where?: TeacherScheduleWhereInput
    orderBy?: TeacherScheduleOrderByWithRelationInput | TeacherScheduleOrderByWithRelationInput[]
    cursor?: TeacherScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScheduleScalarFieldEnum | TeacherScheduleScalarFieldEnum[]
  }

  /**
   * Teacher.TeachersCoursePlanning
   */
  export type Teacher$TeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    where?: TeachersCoursePlanningWhereInput
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    cursor?: TeachersCoursePlanningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersCoursePlanningScalarFieldEnum | TeachersCoursePlanningScalarFieldEnum[]
  }

  /**
   * Teacher.TeachersMajorPlanning
   */
  export type Teacher$TeachersMajorPlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    where?: TeachersMajorPlanningWhereInput
    orderBy?: TeachersMajorPlanningOrderByWithRelationInput | TeachersMajorPlanningOrderByWithRelationInput[]
    cursor?: TeachersMajorPlanningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersMajorPlanningScalarFieldEnum | TeachersMajorPlanningScalarFieldEnum[]
  }

  /**
   * Teacher.StudentClubs
   */
  export type Teacher$StudentClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    where?: StudentClubsWhereInput
    orderBy?: StudentClubsOrderByWithRelationInput | StudentClubsOrderByWithRelationInput[]
    cursor?: StudentClubsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentClubsScalarFieldEnum | StudentClubsScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model StudentClubs
   */

  export type AggregateStudentClubs = {
    _count: StudentClubsCountAggregateOutputType | null
    _avg: StudentClubsAvgAggregateOutputType | null
    _sum: StudentClubsSumAggregateOutputType | null
    _min: StudentClubsMinAggregateOutputType | null
    _max: StudentClubsMaxAggregateOutputType | null
  }

  export type StudentClubsAvgAggregateOutputType = {
    studentClubId: number | null
    clubMembers: number | null
    clubMajorId: number | null
    clubPrimaryLeaderId: number | null
    clubAssistantLeaderId: number | null
    clubAdvisorTeacherId: number | null
  }

  export type StudentClubsSumAggregateOutputType = {
    studentClubId: number | null
    clubMembers: number | null
    clubMajorId: number | null
    clubPrimaryLeaderId: number | null
    clubAssistantLeaderId: number | null
    clubAdvisorTeacherId: number | null
  }

  export type StudentClubsMinAggregateOutputType = {
    studentClubId: number | null
    clubCode: string | null
    clubName: string | null
    clubMembers: number | null
    clubType: $Enums.ClubTypeEnum | null
    clubMajorId: number | null
    clubPrimaryLeaderId: number | null
    clubAssistantLeaderId: number | null
    clubAdvisorTeacherId: number | null
    clubLogo: string | null
    clubMoto: string | null
    createdAt: Date | null
  }

  export type StudentClubsMaxAggregateOutputType = {
    studentClubId: number | null
    clubCode: string | null
    clubName: string | null
    clubMembers: number | null
    clubType: $Enums.ClubTypeEnum | null
    clubMajorId: number | null
    clubPrimaryLeaderId: number | null
    clubAssistantLeaderId: number | null
    clubAdvisorTeacherId: number | null
    clubLogo: string | null
    clubMoto: string | null
    createdAt: Date | null
  }

  export type StudentClubsCountAggregateOutputType = {
    studentClubId: number
    clubCode: number
    clubName: number
    clubMembers: number
    clubType: number
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: number
    clubMoto: number
    createdAt: number
    _all: number
  }


  export type StudentClubsAvgAggregateInputType = {
    studentClubId?: true
    clubMembers?: true
    clubMajorId?: true
    clubPrimaryLeaderId?: true
    clubAssistantLeaderId?: true
    clubAdvisorTeacherId?: true
  }

  export type StudentClubsSumAggregateInputType = {
    studentClubId?: true
    clubMembers?: true
    clubMajorId?: true
    clubPrimaryLeaderId?: true
    clubAssistantLeaderId?: true
    clubAdvisorTeacherId?: true
  }

  export type StudentClubsMinAggregateInputType = {
    studentClubId?: true
    clubCode?: true
    clubName?: true
    clubMembers?: true
    clubType?: true
    clubMajorId?: true
    clubPrimaryLeaderId?: true
    clubAssistantLeaderId?: true
    clubAdvisorTeacherId?: true
    clubLogo?: true
    clubMoto?: true
    createdAt?: true
  }

  export type StudentClubsMaxAggregateInputType = {
    studentClubId?: true
    clubCode?: true
    clubName?: true
    clubMembers?: true
    clubType?: true
    clubMajorId?: true
    clubPrimaryLeaderId?: true
    clubAssistantLeaderId?: true
    clubAdvisorTeacherId?: true
    clubLogo?: true
    clubMoto?: true
    createdAt?: true
  }

  export type StudentClubsCountAggregateInputType = {
    studentClubId?: true
    clubCode?: true
    clubName?: true
    clubMembers?: true
    clubType?: true
    clubMajorId?: true
    clubPrimaryLeaderId?: true
    clubAssistantLeaderId?: true
    clubAdvisorTeacherId?: true
    clubLogo?: true
    clubMoto?: true
    createdAt?: true
    _all?: true
  }

  export type StudentClubsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentClubs to aggregate.
     */
    where?: StudentClubsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentClubs to fetch.
     */
    orderBy?: StudentClubsOrderByWithRelationInput | StudentClubsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentClubsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentClubs
    **/
    _count?: true | StudentClubsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentClubsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentClubsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentClubsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentClubsMaxAggregateInputType
  }

  export type GetStudentClubsAggregateType<T extends StudentClubsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentClubs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentClubs[P]>
      : GetScalarType<T[P], AggregateStudentClubs[P]>
  }




  export type StudentClubsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentClubsWhereInput
    orderBy?: StudentClubsOrderByWithAggregationInput | StudentClubsOrderByWithAggregationInput[]
    by: StudentClubsScalarFieldEnum[] | StudentClubsScalarFieldEnum
    having?: StudentClubsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentClubsCountAggregateInputType | true
    _avg?: StudentClubsAvgAggregateInputType
    _sum?: StudentClubsSumAggregateInputType
    _min?: StudentClubsMinAggregateInputType
    _max?: StudentClubsMaxAggregateInputType
  }

  export type StudentClubsGroupByOutputType = {
    studentClubId: number
    clubCode: string
    clubName: string
    clubMembers: number
    clubType: $Enums.ClubTypeEnum
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt: Date | null
    _count: StudentClubsCountAggregateOutputType | null
    _avg: StudentClubsAvgAggregateOutputType | null
    _sum: StudentClubsSumAggregateOutputType | null
    _min: StudentClubsMinAggregateOutputType | null
    _max: StudentClubsMaxAggregateOutputType | null
  }

  type GetStudentClubsGroupByPayload<T extends StudentClubsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentClubsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentClubsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentClubsGroupByOutputType[P]>
            : GetScalarType<T[P], StudentClubsGroupByOutputType[P]>
        }
      >
    >


  export type StudentClubsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentClubId?: boolean
    clubCode?: boolean
    clubName?: boolean
    clubMembers?: boolean
    clubType?: boolean
    clubMajorId?: boolean
    clubPrimaryLeaderId?: boolean
    clubAssistantLeaderId?: boolean
    clubAdvisorTeacherId?: boolean
    clubLogo?: boolean
    clubMoto?: boolean
    createdAt?: boolean
    club_advisor_teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    clubAssistantLeader?: boolean | auth_userDefaultArgs<ExtArgs>
    clubMajor?: boolean | MajorDefaultArgs<ExtArgs>
    clubPrimaryLeader?: boolean | auth_userDefaultArgs<ExtArgs>
    Student?: boolean | StudentClubs$StudentArgs<ExtArgs>
    _count?: boolean | StudentClubsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentClubs"]>

  export type StudentClubsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentClubId?: boolean
    clubCode?: boolean
    clubName?: boolean
    clubMembers?: boolean
    clubType?: boolean
    clubMajorId?: boolean
    clubPrimaryLeaderId?: boolean
    clubAssistantLeaderId?: boolean
    clubAdvisorTeacherId?: boolean
    clubLogo?: boolean
    clubMoto?: boolean
    createdAt?: boolean
    club_advisor_teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    clubAssistantLeader?: boolean | auth_userDefaultArgs<ExtArgs>
    clubMajor?: boolean | MajorDefaultArgs<ExtArgs>
    clubPrimaryLeader?: boolean | auth_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentClubs"]>

  export type StudentClubsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentClubId?: boolean
    clubCode?: boolean
    clubName?: boolean
    clubMembers?: boolean
    clubType?: boolean
    clubMajorId?: boolean
    clubPrimaryLeaderId?: boolean
    clubAssistantLeaderId?: boolean
    clubAdvisorTeacherId?: boolean
    clubLogo?: boolean
    clubMoto?: boolean
    createdAt?: boolean
    club_advisor_teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    clubAssistantLeader?: boolean | auth_userDefaultArgs<ExtArgs>
    clubMajor?: boolean | MajorDefaultArgs<ExtArgs>
    clubPrimaryLeader?: boolean | auth_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentClubs"]>

  export type StudentClubsSelectScalar = {
    studentClubId?: boolean
    clubCode?: boolean
    clubName?: boolean
    clubMembers?: boolean
    clubType?: boolean
    clubMajorId?: boolean
    clubPrimaryLeaderId?: boolean
    clubAssistantLeaderId?: boolean
    clubAdvisorTeacherId?: boolean
    clubLogo?: boolean
    clubMoto?: boolean
    createdAt?: boolean
  }

  export type StudentClubsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"studentClubId" | "clubCode" | "clubName" | "clubMembers" | "clubType" | "clubMajorId" | "clubPrimaryLeaderId" | "clubAssistantLeaderId" | "clubAdvisorTeacherId" | "clubLogo" | "clubMoto" | "createdAt", ExtArgs["result"]["studentClubs"]>
  export type StudentClubsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club_advisor_teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    clubAssistantLeader?: boolean | auth_userDefaultArgs<ExtArgs>
    clubMajor?: boolean | MajorDefaultArgs<ExtArgs>
    clubPrimaryLeader?: boolean | auth_userDefaultArgs<ExtArgs>
    Student?: boolean | StudentClubs$StudentArgs<ExtArgs>
    _count?: boolean | StudentClubsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentClubsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club_advisor_teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    clubAssistantLeader?: boolean | auth_userDefaultArgs<ExtArgs>
    clubMajor?: boolean | MajorDefaultArgs<ExtArgs>
    clubPrimaryLeader?: boolean | auth_userDefaultArgs<ExtArgs>
  }
  export type StudentClubsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club_advisor_teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    clubAssistantLeader?: boolean | auth_userDefaultArgs<ExtArgs>
    clubMajor?: boolean | MajorDefaultArgs<ExtArgs>
    clubPrimaryLeader?: boolean | auth_userDefaultArgs<ExtArgs>
  }

  export type $StudentClubsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentClubs"
    objects: {
      club_advisor_teacher: Prisma.$TeacherPayload<ExtArgs>
      clubAssistantLeader: Prisma.$auth_userPayload<ExtArgs>
      clubMajor: Prisma.$MajorPayload<ExtArgs>
      clubPrimaryLeader: Prisma.$auth_userPayload<ExtArgs>
      Student: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      studentClubId: number
      clubCode: string
      clubName: string
      clubMembers: number
      clubType: $Enums.ClubTypeEnum
      clubMajorId: number
      clubPrimaryLeaderId: number
      clubAssistantLeaderId: number
      clubAdvisorTeacherId: number
      clubLogo: string
      clubMoto: string
      createdAt: Date | null
    }, ExtArgs["result"]["studentClubs"]>
    composites: {}
  }

  type StudentClubsGetPayload<S extends boolean | null | undefined | StudentClubsDefaultArgs> = $Result.GetResult<Prisma.$StudentClubsPayload, S>

  type StudentClubsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentClubsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentClubsCountAggregateInputType | true
    }

  export interface StudentClubsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentClubs'], meta: { name: 'StudentClubs' } }
    /**
     * Find zero or one StudentClubs that matches the filter.
     * @param {StudentClubsFindUniqueArgs} args - Arguments to find a StudentClubs
     * @example
     * // Get one StudentClubs
     * const studentClubs = await prisma.studentClubs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentClubsFindUniqueArgs>(args: SelectSubset<T, StudentClubsFindUniqueArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentClubs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentClubsFindUniqueOrThrowArgs} args - Arguments to find a StudentClubs
     * @example
     * // Get one StudentClubs
     * const studentClubs = await prisma.studentClubs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentClubsFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentClubsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentClubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClubsFindFirstArgs} args - Arguments to find a StudentClubs
     * @example
     * // Get one StudentClubs
     * const studentClubs = await prisma.studentClubs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentClubsFindFirstArgs>(args?: SelectSubset<T, StudentClubsFindFirstArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentClubs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClubsFindFirstOrThrowArgs} args - Arguments to find a StudentClubs
     * @example
     * // Get one StudentClubs
     * const studentClubs = await prisma.studentClubs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentClubsFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentClubsFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentClubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClubsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentClubs
     * const studentClubs = await prisma.studentClubs.findMany()
     * 
     * // Get first 10 StudentClubs
     * const studentClubs = await prisma.studentClubs.findMany({ take: 10 })
     * 
     * // Only select the `studentClubId`
     * const studentClubsWithStudentClubIdOnly = await prisma.studentClubs.findMany({ select: { studentClubId: true } })
     * 
     */
    findMany<T extends StudentClubsFindManyArgs>(args?: SelectSubset<T, StudentClubsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentClubs.
     * @param {StudentClubsCreateArgs} args - Arguments to create a StudentClubs.
     * @example
     * // Create one StudentClubs
     * const StudentClubs = await prisma.studentClubs.create({
     *   data: {
     *     // ... data to create a StudentClubs
     *   }
     * })
     * 
     */
    create<T extends StudentClubsCreateArgs>(args: SelectSubset<T, StudentClubsCreateArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentClubs.
     * @param {StudentClubsCreateManyArgs} args - Arguments to create many StudentClubs.
     * @example
     * // Create many StudentClubs
     * const studentClubs = await prisma.studentClubs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentClubsCreateManyArgs>(args?: SelectSubset<T, StudentClubsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentClubs and returns the data saved in the database.
     * @param {StudentClubsCreateManyAndReturnArgs} args - Arguments to create many StudentClubs.
     * @example
     * // Create many StudentClubs
     * const studentClubs = await prisma.studentClubs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentClubs and only return the `studentClubId`
     * const studentClubsWithStudentClubIdOnly = await prisma.studentClubs.createManyAndReturn({
     *   select: { studentClubId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentClubsCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentClubsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentClubs.
     * @param {StudentClubsDeleteArgs} args - Arguments to delete one StudentClubs.
     * @example
     * // Delete one StudentClubs
     * const StudentClubs = await prisma.studentClubs.delete({
     *   where: {
     *     // ... filter to delete one StudentClubs
     *   }
     * })
     * 
     */
    delete<T extends StudentClubsDeleteArgs>(args: SelectSubset<T, StudentClubsDeleteArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentClubs.
     * @param {StudentClubsUpdateArgs} args - Arguments to update one StudentClubs.
     * @example
     * // Update one StudentClubs
     * const studentClubs = await prisma.studentClubs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentClubsUpdateArgs>(args: SelectSubset<T, StudentClubsUpdateArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentClubs.
     * @param {StudentClubsDeleteManyArgs} args - Arguments to filter StudentClubs to delete.
     * @example
     * // Delete a few StudentClubs
     * const { count } = await prisma.studentClubs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentClubsDeleteManyArgs>(args?: SelectSubset<T, StudentClubsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentClubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClubsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentClubs
     * const studentClubs = await prisma.studentClubs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentClubsUpdateManyArgs>(args: SelectSubset<T, StudentClubsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentClubs and returns the data updated in the database.
     * @param {StudentClubsUpdateManyAndReturnArgs} args - Arguments to update many StudentClubs.
     * @example
     * // Update many StudentClubs
     * const studentClubs = await prisma.studentClubs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentClubs and only return the `studentClubId`
     * const studentClubsWithStudentClubIdOnly = await prisma.studentClubs.updateManyAndReturn({
     *   select: { studentClubId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentClubsUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentClubsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentClubs.
     * @param {StudentClubsUpsertArgs} args - Arguments to update or create a StudentClubs.
     * @example
     * // Update or create a StudentClubs
     * const studentClubs = await prisma.studentClubs.upsert({
     *   create: {
     *     // ... data to create a StudentClubs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentClubs we want to update
     *   }
     * })
     */
    upsert<T extends StudentClubsUpsertArgs>(args: SelectSubset<T, StudentClubsUpsertArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentClubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClubsCountArgs} args - Arguments to filter StudentClubs to count.
     * @example
     * // Count the number of StudentClubs
     * const count = await prisma.studentClubs.count({
     *   where: {
     *     // ... the filter for the StudentClubs we want to count
     *   }
     * })
    **/
    count<T extends StudentClubsCountArgs>(
      args?: Subset<T, StudentClubsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentClubsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentClubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClubsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentClubsAggregateArgs>(args: Subset<T, StudentClubsAggregateArgs>): Prisma.PrismaPromise<GetStudentClubsAggregateType<T>>

    /**
     * Group by StudentClubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClubsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentClubsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentClubsGroupByArgs['orderBy'] }
        : { orderBy?: StudentClubsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentClubsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentClubsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentClubs model
   */
  readonly fields: StudentClubsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentClubs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClubsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    club_advisor_teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clubAssistantLeader<T extends auth_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, auth_userDefaultArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clubMajor<T extends MajorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MajorDefaultArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clubPrimaryLeader<T extends auth_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, auth_userDefaultArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Student<T extends StudentClubs$StudentArgs<ExtArgs> = {}>(args?: Subset<T, StudentClubs$StudentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentClubs model
   */
  interface StudentClubsFieldRefs {
    readonly studentClubId: FieldRef<"StudentClubs", 'Int'>
    readonly clubCode: FieldRef<"StudentClubs", 'String'>
    readonly clubName: FieldRef<"StudentClubs", 'String'>
    readonly clubMembers: FieldRef<"StudentClubs", 'Int'>
    readonly clubType: FieldRef<"StudentClubs", 'ClubTypeEnum'>
    readonly clubMajorId: FieldRef<"StudentClubs", 'Int'>
    readonly clubPrimaryLeaderId: FieldRef<"StudentClubs", 'Int'>
    readonly clubAssistantLeaderId: FieldRef<"StudentClubs", 'Int'>
    readonly clubAdvisorTeacherId: FieldRef<"StudentClubs", 'Int'>
    readonly clubLogo: FieldRef<"StudentClubs", 'String'>
    readonly clubMoto: FieldRef<"StudentClubs", 'String'>
    readonly createdAt: FieldRef<"StudentClubs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentClubs findUnique
   */
  export type StudentClubsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * Filter, which StudentClubs to fetch.
     */
    where: StudentClubsWhereUniqueInput
  }

  /**
   * StudentClubs findUniqueOrThrow
   */
  export type StudentClubsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * Filter, which StudentClubs to fetch.
     */
    where: StudentClubsWhereUniqueInput
  }

  /**
   * StudentClubs findFirst
   */
  export type StudentClubsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * Filter, which StudentClubs to fetch.
     */
    where?: StudentClubsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentClubs to fetch.
     */
    orderBy?: StudentClubsOrderByWithRelationInput | StudentClubsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentClubs.
     */
    cursor?: StudentClubsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentClubs.
     */
    distinct?: StudentClubsScalarFieldEnum | StudentClubsScalarFieldEnum[]
  }

  /**
   * StudentClubs findFirstOrThrow
   */
  export type StudentClubsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * Filter, which StudentClubs to fetch.
     */
    where?: StudentClubsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentClubs to fetch.
     */
    orderBy?: StudentClubsOrderByWithRelationInput | StudentClubsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentClubs.
     */
    cursor?: StudentClubsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentClubs.
     */
    distinct?: StudentClubsScalarFieldEnum | StudentClubsScalarFieldEnum[]
  }

  /**
   * StudentClubs findMany
   */
  export type StudentClubsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * Filter, which StudentClubs to fetch.
     */
    where?: StudentClubsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentClubs to fetch.
     */
    orderBy?: StudentClubsOrderByWithRelationInput | StudentClubsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentClubs.
     */
    cursor?: StudentClubsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentClubs.
     */
    skip?: number
    distinct?: StudentClubsScalarFieldEnum | StudentClubsScalarFieldEnum[]
  }

  /**
   * StudentClubs create
   */
  export type StudentClubsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentClubs.
     */
    data: XOR<StudentClubsCreateInput, StudentClubsUncheckedCreateInput>
  }

  /**
   * StudentClubs createMany
   */
  export type StudentClubsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentClubs.
     */
    data: StudentClubsCreateManyInput | StudentClubsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentClubs createManyAndReturn
   */
  export type StudentClubsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * The data used to create many StudentClubs.
     */
    data: StudentClubsCreateManyInput | StudentClubsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentClubs update
   */
  export type StudentClubsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentClubs.
     */
    data: XOR<StudentClubsUpdateInput, StudentClubsUncheckedUpdateInput>
    /**
     * Choose, which StudentClubs to update.
     */
    where: StudentClubsWhereUniqueInput
  }

  /**
   * StudentClubs updateMany
   */
  export type StudentClubsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentClubs.
     */
    data: XOR<StudentClubsUpdateManyMutationInput, StudentClubsUncheckedUpdateManyInput>
    /**
     * Filter which StudentClubs to update
     */
    where?: StudentClubsWhereInput
    /**
     * Limit how many StudentClubs to update.
     */
    limit?: number
  }

  /**
   * StudentClubs updateManyAndReturn
   */
  export type StudentClubsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * The data used to update StudentClubs.
     */
    data: XOR<StudentClubsUpdateManyMutationInput, StudentClubsUncheckedUpdateManyInput>
    /**
     * Filter which StudentClubs to update
     */
    where?: StudentClubsWhereInput
    /**
     * Limit how many StudentClubs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentClubs upsert
   */
  export type StudentClubsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentClubs to update in case it exists.
     */
    where: StudentClubsWhereUniqueInput
    /**
     * In case the StudentClubs found by the `where` argument doesn't exist, create a new StudentClubs with this data.
     */
    create: XOR<StudentClubsCreateInput, StudentClubsUncheckedCreateInput>
    /**
     * In case the StudentClubs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentClubsUpdateInput, StudentClubsUncheckedUpdateInput>
  }

  /**
   * StudentClubs delete
   */
  export type StudentClubsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    /**
     * Filter which StudentClubs to delete.
     */
    where: StudentClubsWhereUniqueInput
  }

  /**
   * StudentClubs deleteMany
   */
  export type StudentClubsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentClubs to delete
     */
    where?: StudentClubsWhereInput
    /**
     * Limit how many StudentClubs to delete.
     */
    limit?: number
  }

  /**
   * StudentClubs.Student
   */
  export type StudentClubs$StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * StudentClubs without action
   */
  export type StudentClubsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    student_id: number | null
    user_id: number | null
    student_club_id: number | null
    enrollment_number: number | null
    enrollment_year: number | null
    major_id: number | null
    department_id: number | null
  }

  export type StudentSumAggregateOutputType = {
    student_id: number | null
    user_id: number | null
    student_club_id: number | null
    enrollment_number: number | null
    enrollment_year: number | null
    major_id: number | null
    department_id: number | null
  }

  export type StudentMinAggregateOutputType = {
    student_id: number | null
    user_id: number | null
    student_club_id: number | null
    additional_roles: $Enums.AdditionalRolesEnum | null
    student_code: string | null
    student_email: string | null
    enrollment_number: number | null
    enrollment_year: number | null
    year_classification: $Enums.YearClassificationEnum | null
    is_active: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string | null
    academic_degree_file: string | null
    major_id: number | null
    created_at: Date | null
    department_id: number | null
  }

  export type StudentMaxAggregateOutputType = {
    student_id: number | null
    user_id: number | null
    student_club_id: number | null
    additional_roles: $Enums.AdditionalRolesEnum | null
    student_code: string | null
    student_email: string | null
    enrollment_number: number | null
    enrollment_year: number | null
    year_classification: $Enums.YearClassificationEnum | null
    is_active: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string | null
    academic_degree_file: string | null
    major_id: number | null
    created_at: Date | null
    department_id: number | null
  }

  export type StudentCountAggregateOutputType = {
    student_id: number
    user_id: number
    student_club_id: number
    additional_roles: number
    student_code: number
    student_email: number
    student_file: number
    enrollment_number: number
    enrollment_year: number
    year_classification: number
    is_active: number
    current_academic_degree: number
    academic_degree_file: number
    major_id: number
    created_at: number
    contracts: number
    department_id: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    student_id?: true
    user_id?: true
    student_club_id?: true
    enrollment_number?: true
    enrollment_year?: true
    major_id?: true
    department_id?: true
  }

  export type StudentSumAggregateInputType = {
    student_id?: true
    user_id?: true
    student_club_id?: true
    enrollment_number?: true
    enrollment_year?: true
    major_id?: true
    department_id?: true
  }

  export type StudentMinAggregateInputType = {
    student_id?: true
    user_id?: true
    student_club_id?: true
    additional_roles?: true
    student_code?: true
    student_email?: true
    enrollment_number?: true
    enrollment_year?: true
    year_classification?: true
    is_active?: true
    current_academic_degree?: true
    academic_degree_file?: true
    major_id?: true
    created_at?: true
    department_id?: true
  }

  export type StudentMaxAggregateInputType = {
    student_id?: true
    user_id?: true
    student_club_id?: true
    additional_roles?: true
    student_code?: true
    student_email?: true
    enrollment_number?: true
    enrollment_year?: true
    year_classification?: true
    is_active?: true
    current_academic_degree?: true
    academic_degree_file?: true
    major_id?: true
    created_at?: true
    department_id?: true
  }

  export type StudentCountAggregateInputType = {
    student_id?: true
    user_id?: true
    student_club_id?: true
    additional_roles?: true
    student_code?: true
    student_email?: true
    student_file?: true
    enrollment_number?: true
    enrollment_year?: true
    year_classification?: true
    is_active?: true
    current_academic_degree?: true
    academic_degree_file?: true
    major_id?: true
    created_at?: true
    contracts?: true
    department_id?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    student_id: number
    user_id: number
    student_club_id: number | null
    additional_roles: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file: JsonValue | null
    enrollment_number: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file: string | null
    major_id: number
    created_at: Date | null
    contracts: JsonValue | null
    department_id: number | null
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_id?: boolean
    user_id?: boolean
    student_club_id?: boolean
    additional_roles?: boolean
    student_code?: boolean
    student_email?: boolean
    student_file?: boolean
    enrollment_number?: boolean
    enrollment_year?: boolean
    year_classification?: boolean
    is_active?: boolean
    current_academic_degree?: boolean
    academic_degree_file?: boolean
    major_id?: boolean
    created_at?: boolean
    contracts?: boolean
    department_id?: boolean
    auth_user?: boolean | Student$auth_userArgs<ExtArgs>
    major?: boolean | MajorDefaultArgs<ExtArgs>
    student_clubs?: boolean | Student$student_clubsArgs<ExtArgs>
    department?: boolean | Student$departmentArgs<ExtArgs>
    StudentCurriculum?: boolean | Student$StudentCurriculumArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_id?: boolean
    user_id?: boolean
    student_club_id?: boolean
    additional_roles?: boolean
    student_code?: boolean
    student_email?: boolean
    student_file?: boolean
    enrollment_number?: boolean
    enrollment_year?: boolean
    year_classification?: boolean
    is_active?: boolean
    current_academic_degree?: boolean
    academic_degree_file?: boolean
    major_id?: boolean
    created_at?: boolean
    contracts?: boolean
    department_id?: boolean
    auth_user?: boolean | Student$auth_userArgs<ExtArgs>
    major?: boolean | MajorDefaultArgs<ExtArgs>
    student_clubs?: boolean | Student$student_clubsArgs<ExtArgs>
    department?: boolean | Student$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_id?: boolean
    user_id?: boolean
    student_club_id?: boolean
    additional_roles?: boolean
    student_code?: boolean
    student_email?: boolean
    student_file?: boolean
    enrollment_number?: boolean
    enrollment_year?: boolean
    year_classification?: boolean
    is_active?: boolean
    current_academic_degree?: boolean
    academic_degree_file?: boolean
    major_id?: boolean
    created_at?: boolean
    contracts?: boolean
    department_id?: boolean
    auth_user?: boolean | Student$auth_userArgs<ExtArgs>
    major?: boolean | MajorDefaultArgs<ExtArgs>
    student_clubs?: boolean | Student$student_clubsArgs<ExtArgs>
    department?: boolean | Student$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    student_id?: boolean
    user_id?: boolean
    student_club_id?: boolean
    additional_roles?: boolean
    student_code?: boolean
    student_email?: boolean
    student_file?: boolean
    enrollment_number?: boolean
    enrollment_year?: boolean
    year_classification?: boolean
    is_active?: boolean
    current_academic_degree?: boolean
    academic_degree_file?: boolean
    major_id?: boolean
    created_at?: boolean
    contracts?: boolean
    department_id?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"student_id" | "user_id" | "student_club_id" | "additional_roles" | "student_code" | "student_email" | "student_file" | "enrollment_number" | "enrollment_year" | "year_classification" | "is_active" | "current_academic_degree" | "academic_degree_file" | "major_id" | "created_at" | "contracts" | "department_id", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_user?: boolean | Student$auth_userArgs<ExtArgs>
    major?: boolean | MajorDefaultArgs<ExtArgs>
    student_clubs?: boolean | Student$student_clubsArgs<ExtArgs>
    department?: boolean | Student$departmentArgs<ExtArgs>
    StudentCurriculum?: boolean | Student$StudentCurriculumArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_user?: boolean | Student$auth_userArgs<ExtArgs>
    major?: boolean | MajorDefaultArgs<ExtArgs>
    student_clubs?: boolean | Student$student_clubsArgs<ExtArgs>
    department?: boolean | Student$departmentArgs<ExtArgs>
  }
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_user?: boolean | Student$auth_userArgs<ExtArgs>
    major?: boolean | MajorDefaultArgs<ExtArgs>
    student_clubs?: boolean | Student$student_clubsArgs<ExtArgs>
    department?: boolean | Student$departmentArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      auth_user: Prisma.$auth_userPayload<ExtArgs> | null
      major: Prisma.$MajorPayload<ExtArgs>
      student_clubs: Prisma.$StudentClubsPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      StudentCurriculum: Prisma.$StudentCurriculumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      student_id: number
      user_id: number
      student_club_id: number | null
      additional_roles: $Enums.AdditionalRolesEnum
      student_code: string
      student_email: string
      student_file: Prisma.JsonValue | null
      enrollment_number: number
      enrollment_year: number
      year_classification: $Enums.YearClassificationEnum
      is_active: $Enums.StudentIsActiveEnum | null
      current_academic_degree: string
      academic_degree_file: string | null
      major_id: number
      created_at: Date | null
      contracts: Prisma.JsonValue | null
      department_id: number | null
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `student_id`
     * const studentWithStudent_idOnly = await prisma.student.findMany({ select: { student_id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `student_id`
     * const studentWithStudent_idOnly = await prisma.student.createManyAndReturn({
     *   select: { student_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `student_id`
     * const studentWithStudent_idOnly = await prisma.student.updateManyAndReturn({
     *   select: { student_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auth_user<T extends Student$auth_userArgs<ExtArgs> = {}>(args?: Subset<T, Student$auth_userArgs<ExtArgs>>): Prisma__auth_userClient<$Result.GetResult<Prisma.$auth_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    major<T extends MajorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MajorDefaultArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student_clubs<T extends Student$student_clubsArgs<ExtArgs> = {}>(args?: Subset<T, Student$student_clubsArgs<ExtArgs>>): Prisma__StudentClubsClient<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends Student$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Student$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    StudentCurriculum<T extends Student$StudentCurriculumArgs<ExtArgs> = {}>(args?: Subset<T, Student$StudentCurriculumArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly student_id: FieldRef<"Student", 'Int'>
    readonly user_id: FieldRef<"Student", 'Int'>
    readonly student_club_id: FieldRef<"Student", 'Int'>
    readonly additional_roles: FieldRef<"Student", 'AdditionalRolesEnum'>
    readonly student_code: FieldRef<"Student", 'String'>
    readonly student_email: FieldRef<"Student", 'String'>
    readonly student_file: FieldRef<"Student", 'Json'>
    readonly enrollment_number: FieldRef<"Student", 'Int'>
    readonly enrollment_year: FieldRef<"Student", 'Int'>
    readonly year_classification: FieldRef<"Student", 'YearClassificationEnum'>
    readonly is_active: FieldRef<"Student", 'StudentIsActiveEnum'>
    readonly current_academic_degree: FieldRef<"Student", 'String'>
    readonly academic_degree_file: FieldRef<"Student", 'String'>
    readonly major_id: FieldRef<"Student", 'Int'>
    readonly created_at: FieldRef<"Student", 'DateTime'>
    readonly contracts: FieldRef<"Student", 'Json'>
    readonly department_id: FieldRef<"Student", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.auth_user
   */
  export type Student$auth_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth_user
     */
    select?: auth_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth_user
     */
    omit?: auth_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: auth_userInclude<ExtArgs> | null
    where?: auth_userWhereInput
  }

  /**
   * Student.student_clubs
   */
  export type Student$student_clubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    where?: StudentClubsWhereInput
  }

  /**
   * Student.department
   */
  export type Student$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Student.StudentCurriculum
   */
  export type Student$StudentCurriculumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    where?: StudentCurriculumWhereInput
    orderBy?: StudentCurriculumOrderByWithRelationInput | StudentCurriculumOrderByWithRelationInput[]
    cursor?: StudentCurriculumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentCurriculumScalarFieldEnum | StudentCurriculumScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Major
   */

  export type AggregateMajor = {
    _count: MajorCountAggregateOutputType | null
    _avg: MajorAvgAggregateOutputType | null
    _sum: MajorSumAggregateOutputType | null
    _min: MajorMinAggregateOutputType | null
    _max: MajorMaxAggregateOutputType | null
  }

  export type MajorAvgAggregateOutputType = {
    major_id: number | null
    credit_unit_rate: Decimal | null
    major_tuition: Decimal | null
    total_years: number | null
    total_credits_per_year: number | null
    department_of_edu_id: number | null
    exam1: number | null
    exam2: number | null
    department_id: number | null
  }

  export type MajorSumAggregateOutputType = {
    major_id: number | null
    credit_unit_rate: Decimal | null
    major_tuition: Decimal | null
    total_years: number | null
    total_credits_per_year: number | null
    department_of_edu_id: number | null
    exam1: number | null
    exam2: number | null
    department_id: number | null
  }

  export type MajorMinAggregateOutputType = {
    major_id: number | null
    major_name: string | null
    majors_year: Date | null
    majors_type: $Enums.MajorTypeEnum | null
    credit_unit_rate: Decimal | null
    major_tuition: Decimal | null
    academic_degree: string | null
    total_years: number | null
    total_credits_per_year: number | null
    department_of_edu_id: number | null
    created_at: Date | null
    exam1: number | null
    exam2: number | null
    majors_description: string | null
    description_brief: string | null
    qualifications1: string | null
    qualifications2: string | null
    sign_ups: $Enums.SignUpsEnum | null
    department_id: number | null
  }

  export type MajorMaxAggregateOutputType = {
    major_id: number | null
    major_name: string | null
    majors_year: Date | null
    majors_type: $Enums.MajorTypeEnum | null
    credit_unit_rate: Decimal | null
    major_tuition: Decimal | null
    academic_degree: string | null
    total_years: number | null
    total_credits_per_year: number | null
    department_of_edu_id: number | null
    created_at: Date | null
    exam1: number | null
    exam2: number | null
    majors_description: string | null
    description_brief: string | null
    qualifications1: string | null
    qualifications2: string | null
    sign_ups: $Enums.SignUpsEnum | null
    department_id: number | null
  }

  export type MajorCountAggregateOutputType = {
    major_id: number
    major_name: number
    majors_year: number
    majors_type: number
    credit_unit_rate: number
    major_tuition: number
    academic_degree: number
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at: number
    exam1: number
    exam2: number
    majors_description: number
    description_brief: number
    qualifications: number
    qualifications1: number
    qualifications2: number
    sign_ups: number
    department_id: number
    _all: number
  }


  export type MajorAvgAggregateInputType = {
    major_id?: true
    credit_unit_rate?: true
    major_tuition?: true
    total_years?: true
    total_credits_per_year?: true
    department_of_edu_id?: true
    exam1?: true
    exam2?: true
    department_id?: true
  }

  export type MajorSumAggregateInputType = {
    major_id?: true
    credit_unit_rate?: true
    major_tuition?: true
    total_years?: true
    total_credits_per_year?: true
    department_of_edu_id?: true
    exam1?: true
    exam2?: true
    department_id?: true
  }

  export type MajorMinAggregateInputType = {
    major_id?: true
    major_name?: true
    majors_year?: true
    majors_type?: true
    credit_unit_rate?: true
    major_tuition?: true
    academic_degree?: true
    total_years?: true
    total_credits_per_year?: true
    department_of_edu_id?: true
    created_at?: true
    exam1?: true
    exam2?: true
    majors_description?: true
    description_brief?: true
    qualifications1?: true
    qualifications2?: true
    sign_ups?: true
    department_id?: true
  }

  export type MajorMaxAggregateInputType = {
    major_id?: true
    major_name?: true
    majors_year?: true
    majors_type?: true
    credit_unit_rate?: true
    major_tuition?: true
    academic_degree?: true
    total_years?: true
    total_credits_per_year?: true
    department_of_edu_id?: true
    created_at?: true
    exam1?: true
    exam2?: true
    majors_description?: true
    description_brief?: true
    qualifications1?: true
    qualifications2?: true
    sign_ups?: true
    department_id?: true
  }

  export type MajorCountAggregateInputType = {
    major_id?: true
    major_name?: true
    majors_year?: true
    majors_type?: true
    credit_unit_rate?: true
    major_tuition?: true
    academic_degree?: true
    total_years?: true
    total_credits_per_year?: true
    department_of_edu_id?: true
    created_at?: true
    exam1?: true
    exam2?: true
    majors_description?: true
    description_brief?: true
    qualifications?: true
    qualifications1?: true
    qualifications2?: true
    sign_ups?: true
    department_id?: true
    _all?: true
  }

  export type MajorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Major to aggregate.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Majors
    **/
    _count?: true | MajorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MajorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MajorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MajorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MajorMaxAggregateInputType
  }

  export type GetMajorAggregateType<T extends MajorAggregateArgs> = {
        [P in keyof T & keyof AggregateMajor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMajor[P]>
      : GetScalarType<T[P], AggregateMajor[P]>
  }




  export type MajorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MajorWhereInput
    orderBy?: MajorOrderByWithAggregationInput | MajorOrderByWithAggregationInput[]
    by: MajorScalarFieldEnum[] | MajorScalarFieldEnum
    having?: MajorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MajorCountAggregateInputType | true
    _avg?: MajorAvgAggregateInputType
    _sum?: MajorSumAggregateInputType
    _min?: MajorMinAggregateInputType
    _max?: MajorMaxAggregateInputType
  }

  export type MajorGroupByOutputType = {
    major_id: number
    major_name: string
    majors_year: Date
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal
    major_tuition: Decimal
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at: Date | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief: string | null
    qualifications: JsonValue | null
    qualifications1: string | null
    qualifications2: string | null
    sign_ups: $Enums.SignUpsEnum
    department_id: number
    _count: MajorCountAggregateOutputType | null
    _avg: MajorAvgAggregateOutputType | null
    _sum: MajorSumAggregateOutputType | null
    _min: MajorMinAggregateOutputType | null
    _max: MajorMaxAggregateOutputType | null
  }

  type GetMajorGroupByPayload<T extends MajorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MajorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MajorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MajorGroupByOutputType[P]>
            : GetScalarType<T[P], MajorGroupByOutputType[P]>
        }
      >
    >


  export type MajorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    major_id?: boolean
    major_name?: boolean
    majors_year?: boolean
    majors_type?: boolean
    credit_unit_rate?: boolean
    major_tuition?: boolean
    academic_degree?: boolean
    total_years?: boolean
    total_credits_per_year?: boolean
    department_of_edu_id?: boolean
    created_at?: boolean
    exam1?: boolean
    exam2?: boolean
    majors_description?: boolean
    description_brief?: boolean
    qualifications?: boolean
    qualifications1?: boolean
    qualifications2?: boolean
    sign_ups?: boolean
    department_id?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEdu?: boolean | DepartmentDefaultArgs<ExtArgs>
    Courses?: boolean | Major$CoursesArgs<ExtArgs>
    Student?: boolean | Major$StudentArgs<ExtArgs>
    StudentClubs?: boolean | Major$StudentClubsArgs<ExtArgs>
    _count?: boolean | MajorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["major"]>

  export type MajorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    major_id?: boolean
    major_name?: boolean
    majors_year?: boolean
    majors_type?: boolean
    credit_unit_rate?: boolean
    major_tuition?: boolean
    academic_degree?: boolean
    total_years?: boolean
    total_credits_per_year?: boolean
    department_of_edu_id?: boolean
    created_at?: boolean
    exam1?: boolean
    exam2?: boolean
    majors_description?: boolean
    description_brief?: boolean
    qualifications?: boolean
    qualifications1?: boolean
    qualifications2?: boolean
    sign_ups?: boolean
    department_id?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEdu?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["major"]>

  export type MajorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    major_id?: boolean
    major_name?: boolean
    majors_year?: boolean
    majors_type?: boolean
    credit_unit_rate?: boolean
    major_tuition?: boolean
    academic_degree?: boolean
    total_years?: boolean
    total_credits_per_year?: boolean
    department_of_edu_id?: boolean
    created_at?: boolean
    exam1?: boolean
    exam2?: boolean
    majors_description?: boolean
    description_brief?: boolean
    qualifications?: boolean
    qualifications1?: boolean
    qualifications2?: boolean
    sign_ups?: boolean
    department_id?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEdu?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["major"]>

  export type MajorSelectScalar = {
    major_id?: boolean
    major_name?: boolean
    majors_year?: boolean
    majors_type?: boolean
    credit_unit_rate?: boolean
    major_tuition?: boolean
    academic_degree?: boolean
    total_years?: boolean
    total_credits_per_year?: boolean
    department_of_edu_id?: boolean
    created_at?: boolean
    exam1?: boolean
    exam2?: boolean
    majors_description?: boolean
    description_brief?: boolean
    qualifications?: boolean
    qualifications1?: boolean
    qualifications2?: boolean
    sign_ups?: boolean
    department_id?: boolean
  }

  export type MajorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"major_id" | "major_name" | "majors_year" | "majors_type" | "credit_unit_rate" | "major_tuition" | "academic_degree" | "total_years" | "total_credits_per_year" | "department_of_edu_id" | "created_at" | "exam1" | "exam2" | "majors_description" | "description_brief" | "qualifications" | "qualifications1" | "qualifications2" | "sign_ups" | "department_id", ExtArgs["result"]["major"]>
  export type MajorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEdu?: boolean | DepartmentDefaultArgs<ExtArgs>
    Courses?: boolean | Major$CoursesArgs<ExtArgs>
    Student?: boolean | Major$StudentArgs<ExtArgs>
    StudentClubs?: boolean | Major$StudentClubsArgs<ExtArgs>
    _count?: boolean | MajorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MajorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEdu?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type MajorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    departmentOfEdu?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $MajorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Major"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      departmentOfEdu: Prisma.$DepartmentPayload<ExtArgs>
      Courses: Prisma.$CoursesPayload<ExtArgs>[]
      Student: Prisma.$StudentPayload<ExtArgs>[]
      StudentClubs: Prisma.$StudentClubsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      major_id: number
      major_name: string
      majors_year: Date
      majors_type: $Enums.MajorTypeEnum
      credit_unit_rate: Prisma.Decimal
      major_tuition: Prisma.Decimal
      academic_degree: string
      total_years: number
      total_credits_per_year: number
      department_of_edu_id: number
      created_at: Date | null
      exam1: number
      exam2: number
      majors_description: string
      description_brief: string | null
      qualifications: Prisma.JsonValue | null
      qualifications1: string | null
      qualifications2: string | null
      sign_ups: $Enums.SignUpsEnum
      department_id: number
    }, ExtArgs["result"]["major"]>
    composites: {}
  }

  type MajorGetPayload<S extends boolean | null | undefined | MajorDefaultArgs> = $Result.GetResult<Prisma.$MajorPayload, S>

  type MajorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MajorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MajorCountAggregateInputType | true
    }

  export interface MajorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Major'], meta: { name: 'Major' } }
    /**
     * Find zero or one Major that matches the filter.
     * @param {MajorFindUniqueArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MajorFindUniqueArgs>(args: SelectSubset<T, MajorFindUniqueArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Major that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MajorFindUniqueOrThrowArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MajorFindUniqueOrThrowArgs>(args: SelectSubset<T, MajorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Major that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindFirstArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MajorFindFirstArgs>(args?: SelectSubset<T, MajorFindFirstArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Major that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindFirstOrThrowArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MajorFindFirstOrThrowArgs>(args?: SelectSubset<T, MajorFindFirstOrThrowArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Majors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Majors
     * const majors = await prisma.major.findMany()
     * 
     * // Get first 10 Majors
     * const majors = await prisma.major.findMany({ take: 10 })
     * 
     * // Only select the `major_id`
     * const majorWithMajor_idOnly = await prisma.major.findMany({ select: { major_id: true } })
     * 
     */
    findMany<T extends MajorFindManyArgs>(args?: SelectSubset<T, MajorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Major.
     * @param {MajorCreateArgs} args - Arguments to create a Major.
     * @example
     * // Create one Major
     * const Major = await prisma.major.create({
     *   data: {
     *     // ... data to create a Major
     *   }
     * })
     * 
     */
    create<T extends MajorCreateArgs>(args: SelectSubset<T, MajorCreateArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Majors.
     * @param {MajorCreateManyArgs} args - Arguments to create many Majors.
     * @example
     * // Create many Majors
     * const major = await prisma.major.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MajorCreateManyArgs>(args?: SelectSubset<T, MajorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Majors and returns the data saved in the database.
     * @param {MajorCreateManyAndReturnArgs} args - Arguments to create many Majors.
     * @example
     * // Create many Majors
     * const major = await prisma.major.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Majors and only return the `major_id`
     * const majorWithMajor_idOnly = await prisma.major.createManyAndReturn({
     *   select: { major_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MajorCreateManyAndReturnArgs>(args?: SelectSubset<T, MajorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Major.
     * @param {MajorDeleteArgs} args - Arguments to delete one Major.
     * @example
     * // Delete one Major
     * const Major = await prisma.major.delete({
     *   where: {
     *     // ... filter to delete one Major
     *   }
     * })
     * 
     */
    delete<T extends MajorDeleteArgs>(args: SelectSubset<T, MajorDeleteArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Major.
     * @param {MajorUpdateArgs} args - Arguments to update one Major.
     * @example
     * // Update one Major
     * const major = await prisma.major.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MajorUpdateArgs>(args: SelectSubset<T, MajorUpdateArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Majors.
     * @param {MajorDeleteManyArgs} args - Arguments to filter Majors to delete.
     * @example
     * // Delete a few Majors
     * const { count } = await prisma.major.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MajorDeleteManyArgs>(args?: SelectSubset<T, MajorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Majors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Majors
     * const major = await prisma.major.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MajorUpdateManyArgs>(args: SelectSubset<T, MajorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Majors and returns the data updated in the database.
     * @param {MajorUpdateManyAndReturnArgs} args - Arguments to update many Majors.
     * @example
     * // Update many Majors
     * const major = await prisma.major.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Majors and only return the `major_id`
     * const majorWithMajor_idOnly = await prisma.major.updateManyAndReturn({
     *   select: { major_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MajorUpdateManyAndReturnArgs>(args: SelectSubset<T, MajorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Major.
     * @param {MajorUpsertArgs} args - Arguments to update or create a Major.
     * @example
     * // Update or create a Major
     * const major = await prisma.major.upsert({
     *   create: {
     *     // ... data to create a Major
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Major we want to update
     *   }
     * })
     */
    upsert<T extends MajorUpsertArgs>(args: SelectSubset<T, MajorUpsertArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Majors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorCountArgs} args - Arguments to filter Majors to count.
     * @example
     * // Count the number of Majors
     * const count = await prisma.major.count({
     *   where: {
     *     // ... the filter for the Majors we want to count
     *   }
     * })
    **/
    count<T extends MajorCountArgs>(
      args?: Subset<T, MajorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MajorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Major.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MajorAggregateArgs>(args: Subset<T, MajorAggregateArgs>): Prisma.PrismaPromise<GetMajorAggregateType<T>>

    /**
     * Group by Major.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MajorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MajorGroupByArgs['orderBy'] }
        : { orderBy?: MajorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MajorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMajorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Major model
   */
  readonly fields: MajorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Major.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MajorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    departmentOfEdu<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Courses<T extends Major$CoursesArgs<ExtArgs> = {}>(args?: Subset<T, Major$CoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Student<T extends Major$StudentArgs<ExtArgs> = {}>(args?: Subset<T, Major$StudentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StudentClubs<T extends Major$StudentClubsArgs<ExtArgs> = {}>(args?: Subset<T, Major$StudentClubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClubsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Major model
   */
  interface MajorFieldRefs {
    readonly major_id: FieldRef<"Major", 'Int'>
    readonly major_name: FieldRef<"Major", 'String'>
    readonly majors_year: FieldRef<"Major", 'DateTime'>
    readonly majors_type: FieldRef<"Major", 'MajorTypeEnum'>
    readonly credit_unit_rate: FieldRef<"Major", 'Decimal'>
    readonly major_tuition: FieldRef<"Major", 'Decimal'>
    readonly academic_degree: FieldRef<"Major", 'String'>
    readonly total_years: FieldRef<"Major", 'Int'>
    readonly total_credits_per_year: FieldRef<"Major", 'Int'>
    readonly department_of_edu_id: FieldRef<"Major", 'Int'>
    readonly created_at: FieldRef<"Major", 'DateTime'>
    readonly exam1: FieldRef<"Major", 'Float'>
    readonly exam2: FieldRef<"Major", 'Float'>
    readonly majors_description: FieldRef<"Major", 'String'>
    readonly description_brief: FieldRef<"Major", 'String'>
    readonly qualifications: FieldRef<"Major", 'Json'>
    readonly qualifications1: FieldRef<"Major", 'String'>
    readonly qualifications2: FieldRef<"Major", 'String'>
    readonly sign_ups: FieldRef<"Major", 'SignUpsEnum'>
    readonly department_id: FieldRef<"Major", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Major findUnique
   */
  export type MajorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major findUniqueOrThrow
   */
  export type MajorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major findFirst
   */
  export type MajorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Majors.
     */
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major findFirstOrThrow
   */
  export type MajorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Majors.
     */
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major findMany
   */
  export type MajorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Majors to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major create
   */
  export type MajorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The data needed to create a Major.
     */
    data: XOR<MajorCreateInput, MajorUncheckedCreateInput>
  }

  /**
   * Major createMany
   */
  export type MajorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Majors.
     */
    data: MajorCreateManyInput | MajorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Major createManyAndReturn
   */
  export type MajorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * The data used to create many Majors.
     */
    data: MajorCreateManyInput | MajorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Major update
   */
  export type MajorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The data needed to update a Major.
     */
    data: XOR<MajorUpdateInput, MajorUncheckedUpdateInput>
    /**
     * Choose, which Major to update.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major updateMany
   */
  export type MajorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Majors.
     */
    data: XOR<MajorUpdateManyMutationInput, MajorUncheckedUpdateManyInput>
    /**
     * Filter which Majors to update
     */
    where?: MajorWhereInput
    /**
     * Limit how many Majors to update.
     */
    limit?: number
  }

  /**
   * Major updateManyAndReturn
   */
  export type MajorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * The data used to update Majors.
     */
    data: XOR<MajorUpdateManyMutationInput, MajorUncheckedUpdateManyInput>
    /**
     * Filter which Majors to update
     */
    where?: MajorWhereInput
    /**
     * Limit how many Majors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Major upsert
   */
  export type MajorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The filter to search for the Major to update in case it exists.
     */
    where: MajorWhereUniqueInput
    /**
     * In case the Major found by the `where` argument doesn't exist, create a new Major with this data.
     */
    create: XOR<MajorCreateInput, MajorUncheckedCreateInput>
    /**
     * In case the Major was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MajorUpdateInput, MajorUncheckedUpdateInput>
  }

  /**
   * Major delete
   */
  export type MajorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter which Major to delete.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major deleteMany
   */
  export type MajorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Majors to delete
     */
    where?: MajorWhereInput
    /**
     * Limit how many Majors to delete.
     */
    limit?: number
  }

  /**
   * Major.Courses
   */
  export type Major$CoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    where?: CoursesWhereInput
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    cursor?: CoursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Major.Student
   */
  export type Major$StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Major.StudentClubs
   */
  export type Major$StudentClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClubs
     */
    select?: StudentClubsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClubs
     */
    omit?: StudentClubsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClubsInclude<ExtArgs> | null
    where?: StudentClubsWhereInput
    orderBy?: StudentClubsOrderByWithRelationInput | StudentClubsOrderByWithRelationInput[]
    cursor?: StudentClubsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentClubsScalarFieldEnum | StudentClubsScalarFieldEnum[]
  }

  /**
   * Major without action
   */
  export type MajorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
  }


  /**
   * Model DepartmentsOfEducation
   */

  export type AggregateDepartmentsOfEducation = {
    _count: DepartmentsOfEducationCountAggregateOutputType | null
    _avg: DepartmentsOfEducationAvgAggregateOutputType | null
    _sum: DepartmentsOfEducationSumAggregateOutputType | null
    _min: DepartmentsOfEducationMinAggregateOutputType | null
    _max: DepartmentsOfEducationMaxAggregateOutputType | null
  }

  export type DepartmentsOfEducationAvgAggregateOutputType = {
    departmentsOfEducationId: number | null
  }

  export type DepartmentsOfEducationSumAggregateOutputType = {
    departmentsOfEducationId: number | null
  }

  export type DepartmentsOfEducationMinAggregateOutputType = {
    departmentsOfEducationId: number | null
    edDepartmentName: string | null
    edDepartmentCode: string | null
  }

  export type DepartmentsOfEducationMaxAggregateOutputType = {
    departmentsOfEducationId: number | null
    edDepartmentName: string | null
    edDepartmentCode: string | null
  }

  export type DepartmentsOfEducationCountAggregateOutputType = {
    departmentsOfEducationId: number
    edDepartmentName: number
    edDepartmentCode: number
    teachers: number
    _all: number
  }


  export type DepartmentsOfEducationAvgAggregateInputType = {
    departmentsOfEducationId?: true
  }

  export type DepartmentsOfEducationSumAggregateInputType = {
    departmentsOfEducationId?: true
  }

  export type DepartmentsOfEducationMinAggregateInputType = {
    departmentsOfEducationId?: true
    edDepartmentName?: true
    edDepartmentCode?: true
  }

  export type DepartmentsOfEducationMaxAggregateInputType = {
    departmentsOfEducationId?: true
    edDepartmentName?: true
    edDepartmentCode?: true
  }

  export type DepartmentsOfEducationCountAggregateInputType = {
    departmentsOfEducationId?: true
    edDepartmentName?: true
    edDepartmentCode?: true
    teachers?: true
    _all?: true
  }

  export type DepartmentsOfEducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentsOfEducation to aggregate.
     */
    where?: DepartmentsOfEducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentsOfEducations to fetch.
     */
    orderBy?: DepartmentsOfEducationOrderByWithRelationInput | DepartmentsOfEducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentsOfEducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentsOfEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentsOfEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepartmentsOfEducations
    **/
    _count?: true | DepartmentsOfEducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentsOfEducationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentsOfEducationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentsOfEducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentsOfEducationMaxAggregateInputType
  }

  export type GetDepartmentsOfEducationAggregateType<T extends DepartmentsOfEducationAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartmentsOfEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartmentsOfEducation[P]>
      : GetScalarType<T[P], AggregateDepartmentsOfEducation[P]>
  }




  export type DepartmentsOfEducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentsOfEducationWhereInput
    orderBy?: DepartmentsOfEducationOrderByWithAggregationInput | DepartmentsOfEducationOrderByWithAggregationInput[]
    by: DepartmentsOfEducationScalarFieldEnum[] | DepartmentsOfEducationScalarFieldEnum
    having?: DepartmentsOfEducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentsOfEducationCountAggregateInputType | true
    _avg?: DepartmentsOfEducationAvgAggregateInputType
    _sum?: DepartmentsOfEducationSumAggregateInputType
    _min?: DepartmentsOfEducationMinAggregateInputType
    _max?: DepartmentsOfEducationMaxAggregateInputType
  }

  export type DepartmentsOfEducationGroupByOutputType = {
    departmentsOfEducationId: number
    edDepartmentName: string
    edDepartmentCode: string
    teachers: JsonValue | null
    _count: DepartmentsOfEducationCountAggregateOutputType | null
    _avg: DepartmentsOfEducationAvgAggregateOutputType | null
    _sum: DepartmentsOfEducationSumAggregateOutputType | null
    _min: DepartmentsOfEducationMinAggregateOutputType | null
    _max: DepartmentsOfEducationMaxAggregateOutputType | null
  }

  type GetDepartmentsOfEducationGroupByPayload<T extends DepartmentsOfEducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentsOfEducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentsOfEducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentsOfEducationGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentsOfEducationGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentsOfEducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    departmentsOfEducationId?: boolean
    edDepartmentName?: boolean
    edDepartmentCode?: boolean
    teachers?: boolean
    Classrooms?: boolean | DepartmentsOfEducation$ClassroomsArgs<ExtArgs>
    Teacher?: boolean | DepartmentsOfEducation$TeacherArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | DepartmentsOfEducation$TeachersCoursePlanningArgs<ExtArgs>
    TeachersMajorPlanning?: boolean | DepartmentsOfEducation$TeachersMajorPlanningArgs<ExtArgs>
    Department?: boolean | DepartmentsOfEducation$DepartmentArgs<ExtArgs>
    _count?: boolean | DepartmentsOfEducationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentsOfEducation"]>

  export type DepartmentsOfEducationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    departmentsOfEducationId?: boolean
    edDepartmentName?: boolean
    edDepartmentCode?: boolean
    teachers?: boolean
  }, ExtArgs["result"]["departmentsOfEducation"]>

  export type DepartmentsOfEducationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    departmentsOfEducationId?: boolean
    edDepartmentName?: boolean
    edDepartmentCode?: boolean
    teachers?: boolean
  }, ExtArgs["result"]["departmentsOfEducation"]>

  export type DepartmentsOfEducationSelectScalar = {
    departmentsOfEducationId?: boolean
    edDepartmentName?: boolean
    edDepartmentCode?: boolean
    teachers?: boolean
  }

  export type DepartmentsOfEducationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"departmentsOfEducationId" | "edDepartmentName" | "edDepartmentCode" | "teachers", ExtArgs["result"]["departmentsOfEducation"]>
  export type DepartmentsOfEducationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Classrooms?: boolean | DepartmentsOfEducation$ClassroomsArgs<ExtArgs>
    Teacher?: boolean | DepartmentsOfEducation$TeacherArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | DepartmentsOfEducation$TeachersCoursePlanningArgs<ExtArgs>
    TeachersMajorPlanning?: boolean | DepartmentsOfEducation$TeachersMajorPlanningArgs<ExtArgs>
    Department?: boolean | DepartmentsOfEducation$DepartmentArgs<ExtArgs>
    _count?: boolean | DepartmentsOfEducationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentsOfEducationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DepartmentsOfEducationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DepartmentsOfEducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepartmentsOfEducation"
    objects: {
      Classrooms: Prisma.$ClassroomsPayload<ExtArgs>[]
      Teacher: Prisma.$TeacherPayload<ExtArgs>[]
      TeachersCoursePlanning: Prisma.$TeachersCoursePlanningPayload<ExtArgs>[]
      TeachersMajorPlanning: Prisma.$TeachersMajorPlanningPayload<ExtArgs>[]
      Department: Prisma.$DepartmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      departmentsOfEducationId: number
      edDepartmentName: string
      edDepartmentCode: string
      teachers: Prisma.JsonValue | null
    }, ExtArgs["result"]["departmentsOfEducation"]>
    composites: {}
  }

  type DepartmentsOfEducationGetPayload<S extends boolean | null | undefined | DepartmentsOfEducationDefaultArgs> = $Result.GetResult<Prisma.$DepartmentsOfEducationPayload, S>

  type DepartmentsOfEducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentsOfEducationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentsOfEducationCountAggregateInputType | true
    }

  export interface DepartmentsOfEducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepartmentsOfEducation'], meta: { name: 'DepartmentsOfEducation' } }
    /**
     * Find zero or one DepartmentsOfEducation that matches the filter.
     * @param {DepartmentsOfEducationFindUniqueArgs} args - Arguments to find a DepartmentsOfEducation
     * @example
     * // Get one DepartmentsOfEducation
     * const departmentsOfEducation = await prisma.departmentsOfEducation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentsOfEducationFindUniqueArgs>(args: SelectSubset<T, DepartmentsOfEducationFindUniqueArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DepartmentsOfEducation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentsOfEducationFindUniqueOrThrowArgs} args - Arguments to find a DepartmentsOfEducation
     * @example
     * // Get one DepartmentsOfEducation
     * const departmentsOfEducation = await prisma.departmentsOfEducation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentsOfEducationFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentsOfEducationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentsOfEducation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsOfEducationFindFirstArgs} args - Arguments to find a DepartmentsOfEducation
     * @example
     * // Get one DepartmentsOfEducation
     * const departmentsOfEducation = await prisma.departmentsOfEducation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentsOfEducationFindFirstArgs>(args?: SelectSubset<T, DepartmentsOfEducationFindFirstArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentsOfEducation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsOfEducationFindFirstOrThrowArgs} args - Arguments to find a DepartmentsOfEducation
     * @example
     * // Get one DepartmentsOfEducation
     * const departmentsOfEducation = await prisma.departmentsOfEducation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentsOfEducationFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentsOfEducationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DepartmentsOfEducations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsOfEducationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepartmentsOfEducations
     * const departmentsOfEducations = await prisma.departmentsOfEducation.findMany()
     * 
     * // Get first 10 DepartmentsOfEducations
     * const departmentsOfEducations = await prisma.departmentsOfEducation.findMany({ take: 10 })
     * 
     * // Only select the `departmentsOfEducationId`
     * const departmentsOfEducationWithDepartmentsOfEducationIdOnly = await prisma.departmentsOfEducation.findMany({ select: { departmentsOfEducationId: true } })
     * 
     */
    findMany<T extends DepartmentsOfEducationFindManyArgs>(args?: SelectSubset<T, DepartmentsOfEducationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DepartmentsOfEducation.
     * @param {DepartmentsOfEducationCreateArgs} args - Arguments to create a DepartmentsOfEducation.
     * @example
     * // Create one DepartmentsOfEducation
     * const DepartmentsOfEducation = await prisma.departmentsOfEducation.create({
     *   data: {
     *     // ... data to create a DepartmentsOfEducation
     *   }
     * })
     * 
     */
    create<T extends DepartmentsOfEducationCreateArgs>(args: SelectSubset<T, DepartmentsOfEducationCreateArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DepartmentsOfEducations.
     * @param {DepartmentsOfEducationCreateManyArgs} args - Arguments to create many DepartmentsOfEducations.
     * @example
     * // Create many DepartmentsOfEducations
     * const departmentsOfEducation = await prisma.departmentsOfEducation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentsOfEducationCreateManyArgs>(args?: SelectSubset<T, DepartmentsOfEducationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepartmentsOfEducations and returns the data saved in the database.
     * @param {DepartmentsOfEducationCreateManyAndReturnArgs} args - Arguments to create many DepartmentsOfEducations.
     * @example
     * // Create many DepartmentsOfEducations
     * const departmentsOfEducation = await prisma.departmentsOfEducation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepartmentsOfEducations and only return the `departmentsOfEducationId`
     * const departmentsOfEducationWithDepartmentsOfEducationIdOnly = await prisma.departmentsOfEducation.createManyAndReturn({
     *   select: { departmentsOfEducationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentsOfEducationCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentsOfEducationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DepartmentsOfEducation.
     * @param {DepartmentsOfEducationDeleteArgs} args - Arguments to delete one DepartmentsOfEducation.
     * @example
     * // Delete one DepartmentsOfEducation
     * const DepartmentsOfEducation = await prisma.departmentsOfEducation.delete({
     *   where: {
     *     // ... filter to delete one DepartmentsOfEducation
     *   }
     * })
     * 
     */
    delete<T extends DepartmentsOfEducationDeleteArgs>(args: SelectSubset<T, DepartmentsOfEducationDeleteArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DepartmentsOfEducation.
     * @param {DepartmentsOfEducationUpdateArgs} args - Arguments to update one DepartmentsOfEducation.
     * @example
     * // Update one DepartmentsOfEducation
     * const departmentsOfEducation = await prisma.departmentsOfEducation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentsOfEducationUpdateArgs>(args: SelectSubset<T, DepartmentsOfEducationUpdateArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DepartmentsOfEducations.
     * @param {DepartmentsOfEducationDeleteManyArgs} args - Arguments to filter DepartmentsOfEducations to delete.
     * @example
     * // Delete a few DepartmentsOfEducations
     * const { count } = await prisma.departmentsOfEducation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentsOfEducationDeleteManyArgs>(args?: SelectSubset<T, DepartmentsOfEducationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentsOfEducations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsOfEducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepartmentsOfEducations
     * const departmentsOfEducation = await prisma.departmentsOfEducation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentsOfEducationUpdateManyArgs>(args: SelectSubset<T, DepartmentsOfEducationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentsOfEducations and returns the data updated in the database.
     * @param {DepartmentsOfEducationUpdateManyAndReturnArgs} args - Arguments to update many DepartmentsOfEducations.
     * @example
     * // Update many DepartmentsOfEducations
     * const departmentsOfEducation = await prisma.departmentsOfEducation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DepartmentsOfEducations and only return the `departmentsOfEducationId`
     * const departmentsOfEducationWithDepartmentsOfEducationIdOnly = await prisma.departmentsOfEducation.updateManyAndReturn({
     *   select: { departmentsOfEducationId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentsOfEducationUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentsOfEducationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DepartmentsOfEducation.
     * @param {DepartmentsOfEducationUpsertArgs} args - Arguments to update or create a DepartmentsOfEducation.
     * @example
     * // Update or create a DepartmentsOfEducation
     * const departmentsOfEducation = await prisma.departmentsOfEducation.upsert({
     *   create: {
     *     // ... data to create a DepartmentsOfEducation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepartmentsOfEducation we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentsOfEducationUpsertArgs>(args: SelectSubset<T, DepartmentsOfEducationUpsertArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DepartmentsOfEducations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsOfEducationCountArgs} args - Arguments to filter DepartmentsOfEducations to count.
     * @example
     * // Count the number of DepartmentsOfEducations
     * const count = await prisma.departmentsOfEducation.count({
     *   where: {
     *     // ... the filter for the DepartmentsOfEducations we want to count
     *   }
     * })
    **/
    count<T extends DepartmentsOfEducationCountArgs>(
      args?: Subset<T, DepartmentsOfEducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentsOfEducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepartmentsOfEducation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsOfEducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentsOfEducationAggregateArgs>(args: Subset<T, DepartmentsOfEducationAggregateArgs>): Prisma.PrismaPromise<GetDepartmentsOfEducationAggregateType<T>>

    /**
     * Group by DepartmentsOfEducation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsOfEducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentsOfEducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentsOfEducationGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentsOfEducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentsOfEducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentsOfEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepartmentsOfEducation model
   */
  readonly fields: DepartmentsOfEducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepartmentsOfEducation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentsOfEducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Classrooms<T extends DepartmentsOfEducation$ClassroomsArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducation$ClassroomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Teacher<T extends DepartmentsOfEducation$TeacherArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducation$TeacherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeachersCoursePlanning<T extends DepartmentsOfEducation$TeachersCoursePlanningArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducation$TeachersCoursePlanningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeachersMajorPlanning<T extends DepartmentsOfEducation$TeachersMajorPlanningArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducation$TeachersMajorPlanningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Department<T extends DepartmentsOfEducation$DepartmentArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducation$DepartmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepartmentsOfEducation model
   */
  interface DepartmentsOfEducationFieldRefs {
    readonly departmentsOfEducationId: FieldRef<"DepartmentsOfEducation", 'Int'>
    readonly edDepartmentName: FieldRef<"DepartmentsOfEducation", 'String'>
    readonly edDepartmentCode: FieldRef<"DepartmentsOfEducation", 'String'>
    readonly teachers: FieldRef<"DepartmentsOfEducation", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * DepartmentsOfEducation findUnique
   */
  export type DepartmentsOfEducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentsOfEducation to fetch.
     */
    where: DepartmentsOfEducationWhereUniqueInput
  }

  /**
   * DepartmentsOfEducation findUniqueOrThrow
   */
  export type DepartmentsOfEducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentsOfEducation to fetch.
     */
    where: DepartmentsOfEducationWhereUniqueInput
  }

  /**
   * DepartmentsOfEducation findFirst
   */
  export type DepartmentsOfEducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentsOfEducation to fetch.
     */
    where?: DepartmentsOfEducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentsOfEducations to fetch.
     */
    orderBy?: DepartmentsOfEducationOrderByWithRelationInput | DepartmentsOfEducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentsOfEducations.
     */
    cursor?: DepartmentsOfEducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentsOfEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentsOfEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentsOfEducations.
     */
    distinct?: DepartmentsOfEducationScalarFieldEnum | DepartmentsOfEducationScalarFieldEnum[]
  }

  /**
   * DepartmentsOfEducation findFirstOrThrow
   */
  export type DepartmentsOfEducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentsOfEducation to fetch.
     */
    where?: DepartmentsOfEducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentsOfEducations to fetch.
     */
    orderBy?: DepartmentsOfEducationOrderByWithRelationInput | DepartmentsOfEducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentsOfEducations.
     */
    cursor?: DepartmentsOfEducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentsOfEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentsOfEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentsOfEducations.
     */
    distinct?: DepartmentsOfEducationScalarFieldEnum | DepartmentsOfEducationScalarFieldEnum[]
  }

  /**
   * DepartmentsOfEducation findMany
   */
  export type DepartmentsOfEducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentsOfEducations to fetch.
     */
    where?: DepartmentsOfEducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentsOfEducations to fetch.
     */
    orderBy?: DepartmentsOfEducationOrderByWithRelationInput | DepartmentsOfEducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepartmentsOfEducations.
     */
    cursor?: DepartmentsOfEducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentsOfEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentsOfEducations.
     */
    skip?: number
    distinct?: DepartmentsOfEducationScalarFieldEnum | DepartmentsOfEducationScalarFieldEnum[]
  }

  /**
   * DepartmentsOfEducation create
   */
  export type DepartmentsOfEducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * The data needed to create a DepartmentsOfEducation.
     */
    data: XOR<DepartmentsOfEducationCreateInput, DepartmentsOfEducationUncheckedCreateInput>
  }

  /**
   * DepartmentsOfEducation createMany
   */
  export type DepartmentsOfEducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepartmentsOfEducations.
     */
    data: DepartmentsOfEducationCreateManyInput | DepartmentsOfEducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepartmentsOfEducation createManyAndReturn
   */
  export type DepartmentsOfEducationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * The data used to create many DepartmentsOfEducations.
     */
    data: DepartmentsOfEducationCreateManyInput | DepartmentsOfEducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepartmentsOfEducation update
   */
  export type DepartmentsOfEducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * The data needed to update a DepartmentsOfEducation.
     */
    data: XOR<DepartmentsOfEducationUpdateInput, DepartmentsOfEducationUncheckedUpdateInput>
    /**
     * Choose, which DepartmentsOfEducation to update.
     */
    where: DepartmentsOfEducationWhereUniqueInput
  }

  /**
   * DepartmentsOfEducation updateMany
   */
  export type DepartmentsOfEducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepartmentsOfEducations.
     */
    data: XOR<DepartmentsOfEducationUpdateManyMutationInput, DepartmentsOfEducationUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentsOfEducations to update
     */
    where?: DepartmentsOfEducationWhereInput
    /**
     * Limit how many DepartmentsOfEducations to update.
     */
    limit?: number
  }

  /**
   * DepartmentsOfEducation updateManyAndReturn
   */
  export type DepartmentsOfEducationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * The data used to update DepartmentsOfEducations.
     */
    data: XOR<DepartmentsOfEducationUpdateManyMutationInput, DepartmentsOfEducationUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentsOfEducations to update
     */
    where?: DepartmentsOfEducationWhereInput
    /**
     * Limit how many DepartmentsOfEducations to update.
     */
    limit?: number
  }

  /**
   * DepartmentsOfEducation upsert
   */
  export type DepartmentsOfEducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * The filter to search for the DepartmentsOfEducation to update in case it exists.
     */
    where: DepartmentsOfEducationWhereUniqueInput
    /**
     * In case the DepartmentsOfEducation found by the `where` argument doesn't exist, create a new DepartmentsOfEducation with this data.
     */
    create: XOR<DepartmentsOfEducationCreateInput, DepartmentsOfEducationUncheckedCreateInput>
    /**
     * In case the DepartmentsOfEducation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentsOfEducationUpdateInput, DepartmentsOfEducationUncheckedUpdateInput>
  }

  /**
   * DepartmentsOfEducation delete
   */
  export type DepartmentsOfEducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
    /**
     * Filter which DepartmentsOfEducation to delete.
     */
    where: DepartmentsOfEducationWhereUniqueInput
  }

  /**
   * DepartmentsOfEducation deleteMany
   */
  export type DepartmentsOfEducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentsOfEducations to delete
     */
    where?: DepartmentsOfEducationWhereInput
    /**
     * Limit how many DepartmentsOfEducations to delete.
     */
    limit?: number
  }

  /**
   * DepartmentsOfEducation.Classrooms
   */
  export type DepartmentsOfEducation$ClassroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    where?: ClassroomsWhereInput
    orderBy?: ClassroomsOrderByWithRelationInput | ClassroomsOrderByWithRelationInput[]
    cursor?: ClassroomsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * DepartmentsOfEducation.Teacher
   */
  export type DepartmentsOfEducation$TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * DepartmentsOfEducation.TeachersCoursePlanning
   */
  export type DepartmentsOfEducation$TeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    where?: TeachersCoursePlanningWhereInput
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    cursor?: TeachersCoursePlanningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersCoursePlanningScalarFieldEnum | TeachersCoursePlanningScalarFieldEnum[]
  }

  /**
   * DepartmentsOfEducation.TeachersMajorPlanning
   */
  export type DepartmentsOfEducation$TeachersMajorPlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    where?: TeachersMajorPlanningWhereInput
    orderBy?: TeachersMajorPlanningOrderByWithRelationInput | TeachersMajorPlanningOrderByWithRelationInput[]
    cursor?: TeachersMajorPlanningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersMajorPlanningScalarFieldEnum | TeachersMajorPlanningScalarFieldEnum[]
  }

  /**
   * DepartmentsOfEducation.Department
   */
  export type DepartmentsOfEducation$DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * DepartmentsOfEducation without action
   */
  export type DepartmentsOfEducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsOfEducation
     */
    select?: DepartmentsOfEducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentsOfEducation
     */
    omit?: DepartmentsOfEducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsOfEducationInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    department_id: number | null
    number_of_staff: number | null
    department_of_edu_id: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    department_id: number | null
    number_of_staff: number | null
    department_of_edu_id: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    department_id: number | null
    department_name: string | null
    department_code: string | null
    department_email: string | null
    number_of_staff: number | null
    logo: string | null
    created_at: Date | null
    department_of_edu_id: number | null
  }

  export type DepartmentMaxAggregateOutputType = {
    department_id: number | null
    department_name: string | null
    department_code: string | null
    department_email: string | null
    number_of_staff: number | null
    logo: string | null
    created_at: Date | null
    department_of_edu_id: number | null
  }

  export type DepartmentCountAggregateOutputType = {
    department_id: number
    department_name: number
    department_code: number
    department_email: number
    number_of_staff: number
    logo: number
    created_at: number
    department_of_edu_id: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    department_id?: true
    number_of_staff?: true
    department_of_edu_id?: true
  }

  export type DepartmentSumAggregateInputType = {
    department_id?: true
    number_of_staff?: true
    department_of_edu_id?: true
  }

  export type DepartmentMinAggregateInputType = {
    department_id?: true
    department_name?: true
    department_code?: true
    department_email?: true
    number_of_staff?: true
    logo?: true
    created_at?: true
    department_of_edu_id?: true
  }

  export type DepartmentMaxAggregateInputType = {
    department_id?: true
    department_name?: true
    department_code?: true
    department_email?: true
    number_of_staff?: true
    logo?: true
    created_at?: true
    department_of_edu_id?: true
  }

  export type DepartmentCountAggregateInputType = {
    department_id?: true
    department_name?: true
    department_code?: true
    department_email?: true
    number_of_staff?: true
    logo?: true
    created_at?: true
    department_of_edu_id?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    department_id: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff: number | null
    logo: string
    created_at: Date | null
    department_of_edu_id: number
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    department_id?: boolean
    department_name?: boolean
    department_code?: boolean
    department_email?: boolean
    number_of_staff?: boolean
    logo?: boolean
    created_at?: boolean
    department_of_edu_id?: boolean
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    Classrooms?: boolean | Department$ClassroomsArgs<ExtArgs>
    Courses?: boolean | Department$CoursesArgs<ExtArgs>
    majors?: boolean | Department$majorsArgs<ExtArgs>
    majorsOfEducation?: boolean | Department$majorsOfEducationArgs<ExtArgs>
    Student?: boolean | Department$StudentArgs<ExtArgs>
    Teacher?: boolean | Department$TeacherArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | Department$TeachersCoursePlanningArgs<ExtArgs>
    TeachersMajorPlanning?: boolean | Department$TeachersMajorPlanningArgs<ExtArgs>
    teacherSchedules?: boolean | Department$teacherSchedulesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    department_id?: boolean
    department_name?: boolean
    department_code?: boolean
    department_email?: boolean
    number_of_staff?: boolean
    logo?: boolean
    created_at?: boolean
    department_of_edu_id?: boolean
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    department_id?: boolean
    department_name?: boolean
    department_code?: boolean
    department_email?: boolean
    number_of_staff?: boolean
    logo?: boolean
    created_at?: boolean
    department_of_edu_id?: boolean
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    department_id?: boolean
    department_name?: boolean
    department_code?: boolean
    department_email?: boolean
    number_of_staff?: boolean
    logo?: boolean
    created_at?: boolean
    department_of_edu_id?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"department_id" | "department_name" | "department_code" | "department_email" | "number_of_staff" | "logo" | "created_at" | "department_of_edu_id", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
    Classrooms?: boolean | Department$ClassroomsArgs<ExtArgs>
    Courses?: boolean | Department$CoursesArgs<ExtArgs>
    majors?: boolean | Department$majorsArgs<ExtArgs>
    majorsOfEducation?: boolean | Department$majorsOfEducationArgs<ExtArgs>
    Student?: boolean | Department$StudentArgs<ExtArgs>
    Teacher?: boolean | Department$TeacherArgs<ExtArgs>
    TeachersCoursePlanning?: boolean | Department$TeachersCoursePlanningArgs<ExtArgs>
    TeachersMajorPlanning?: boolean | Department$TeachersMajorPlanningArgs<ExtArgs>
    teacherSchedules?: boolean | Department$teacherSchedulesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentOfEducation?: boolean | DepartmentsOfEducationDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      departmentOfEducation: Prisma.$DepartmentsOfEducationPayload<ExtArgs>
      Classrooms: Prisma.$ClassroomsPayload<ExtArgs>[]
      Courses: Prisma.$CoursesPayload<ExtArgs>[]
      majors: Prisma.$MajorPayload<ExtArgs>[]
      majorsOfEducation: Prisma.$MajorPayload<ExtArgs>[]
      Student: Prisma.$StudentPayload<ExtArgs>[]
      Teacher: Prisma.$TeacherPayload<ExtArgs>[]
      TeachersCoursePlanning: Prisma.$TeachersCoursePlanningPayload<ExtArgs>[]
      TeachersMajorPlanning: Prisma.$TeachersMajorPlanningPayload<ExtArgs>[]
      teacherSchedules: Prisma.$TeacherSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      department_id: number
      department_name: string
      department_code: string
      department_email: string
      number_of_staff: number | null
      logo: string
      created_at: Date | null
      department_of_edu_id: number
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `department_id`
     * const departmentWithDepartment_idOnly = await prisma.department.findMany({ select: { department_id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `department_id`
     * const departmentWithDepartment_idOnly = await prisma.department.createManyAndReturn({
     *   select: { department_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `department_id`
     * const departmentWithDepartment_idOnly = await prisma.department.updateManyAndReturn({
     *   select: { department_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departmentOfEducation<T extends DepartmentsOfEducationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsOfEducationDefaultArgs<ExtArgs>>): Prisma__DepartmentsOfEducationClient<$Result.GetResult<Prisma.$DepartmentsOfEducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Classrooms<T extends Department$ClassroomsArgs<ExtArgs> = {}>(args?: Subset<T, Department$ClassroomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Courses<T extends Department$CoursesArgs<ExtArgs> = {}>(args?: Subset<T, Department$CoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    majors<T extends Department$majorsArgs<ExtArgs> = {}>(args?: Subset<T, Department$majorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    majorsOfEducation<T extends Department$majorsOfEducationArgs<ExtArgs> = {}>(args?: Subset<T, Department$majorsOfEducationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Student<T extends Department$StudentArgs<ExtArgs> = {}>(args?: Subset<T, Department$StudentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Teacher<T extends Department$TeacherArgs<ExtArgs> = {}>(args?: Subset<T, Department$TeacherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeachersCoursePlanning<T extends Department$TeachersCoursePlanningArgs<ExtArgs> = {}>(args?: Subset<T, Department$TeachersCoursePlanningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersCoursePlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeachersMajorPlanning<T extends Department$TeachersMajorPlanningArgs<ExtArgs> = {}>(args?: Subset<T, Department$TeachersMajorPlanningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersMajorPlanningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teacherSchedules<T extends Department$teacherSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Department$teacherSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly department_id: FieldRef<"Department", 'Int'>
    readonly department_name: FieldRef<"Department", 'String'>
    readonly department_code: FieldRef<"Department", 'String'>
    readonly department_email: FieldRef<"Department", 'String'>
    readonly number_of_staff: FieldRef<"Department", 'Int'>
    readonly logo: FieldRef<"Department", 'String'>
    readonly created_at: FieldRef<"Department", 'DateTime'>
    readonly department_of_edu_id: FieldRef<"Department", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.Classrooms
   */
  export type Department$ClassroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classrooms
     */
    select?: ClassroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Classrooms
     */
    omit?: ClassroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomsInclude<ExtArgs> | null
    where?: ClassroomsWhereInput
    orderBy?: ClassroomsOrderByWithRelationInput | ClassroomsOrderByWithRelationInput[]
    cursor?: ClassroomsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * Department.Courses
   */
  export type Department$CoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courses
     */
    omit?: CoursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    where?: CoursesWhereInput
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    cursor?: CoursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Department.majors
   */
  export type Department$majorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    where?: MajorWhereInput
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    cursor?: MajorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Department.majorsOfEducation
   */
  export type Department$majorsOfEducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Major
     */
    omit?: MajorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    where?: MajorWhereInput
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    cursor?: MajorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Department.Student
   */
  export type Department$StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Department.Teacher
   */
  export type Department$TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Department.TeachersCoursePlanning
   */
  export type Department$TeachersCoursePlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCoursePlanning
     */
    select?: TeachersCoursePlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersCoursePlanning
     */
    omit?: TeachersCoursePlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersCoursePlanningInclude<ExtArgs> | null
    where?: TeachersCoursePlanningWhereInput
    orderBy?: TeachersCoursePlanningOrderByWithRelationInput | TeachersCoursePlanningOrderByWithRelationInput[]
    cursor?: TeachersCoursePlanningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersCoursePlanningScalarFieldEnum | TeachersCoursePlanningScalarFieldEnum[]
  }

  /**
   * Department.TeachersMajorPlanning
   */
  export type Department$TeachersMajorPlanningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersMajorPlanning
     */
    select?: TeachersMajorPlanningSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersMajorPlanning
     */
    omit?: TeachersMajorPlanningOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersMajorPlanningInclude<ExtArgs> | null
    where?: TeachersMajorPlanningWhereInput
    orderBy?: TeachersMajorPlanningOrderByWithRelationInput | TeachersMajorPlanningOrderByWithRelationInput[]
    cursor?: TeachersMajorPlanningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersMajorPlanningScalarFieldEnum | TeachersMajorPlanningScalarFieldEnum[]
  }

  /**
   * Department.teacherSchedules
   */
  export type Department$teacherSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSchedule
     */
    select?: TeacherScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSchedule
     */
    omit?: TeacherScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherScheduleInclude<ExtArgs> | null
    where?: TeacherScheduleWhereInput
    orderBy?: TeacherScheduleOrderByWithRelationInput | TeacherScheduleOrderByWithRelationInput[]
    cursor?: TeacherScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScheduleScalarFieldEnum | TeacherScheduleScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model StudentCurriculum
   */

  export type AggregateStudentCurriculum = {
    _count: StudentCurriculumCountAggregateOutputType | null
    _avg: StudentCurriculumAvgAggregateOutputType | null
    _sum: StudentCurriculumSumAggregateOutputType | null
    _min: StudentCurriculumMinAggregateOutputType | null
    _max: StudentCurriculumMaxAggregateOutputType | null
  }

  export type StudentCurriculumAvgAggregateOutputType = {
    studentCurriculumId: number | null
    studentId: number | null
    courseId: number | null
    credit: number | null
  }

  export type StudentCurriculumSumAggregateOutputType = {
    studentCurriculumId: number | null
    studentId: number | null
    courseId: number | null
    credit: number | null
  }

  export type StudentCurriculumMinAggregateOutputType = {
    studentCurriculumId: number | null
    studentId: number | null
    courseId: number | null
    credit: number | null
    studentYear: Date | null
    semesterYear: string | null
    modifiedAt: Date | null
    courseCode: string | null
  }

  export type StudentCurriculumMaxAggregateOutputType = {
    studentCurriculumId: number | null
    studentId: number | null
    courseId: number | null
    credit: number | null
    studentYear: Date | null
    semesterYear: string | null
    modifiedAt: Date | null
    courseCode: string | null
  }

  export type StudentCurriculumCountAggregateOutputType = {
    studentCurriculumId: number
    studentId: number
    courseId: number
    credit: number
    studentYear: number
    semesterYear: number
    modifiedAt: number
    courseCode: number
    _all: number
  }


  export type StudentCurriculumAvgAggregateInputType = {
    studentCurriculumId?: true
    studentId?: true
    courseId?: true
    credit?: true
  }

  export type StudentCurriculumSumAggregateInputType = {
    studentCurriculumId?: true
    studentId?: true
    courseId?: true
    credit?: true
  }

  export type StudentCurriculumMinAggregateInputType = {
    studentCurriculumId?: true
    studentId?: true
    courseId?: true
    credit?: true
    studentYear?: true
    semesterYear?: true
    modifiedAt?: true
    courseCode?: true
  }

  export type StudentCurriculumMaxAggregateInputType = {
    studentCurriculumId?: true
    studentId?: true
    courseId?: true
    credit?: true
    studentYear?: true
    semesterYear?: true
    modifiedAt?: true
    courseCode?: true
  }

  export type StudentCurriculumCountAggregateInputType = {
    studentCurriculumId?: true
    studentId?: true
    courseId?: true
    credit?: true
    studentYear?: true
    semesterYear?: true
    modifiedAt?: true
    courseCode?: true
    _all?: true
  }

  export type StudentCurriculumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentCurriculum to aggregate.
     */
    where?: StudentCurriculumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentCurricula to fetch.
     */
    orderBy?: StudentCurriculumOrderByWithRelationInput | StudentCurriculumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentCurriculumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentCurricula from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentCurricula.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentCurricula
    **/
    _count?: true | StudentCurriculumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentCurriculumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentCurriculumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentCurriculumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentCurriculumMaxAggregateInputType
  }

  export type GetStudentCurriculumAggregateType<T extends StudentCurriculumAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentCurriculum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentCurriculum[P]>
      : GetScalarType<T[P], AggregateStudentCurriculum[P]>
  }




  export type StudentCurriculumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentCurriculumWhereInput
    orderBy?: StudentCurriculumOrderByWithAggregationInput | StudentCurriculumOrderByWithAggregationInput[]
    by: StudentCurriculumScalarFieldEnum[] | StudentCurriculumScalarFieldEnum
    having?: StudentCurriculumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCurriculumCountAggregateInputType | true
    _avg?: StudentCurriculumAvgAggregateInputType
    _sum?: StudentCurriculumSumAggregateInputType
    _min?: StudentCurriculumMinAggregateInputType
    _max?: StudentCurriculumMaxAggregateInputType
  }

  export type StudentCurriculumGroupByOutputType = {
    studentCurriculumId: number
    studentId: number
    courseId: number
    credit: number
    studentYear: Date
    semesterYear: string
    modifiedAt: Date | null
    courseCode: string
    _count: StudentCurriculumCountAggregateOutputType | null
    _avg: StudentCurriculumAvgAggregateOutputType | null
    _sum: StudentCurriculumSumAggregateOutputType | null
    _min: StudentCurriculumMinAggregateOutputType | null
    _max: StudentCurriculumMaxAggregateOutputType | null
  }

  type GetStudentCurriculumGroupByPayload<T extends StudentCurriculumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentCurriculumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentCurriculumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentCurriculumGroupByOutputType[P]>
            : GetScalarType<T[P], StudentCurriculumGroupByOutputType[P]>
        }
      >
    >


  export type StudentCurriculumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentCurriculumId?: boolean
    studentId?: boolean
    courseId?: boolean
    credit?: boolean
    studentYear?: boolean
    semesterYear?: boolean
    modifiedAt?: boolean
    courseCode?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentCurriculum"]>

  export type StudentCurriculumSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentCurriculumId?: boolean
    studentId?: boolean
    courseId?: boolean
    credit?: boolean
    studentYear?: boolean
    semesterYear?: boolean
    modifiedAt?: boolean
    courseCode?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentCurriculum"]>

  export type StudentCurriculumSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentCurriculumId?: boolean
    studentId?: boolean
    courseId?: boolean
    credit?: boolean
    studentYear?: boolean
    semesterYear?: boolean
    modifiedAt?: boolean
    courseCode?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentCurriculum"]>

  export type StudentCurriculumSelectScalar = {
    studentCurriculumId?: boolean
    studentId?: boolean
    courseId?: boolean
    credit?: boolean
    studentYear?: boolean
    semesterYear?: boolean
    modifiedAt?: boolean
    courseCode?: boolean
  }

  export type StudentCurriculumOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"studentCurriculumId" | "studentId" | "courseId" | "credit" | "studentYear" | "semesterYear" | "modifiedAt" | "courseCode", ExtArgs["result"]["studentCurriculum"]>
  export type StudentCurriculumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }
  export type StudentCurriculumIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }
  export type StudentCurriculumIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }

  export type $StudentCurriculumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentCurriculum"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      course: Prisma.$CoursesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      studentCurriculumId: number
      studentId: number
      courseId: number
      credit: number
      studentYear: Date
      semesterYear: string
      modifiedAt: Date | null
      courseCode: string
    }, ExtArgs["result"]["studentCurriculum"]>
    composites: {}
  }

  type StudentCurriculumGetPayload<S extends boolean | null | undefined | StudentCurriculumDefaultArgs> = $Result.GetResult<Prisma.$StudentCurriculumPayload, S>

  type StudentCurriculumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentCurriculumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCurriculumCountAggregateInputType | true
    }

  export interface StudentCurriculumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentCurriculum'], meta: { name: 'StudentCurriculum' } }
    /**
     * Find zero or one StudentCurriculum that matches the filter.
     * @param {StudentCurriculumFindUniqueArgs} args - Arguments to find a StudentCurriculum
     * @example
     * // Get one StudentCurriculum
     * const studentCurriculum = await prisma.studentCurriculum.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentCurriculumFindUniqueArgs>(args: SelectSubset<T, StudentCurriculumFindUniqueArgs<ExtArgs>>): Prisma__StudentCurriculumClient<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentCurriculum that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentCurriculumFindUniqueOrThrowArgs} args - Arguments to find a StudentCurriculum
     * @example
     * // Get one StudentCurriculum
     * const studentCurriculum = await prisma.studentCurriculum.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentCurriculumFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentCurriculumFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentCurriculumClient<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentCurriculum that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCurriculumFindFirstArgs} args - Arguments to find a StudentCurriculum
     * @example
     * // Get one StudentCurriculum
     * const studentCurriculum = await prisma.studentCurriculum.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentCurriculumFindFirstArgs>(args?: SelectSubset<T, StudentCurriculumFindFirstArgs<ExtArgs>>): Prisma__StudentCurriculumClient<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentCurriculum that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCurriculumFindFirstOrThrowArgs} args - Arguments to find a StudentCurriculum
     * @example
     * // Get one StudentCurriculum
     * const studentCurriculum = await prisma.studentCurriculum.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentCurriculumFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentCurriculumFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentCurriculumClient<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentCurricula that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCurriculumFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentCurricula
     * const studentCurricula = await prisma.studentCurriculum.findMany()
     * 
     * // Get first 10 StudentCurricula
     * const studentCurricula = await prisma.studentCurriculum.findMany({ take: 10 })
     * 
     * // Only select the `studentCurriculumId`
     * const studentCurriculumWithStudentCurriculumIdOnly = await prisma.studentCurriculum.findMany({ select: { studentCurriculumId: true } })
     * 
     */
    findMany<T extends StudentCurriculumFindManyArgs>(args?: SelectSubset<T, StudentCurriculumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentCurriculum.
     * @param {StudentCurriculumCreateArgs} args - Arguments to create a StudentCurriculum.
     * @example
     * // Create one StudentCurriculum
     * const StudentCurriculum = await prisma.studentCurriculum.create({
     *   data: {
     *     // ... data to create a StudentCurriculum
     *   }
     * })
     * 
     */
    create<T extends StudentCurriculumCreateArgs>(args: SelectSubset<T, StudentCurriculumCreateArgs<ExtArgs>>): Prisma__StudentCurriculumClient<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentCurricula.
     * @param {StudentCurriculumCreateManyArgs} args - Arguments to create many StudentCurricula.
     * @example
     * // Create many StudentCurricula
     * const studentCurriculum = await prisma.studentCurriculum.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCurriculumCreateManyArgs>(args?: SelectSubset<T, StudentCurriculumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentCurricula and returns the data saved in the database.
     * @param {StudentCurriculumCreateManyAndReturnArgs} args - Arguments to create many StudentCurricula.
     * @example
     * // Create many StudentCurricula
     * const studentCurriculum = await prisma.studentCurriculum.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentCurricula and only return the `studentCurriculumId`
     * const studentCurriculumWithStudentCurriculumIdOnly = await prisma.studentCurriculum.createManyAndReturn({
     *   select: { studentCurriculumId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCurriculumCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCurriculumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentCurriculum.
     * @param {StudentCurriculumDeleteArgs} args - Arguments to delete one StudentCurriculum.
     * @example
     * // Delete one StudentCurriculum
     * const StudentCurriculum = await prisma.studentCurriculum.delete({
     *   where: {
     *     // ... filter to delete one StudentCurriculum
     *   }
     * })
     * 
     */
    delete<T extends StudentCurriculumDeleteArgs>(args: SelectSubset<T, StudentCurriculumDeleteArgs<ExtArgs>>): Prisma__StudentCurriculumClient<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentCurriculum.
     * @param {StudentCurriculumUpdateArgs} args - Arguments to update one StudentCurriculum.
     * @example
     * // Update one StudentCurriculum
     * const studentCurriculum = await prisma.studentCurriculum.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentCurriculumUpdateArgs>(args: SelectSubset<T, StudentCurriculumUpdateArgs<ExtArgs>>): Prisma__StudentCurriculumClient<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentCurricula.
     * @param {StudentCurriculumDeleteManyArgs} args - Arguments to filter StudentCurricula to delete.
     * @example
     * // Delete a few StudentCurricula
     * const { count } = await prisma.studentCurriculum.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentCurriculumDeleteManyArgs>(args?: SelectSubset<T, StudentCurriculumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentCurricula.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCurriculumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentCurricula
     * const studentCurriculum = await prisma.studentCurriculum.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentCurriculumUpdateManyArgs>(args: SelectSubset<T, StudentCurriculumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentCurricula and returns the data updated in the database.
     * @param {StudentCurriculumUpdateManyAndReturnArgs} args - Arguments to update many StudentCurricula.
     * @example
     * // Update many StudentCurricula
     * const studentCurriculum = await prisma.studentCurriculum.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentCurricula and only return the `studentCurriculumId`
     * const studentCurriculumWithStudentCurriculumIdOnly = await prisma.studentCurriculum.updateManyAndReturn({
     *   select: { studentCurriculumId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentCurriculumUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentCurriculumUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentCurriculum.
     * @param {StudentCurriculumUpsertArgs} args - Arguments to update or create a StudentCurriculum.
     * @example
     * // Update or create a StudentCurriculum
     * const studentCurriculum = await prisma.studentCurriculum.upsert({
     *   create: {
     *     // ... data to create a StudentCurriculum
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentCurriculum we want to update
     *   }
     * })
     */
    upsert<T extends StudentCurriculumUpsertArgs>(args: SelectSubset<T, StudentCurriculumUpsertArgs<ExtArgs>>): Prisma__StudentCurriculumClient<$Result.GetResult<Prisma.$StudentCurriculumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentCurricula.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCurriculumCountArgs} args - Arguments to filter StudentCurricula to count.
     * @example
     * // Count the number of StudentCurricula
     * const count = await prisma.studentCurriculum.count({
     *   where: {
     *     // ... the filter for the StudentCurricula we want to count
     *   }
     * })
    **/
    count<T extends StudentCurriculumCountArgs>(
      args?: Subset<T, StudentCurriculumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCurriculumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentCurriculum.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCurriculumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentCurriculumAggregateArgs>(args: Subset<T, StudentCurriculumAggregateArgs>): Prisma.PrismaPromise<GetStudentCurriculumAggregateType<T>>

    /**
     * Group by StudentCurriculum.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCurriculumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentCurriculumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentCurriculumGroupByArgs['orderBy'] }
        : { orderBy?: StudentCurriculumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentCurriculumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentCurriculumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentCurriculum model
   */
  readonly fields: StudentCurriculumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentCurriculum.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentCurriculumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentCurriculum model
   */
  interface StudentCurriculumFieldRefs {
    readonly studentCurriculumId: FieldRef<"StudentCurriculum", 'Int'>
    readonly studentId: FieldRef<"StudentCurriculum", 'Int'>
    readonly courseId: FieldRef<"StudentCurriculum", 'Int'>
    readonly credit: FieldRef<"StudentCurriculum", 'Int'>
    readonly studentYear: FieldRef<"StudentCurriculum", 'DateTime'>
    readonly semesterYear: FieldRef<"StudentCurriculum", 'String'>
    readonly modifiedAt: FieldRef<"StudentCurriculum", 'DateTime'>
    readonly courseCode: FieldRef<"StudentCurriculum", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentCurriculum findUnique
   */
  export type StudentCurriculumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * Filter, which StudentCurriculum to fetch.
     */
    where: StudentCurriculumWhereUniqueInput
  }

  /**
   * StudentCurriculum findUniqueOrThrow
   */
  export type StudentCurriculumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * Filter, which StudentCurriculum to fetch.
     */
    where: StudentCurriculumWhereUniqueInput
  }

  /**
   * StudentCurriculum findFirst
   */
  export type StudentCurriculumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * Filter, which StudentCurriculum to fetch.
     */
    where?: StudentCurriculumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentCurricula to fetch.
     */
    orderBy?: StudentCurriculumOrderByWithRelationInput | StudentCurriculumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentCurricula.
     */
    cursor?: StudentCurriculumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentCurricula from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentCurricula.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentCurricula.
     */
    distinct?: StudentCurriculumScalarFieldEnum | StudentCurriculumScalarFieldEnum[]
  }

  /**
   * StudentCurriculum findFirstOrThrow
   */
  export type StudentCurriculumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * Filter, which StudentCurriculum to fetch.
     */
    where?: StudentCurriculumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentCurricula to fetch.
     */
    orderBy?: StudentCurriculumOrderByWithRelationInput | StudentCurriculumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentCurricula.
     */
    cursor?: StudentCurriculumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentCurricula from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentCurricula.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentCurricula.
     */
    distinct?: StudentCurriculumScalarFieldEnum | StudentCurriculumScalarFieldEnum[]
  }

  /**
   * StudentCurriculum findMany
   */
  export type StudentCurriculumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * Filter, which StudentCurricula to fetch.
     */
    where?: StudentCurriculumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentCurricula to fetch.
     */
    orderBy?: StudentCurriculumOrderByWithRelationInput | StudentCurriculumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentCurricula.
     */
    cursor?: StudentCurriculumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentCurricula from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentCurricula.
     */
    skip?: number
    distinct?: StudentCurriculumScalarFieldEnum | StudentCurriculumScalarFieldEnum[]
  }

  /**
   * StudentCurriculum create
   */
  export type StudentCurriculumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentCurriculum.
     */
    data: XOR<StudentCurriculumCreateInput, StudentCurriculumUncheckedCreateInput>
  }

  /**
   * StudentCurriculum createMany
   */
  export type StudentCurriculumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentCurricula.
     */
    data: StudentCurriculumCreateManyInput | StudentCurriculumCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentCurriculum createManyAndReturn
   */
  export type StudentCurriculumCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * The data used to create many StudentCurricula.
     */
    data: StudentCurriculumCreateManyInput | StudentCurriculumCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentCurriculum update
   */
  export type StudentCurriculumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentCurriculum.
     */
    data: XOR<StudentCurriculumUpdateInput, StudentCurriculumUncheckedUpdateInput>
    /**
     * Choose, which StudentCurriculum to update.
     */
    where: StudentCurriculumWhereUniqueInput
  }

  /**
   * StudentCurriculum updateMany
   */
  export type StudentCurriculumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentCurricula.
     */
    data: XOR<StudentCurriculumUpdateManyMutationInput, StudentCurriculumUncheckedUpdateManyInput>
    /**
     * Filter which StudentCurricula to update
     */
    where?: StudentCurriculumWhereInput
    /**
     * Limit how many StudentCurricula to update.
     */
    limit?: number
  }

  /**
   * StudentCurriculum updateManyAndReturn
   */
  export type StudentCurriculumUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * The data used to update StudentCurricula.
     */
    data: XOR<StudentCurriculumUpdateManyMutationInput, StudentCurriculumUncheckedUpdateManyInput>
    /**
     * Filter which StudentCurricula to update
     */
    where?: StudentCurriculumWhereInput
    /**
     * Limit how many StudentCurricula to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentCurriculum upsert
   */
  export type StudentCurriculumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentCurriculum to update in case it exists.
     */
    where: StudentCurriculumWhereUniqueInput
    /**
     * In case the StudentCurriculum found by the `where` argument doesn't exist, create a new StudentCurriculum with this data.
     */
    create: XOR<StudentCurriculumCreateInput, StudentCurriculumUncheckedCreateInput>
    /**
     * In case the StudentCurriculum was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentCurriculumUpdateInput, StudentCurriculumUncheckedUpdateInput>
  }

  /**
   * StudentCurriculum delete
   */
  export type StudentCurriculumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
    /**
     * Filter which StudentCurriculum to delete.
     */
    where: StudentCurriculumWhereUniqueInput
  }

  /**
   * StudentCurriculum deleteMany
   */
  export type StudentCurriculumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentCurricula to delete
     */
    where?: StudentCurriculumWhereInput
    /**
     * Limit how many StudentCurricula to delete.
     */
    limit?: number
  }

  /**
   * StudentCurriculum without action
   */
  export type StudentCurriculumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCurriculum
     */
    select?: StudentCurriculumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentCurriculum
     */
    omit?: StudentCurriculumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentCurriculumInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Auth_userScalarFieldEnum: {
    user_id: 'user_id',
    login_name: 'login_name',
    password_hash: 'password_hash',
    profile_picture: 'profile_picture',
    registry_number: 'registry_number',
    user_role: 'user_role',
    fname: 'fname',
    lname: 'lname',
    birthday: 'birthday',
    gender: 'gender',
    citizenship: 'citizenship',
    state_city: 'state_city',
    town_district: 'town_district',
    valid_address: 'valid_address',
    state_city_living: 'state_city_living',
    town_district_living: 'town_district_living',
    valid_address_living: 'valid_address_living',
    postal_address: 'postal_address',
    home_phone_number: 'home_phone_number',
    phone_number: 'phone_number',
    phone_number_emergency: 'phone_number_emergency',
    country: 'country',
    ethnicity: 'ethnicity',
    social_background: 'social_background',
    state_city_of_birth: 'state_city_of_birth',
    town_district_of_birth: 'town_district_of_birth',
    place_of_birth: 'place_of_birth',
    education: 'education',
    current_academic_degree: 'current_academic_degree',
    profession: 'profession',
    profession_certification: 'profession_certification',
    f_passport_number: 'f_passport_number',
    married: 'married',
    military_service: 'military_service',
    pensions_established: 'pensions_established',
    additional_notes: 'additional_notes',
    blood_type: 'blood_type',
    drivers_certificate: 'drivers_certificate',
    drivers_certificate_number: 'drivers_certificate_number',
    disabled: 'disabled',
    is_active: 'is_active',
    email: 'email',
    created_at: 'created_at',
    family_tree_name: 'family_tree_name'
  };

  export type Auth_userScalarFieldEnum = (typeof Auth_userScalarFieldEnum)[keyof typeof Auth_userScalarFieldEnum]


  export const TeacherScheduleScalarFieldEnum: {
    teacherScheduleId: 'teacherScheduleId',
    teacherId: 'teacherId',
    weekDay: 'weekDay',
    periodOfClass: 'periodOfClass',
    classroomId: 'classroomId',
    classGroup: 'classGroup',
    courseName: 'courseName',
    credit: 'credit',
    numberOfStudents: 'numberOfStudents',
    courseId: 'courseId',
    departmentId: 'departmentId',
    createdAt: 'createdAt'
  };

  export type TeacherScheduleScalarFieldEnum = (typeof TeacherScheduleScalarFieldEnum)[keyof typeof TeacherScheduleScalarFieldEnum]


  export const TeachersCoursePlanningScalarFieldEnum: {
    teacherCoursePlanningId: 'teacherCoursePlanningId',
    teacherId: 'teacherId',
    majorName: 'majorName',
    majorId: 'majorId',
    courseName: 'courseName',
    credit: 'credit',
    courseId: 'courseId',
    departmentId: 'departmentId',
    createdAt: 'createdAt',
    departmentOfEduId: 'departmentOfEduId',
    courseCode: 'courseCode',
    teacherMajorId: 'teacherMajorId'
  };

  export type TeachersCoursePlanningScalarFieldEnum = (typeof TeachersCoursePlanningScalarFieldEnum)[keyof typeof TeachersCoursePlanningScalarFieldEnum]


  export const ClassroomsScalarFieldEnum: {
    classroom_id: 'classroom_id',
    department_id: 'department_id',
    classroom_type: 'classroom_type',
    classroom_number: 'classroom_number',
    projector: 'projector',
    tv: 'tv',
    createdAt: 'createdAt',
    capacity: 'capacity'
  };

  export type ClassroomsScalarFieldEnum = (typeof ClassroomsScalarFieldEnum)[keyof typeof ClassroomsScalarFieldEnum]


  export const CoursesScalarFieldEnum: {
    courseId: 'courseId',
    courseName: 'courseName',
    courseCode: 'courseCode',
    courseType: 'courseType',
    courseYear: 'courseYear',
    totalCredits: 'totalCredits',
    majorId: 'majorId',
    description: 'description',
    courseSeason: 'courseSeason',
    timesPerWeek: 'timesPerWeek',
    departmentId: 'departmentId'
  };

  export type CoursesScalarFieldEnum = (typeof CoursesScalarFieldEnum)[keyof typeof CoursesScalarFieldEnum]


  export const TeachersMajorPlanningScalarFieldEnum: {
    teacherMajorId: 'teacherMajorId',
    teacherId: 'teacherId',
    academicDegreeOfMajor: 'academicDegreeOfMajor',
    majorName: 'majorName',
    majorId: 'majorId',
    credit: 'credit',
    departmentId: 'departmentId',
    createdAt: 'createdAt',
    departmentOfEducationsId: 'departmentOfEducationsId'
  };

  export type TeachersMajorPlanningScalarFieldEnum = (typeof TeachersMajorPlanningScalarFieldEnum)[keyof typeof TeachersMajorPlanningScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    teacherId: 'teacherId',
    userId: 'userId',
    teacherCode: 'teacherCode',
    teacherEmail: 'teacherEmail',
    certificate: 'certificate',
    profession: 'profession',
    academicDegree: 'academicDegree',
    jobTitle: 'jobTitle',
    isActive: 'isActive',
    jobDescription: 'jobDescription',
    departmentsOfEducationId: 'departmentsOfEducationId',
    departmentId: 'departmentId'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const StudentClubsScalarFieldEnum: {
    studentClubId: 'studentClubId',
    clubCode: 'clubCode',
    clubName: 'clubName',
    clubMembers: 'clubMembers',
    clubType: 'clubType',
    clubMajorId: 'clubMajorId',
    clubPrimaryLeaderId: 'clubPrimaryLeaderId',
    clubAssistantLeaderId: 'clubAssistantLeaderId',
    clubAdvisorTeacherId: 'clubAdvisorTeacherId',
    clubLogo: 'clubLogo',
    clubMoto: 'clubMoto',
    createdAt: 'createdAt'
  };

  export type StudentClubsScalarFieldEnum = (typeof StudentClubsScalarFieldEnum)[keyof typeof StudentClubsScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    student_id: 'student_id',
    user_id: 'user_id',
    student_club_id: 'student_club_id',
    additional_roles: 'additional_roles',
    student_code: 'student_code',
    student_email: 'student_email',
    student_file: 'student_file',
    enrollment_number: 'enrollment_number',
    enrollment_year: 'enrollment_year',
    year_classification: 'year_classification',
    is_active: 'is_active',
    current_academic_degree: 'current_academic_degree',
    academic_degree_file: 'academic_degree_file',
    major_id: 'major_id',
    created_at: 'created_at',
    contracts: 'contracts',
    department_id: 'department_id'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const MajorScalarFieldEnum: {
    major_id: 'major_id',
    major_name: 'major_name',
    majors_year: 'majors_year',
    majors_type: 'majors_type',
    credit_unit_rate: 'credit_unit_rate',
    major_tuition: 'major_tuition',
    academic_degree: 'academic_degree',
    total_years: 'total_years',
    total_credits_per_year: 'total_credits_per_year',
    department_of_edu_id: 'department_of_edu_id',
    created_at: 'created_at',
    exam1: 'exam1',
    exam2: 'exam2',
    majors_description: 'majors_description',
    description_brief: 'description_brief',
    qualifications: 'qualifications',
    qualifications1: 'qualifications1',
    qualifications2: 'qualifications2',
    sign_ups: 'sign_ups',
    department_id: 'department_id'
  };

  export type MajorScalarFieldEnum = (typeof MajorScalarFieldEnum)[keyof typeof MajorScalarFieldEnum]


  export const DepartmentsOfEducationScalarFieldEnum: {
    departmentsOfEducationId: 'departmentsOfEducationId',
    edDepartmentName: 'edDepartmentName',
    edDepartmentCode: 'edDepartmentCode',
    teachers: 'teachers'
  };

  export type DepartmentsOfEducationScalarFieldEnum = (typeof DepartmentsOfEducationScalarFieldEnum)[keyof typeof DepartmentsOfEducationScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    department_id: 'department_id',
    department_name: 'department_name',
    department_code: 'department_code',
    department_email: 'department_email',
    number_of_staff: 'number_of_staff',
    logo: 'logo',
    created_at: 'created_at',
    department_of_edu_id: 'department_of_edu_id'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const StudentCurriculumScalarFieldEnum: {
    studentCurriculumId: 'studentCurriculumId',
    studentId: 'studentId',
    courseId: 'courseId',
    credit: 'credit',
    studentYear: 'studentYear',
    semesterYear: 'semesterYear',
    modifiedAt: 'modifiedAt',
    courseCode: 'courseCode'
  };

  export type StudentCurriculumScalarFieldEnum = (typeof StudentCurriculumScalarFieldEnum)[keyof typeof StudentCurriculumScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRoleEnum'
   */
  export type EnumUserRoleEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRoleEnum'>
    


  /**
   * Reference to a field of type 'UserRoleEnum[]'
   */
  export type ListEnumUserRoleEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRoleEnum[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'GenderEnum'
   */
  export type EnumGenderEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GenderEnum'>
    


  /**
   * Reference to a field of type 'GenderEnum[]'
   */
  export type ListEnumGenderEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GenderEnum[]'>
    


  /**
   * Reference to a field of type 'MarriedEnum'
   */
  export type EnumMarriedEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MarriedEnum'>
    


  /**
   * Reference to a field of type 'MarriedEnum[]'
   */
  export type ListEnumMarriedEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MarriedEnum[]'>
    


  /**
   * Reference to a field of type 'MilitaryServiceEnum'
   */
  export type EnumMilitaryServiceEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MilitaryServiceEnum'>
    


  /**
   * Reference to a field of type 'MilitaryServiceEnum[]'
   */
  export type ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MilitaryServiceEnum[]'>
    


  /**
   * Reference to a field of type 'DisabledEnum'
   */
  export type EnumDisabledEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DisabledEnum'>
    


  /**
   * Reference to a field of type 'DisabledEnum[]'
   */
  export type ListEnumDisabledEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DisabledEnum[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'ClassroomTypeEnum'
   */
  export type EnumClassroomTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClassroomTypeEnum'>
    


  /**
   * Reference to a field of type 'ClassroomTypeEnum[]'
   */
  export type ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClassroomTypeEnum[]'>
    


  /**
   * Reference to a field of type 'ProjectorEnum'
   */
  export type EnumProjectorEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectorEnum'>
    


  /**
   * Reference to a field of type 'ProjectorEnum[]'
   */
  export type ListEnumProjectorEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectorEnum[]'>
    


  /**
   * Reference to a field of type 'TvEnum'
   */
  export type EnumTvEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TvEnum'>
    


  /**
   * Reference to a field of type 'TvEnum[]'
   */
  export type ListEnumTvEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TvEnum[]'>
    


  /**
   * Reference to a field of type 'CourseTypeEnum'
   */
  export type EnumCourseTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseTypeEnum'>
    


  /**
   * Reference to a field of type 'CourseTypeEnum[]'
   */
  export type ListEnumCourseTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseTypeEnum[]'>
    


  /**
   * Reference to a field of type 'CourseSeasonTypeEnum'
   */
  export type EnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseSeasonTypeEnum'>
    


  /**
   * Reference to a field of type 'CourseSeasonTypeEnum[]'
   */
  export type ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseSeasonTypeEnum[]'>
    


  /**
   * Reference to a field of type 'IsActiveEnum'
   */
  export type EnumIsActiveEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IsActiveEnum'>
    


  /**
   * Reference to a field of type 'IsActiveEnum[]'
   */
  export type ListEnumIsActiveEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IsActiveEnum[]'>
    


  /**
   * Reference to a field of type 'ClubTypeEnum'
   */
  export type EnumClubTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubTypeEnum'>
    


  /**
   * Reference to a field of type 'ClubTypeEnum[]'
   */
  export type ListEnumClubTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubTypeEnum[]'>
    


  /**
   * Reference to a field of type 'AdditionalRolesEnum'
   */
  export type EnumAdditionalRolesEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdditionalRolesEnum'>
    


  /**
   * Reference to a field of type 'AdditionalRolesEnum[]'
   */
  export type ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdditionalRolesEnum[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'YearClassificationEnum'
   */
  export type EnumYearClassificationEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YearClassificationEnum'>
    


  /**
   * Reference to a field of type 'YearClassificationEnum[]'
   */
  export type ListEnumYearClassificationEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YearClassificationEnum[]'>
    


  /**
   * Reference to a field of type 'StudentIsActiveEnum'
   */
  export type EnumStudentIsActiveEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StudentIsActiveEnum'>
    


  /**
   * Reference to a field of type 'StudentIsActiveEnum[]'
   */
  export type ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StudentIsActiveEnum[]'>
    


  /**
   * Reference to a field of type 'MajorTypeEnum'
   */
  export type EnumMajorTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MajorTypeEnum'>
    


  /**
   * Reference to a field of type 'MajorTypeEnum[]'
   */
  export type ListEnumMajorTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MajorTypeEnum[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'SignUpsEnum'
   */
  export type EnumSignUpsEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignUpsEnum'>
    


  /**
   * Reference to a field of type 'SignUpsEnum[]'
   */
  export type ListEnumSignUpsEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignUpsEnum[]'>
    
  /**
   * Deep Input Types
   */


  export type auth_userWhereInput = {
    AND?: auth_userWhereInput | auth_userWhereInput[]
    OR?: auth_userWhereInput[]
    NOT?: auth_userWhereInput | auth_userWhereInput[]
    user_id?: IntFilter<"auth_user"> | number
    login_name?: StringFilter<"auth_user"> | string
    password_hash?: StringFilter<"auth_user"> | string
    profile_picture?: StringNullableFilter<"auth_user"> | string | null
    registry_number?: StringFilter<"auth_user"> | string
    user_role?: EnumUserRoleEnumFilter<"auth_user"> | $Enums.UserRoleEnum
    fname?: StringFilter<"auth_user"> | string
    lname?: StringFilter<"auth_user"> | string
    birthday?: DateTimeFilter<"auth_user"> | Date | string
    gender?: EnumGenderEnumFilter<"auth_user"> | $Enums.GenderEnum
    citizenship?: StringFilter<"auth_user"> | string
    state_city?: StringFilter<"auth_user"> | string
    town_district?: StringFilter<"auth_user"> | string
    valid_address?: StringFilter<"auth_user"> | string
    state_city_living?: StringFilter<"auth_user"> | string
    town_district_living?: StringFilter<"auth_user"> | string
    valid_address_living?: StringFilter<"auth_user"> | string
    postal_address?: StringNullableFilter<"auth_user"> | string | null
    home_phone_number?: StringNullableFilter<"auth_user"> | string | null
    phone_number?: StringFilter<"auth_user"> | string
    phone_number_emergency?: StringFilter<"auth_user"> | string
    country?: StringFilter<"auth_user"> | string
    ethnicity?: StringFilter<"auth_user"> | string
    social_background?: StringFilter<"auth_user"> | string
    state_city_of_birth?: StringFilter<"auth_user"> | string
    town_district_of_birth?: StringFilter<"auth_user"> | string
    place_of_birth?: StringFilter<"auth_user"> | string
    education?: StringFilter<"auth_user"> | string
    current_academic_degree?: StringFilter<"auth_user"> | string
    profession?: StringNullableFilter<"auth_user"> | string | null
    profession_certification?: StringNullableFilter<"auth_user"> | string | null
    f_passport_number?: StringNullableFilter<"auth_user"> | string | null
    married?: EnumMarriedEnumFilter<"auth_user"> | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFilter<"auth_user"> | $Enums.MilitaryServiceEnum
    pensions_established?: StringNullableFilter<"auth_user"> | string | null
    additional_notes?: StringNullableFilter<"auth_user"> | string | null
    blood_type?: StringNullableFilter<"auth_user"> | string | null
    drivers_certificate?: StringNullableFilter<"auth_user"> | string | null
    drivers_certificate_number?: StringNullableFilter<"auth_user"> | string | null
    disabled?: EnumDisabledEnumFilter<"auth_user"> | $Enums.DisabledEnum
    is_active?: BoolFilter<"auth_user"> | boolean
    email?: StringNullableFilter<"auth_user"> | string | null
    created_at?: DateTimeFilter<"auth_user"> | Date | string
    family_tree_name?: StringFilter<"auth_user"> | string
    Teacher?: TeacherListRelationFilter
    assistantLeaderIn?: StudentClubsListRelationFilter
    primaryLeaderIn?: StudentClubsListRelationFilter
    Student?: StudentListRelationFilter
  }

  export type auth_userOrderByWithRelationInput = {
    user_id?: SortOrder
    login_name?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrderInput | SortOrder
    registry_number?: SortOrder
    user_role?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    citizenship?: SortOrder
    state_city?: SortOrder
    town_district?: SortOrder
    valid_address?: SortOrder
    state_city_living?: SortOrder
    town_district_living?: SortOrder
    valid_address_living?: SortOrder
    postal_address?: SortOrderInput | SortOrder
    home_phone_number?: SortOrderInput | SortOrder
    phone_number?: SortOrder
    phone_number_emergency?: SortOrder
    country?: SortOrder
    ethnicity?: SortOrder
    social_background?: SortOrder
    state_city_of_birth?: SortOrder
    town_district_of_birth?: SortOrder
    place_of_birth?: SortOrder
    education?: SortOrder
    current_academic_degree?: SortOrder
    profession?: SortOrderInput | SortOrder
    profession_certification?: SortOrderInput | SortOrder
    f_passport_number?: SortOrderInput | SortOrder
    married?: SortOrder
    military_service?: SortOrder
    pensions_established?: SortOrderInput | SortOrder
    additional_notes?: SortOrderInput | SortOrder
    blood_type?: SortOrderInput | SortOrder
    drivers_certificate?: SortOrderInput | SortOrder
    drivers_certificate_number?: SortOrderInput | SortOrder
    disabled?: SortOrder
    is_active?: SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    family_tree_name?: SortOrder
    Teacher?: TeacherOrderByRelationAggregateInput
    assistantLeaderIn?: StudentClubsOrderByRelationAggregateInput
    primaryLeaderIn?: StudentClubsOrderByRelationAggregateInput
    Student?: StudentOrderByRelationAggregateInput
  }

  export type auth_userWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    login_name?: string
    email?: string
    AND?: auth_userWhereInput | auth_userWhereInput[]
    OR?: auth_userWhereInput[]
    NOT?: auth_userWhereInput | auth_userWhereInput[]
    password_hash?: StringFilter<"auth_user"> | string
    profile_picture?: StringNullableFilter<"auth_user"> | string | null
    registry_number?: StringFilter<"auth_user"> | string
    user_role?: EnumUserRoleEnumFilter<"auth_user"> | $Enums.UserRoleEnum
    fname?: StringFilter<"auth_user"> | string
    lname?: StringFilter<"auth_user"> | string
    birthday?: DateTimeFilter<"auth_user"> | Date | string
    gender?: EnumGenderEnumFilter<"auth_user"> | $Enums.GenderEnum
    citizenship?: StringFilter<"auth_user"> | string
    state_city?: StringFilter<"auth_user"> | string
    town_district?: StringFilter<"auth_user"> | string
    valid_address?: StringFilter<"auth_user"> | string
    state_city_living?: StringFilter<"auth_user"> | string
    town_district_living?: StringFilter<"auth_user"> | string
    valid_address_living?: StringFilter<"auth_user"> | string
    postal_address?: StringNullableFilter<"auth_user"> | string | null
    home_phone_number?: StringNullableFilter<"auth_user"> | string | null
    phone_number?: StringFilter<"auth_user"> | string
    phone_number_emergency?: StringFilter<"auth_user"> | string
    country?: StringFilter<"auth_user"> | string
    ethnicity?: StringFilter<"auth_user"> | string
    social_background?: StringFilter<"auth_user"> | string
    state_city_of_birth?: StringFilter<"auth_user"> | string
    town_district_of_birth?: StringFilter<"auth_user"> | string
    place_of_birth?: StringFilter<"auth_user"> | string
    education?: StringFilter<"auth_user"> | string
    current_academic_degree?: StringFilter<"auth_user"> | string
    profession?: StringNullableFilter<"auth_user"> | string | null
    profession_certification?: StringNullableFilter<"auth_user"> | string | null
    f_passport_number?: StringNullableFilter<"auth_user"> | string | null
    married?: EnumMarriedEnumFilter<"auth_user"> | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFilter<"auth_user"> | $Enums.MilitaryServiceEnum
    pensions_established?: StringNullableFilter<"auth_user"> | string | null
    additional_notes?: StringNullableFilter<"auth_user"> | string | null
    blood_type?: StringNullableFilter<"auth_user"> | string | null
    drivers_certificate?: StringNullableFilter<"auth_user"> | string | null
    drivers_certificate_number?: StringNullableFilter<"auth_user"> | string | null
    disabled?: EnumDisabledEnumFilter<"auth_user"> | $Enums.DisabledEnum
    is_active?: BoolFilter<"auth_user"> | boolean
    created_at?: DateTimeFilter<"auth_user"> | Date | string
    family_tree_name?: StringFilter<"auth_user"> | string
    Teacher?: TeacherListRelationFilter
    assistantLeaderIn?: StudentClubsListRelationFilter
    primaryLeaderIn?: StudentClubsListRelationFilter
    Student?: StudentListRelationFilter
  }, "user_id" | "login_name" | "email">

  export type auth_userOrderByWithAggregationInput = {
    user_id?: SortOrder
    login_name?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrderInput | SortOrder
    registry_number?: SortOrder
    user_role?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    citizenship?: SortOrder
    state_city?: SortOrder
    town_district?: SortOrder
    valid_address?: SortOrder
    state_city_living?: SortOrder
    town_district_living?: SortOrder
    valid_address_living?: SortOrder
    postal_address?: SortOrderInput | SortOrder
    home_phone_number?: SortOrderInput | SortOrder
    phone_number?: SortOrder
    phone_number_emergency?: SortOrder
    country?: SortOrder
    ethnicity?: SortOrder
    social_background?: SortOrder
    state_city_of_birth?: SortOrder
    town_district_of_birth?: SortOrder
    place_of_birth?: SortOrder
    education?: SortOrder
    current_academic_degree?: SortOrder
    profession?: SortOrderInput | SortOrder
    profession_certification?: SortOrderInput | SortOrder
    f_passport_number?: SortOrderInput | SortOrder
    married?: SortOrder
    military_service?: SortOrder
    pensions_established?: SortOrderInput | SortOrder
    additional_notes?: SortOrderInput | SortOrder
    blood_type?: SortOrderInput | SortOrder
    drivers_certificate?: SortOrderInput | SortOrder
    drivers_certificate_number?: SortOrderInput | SortOrder
    disabled?: SortOrder
    is_active?: SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    family_tree_name?: SortOrder
    _count?: auth_userCountOrderByAggregateInput
    _avg?: auth_userAvgOrderByAggregateInput
    _max?: auth_userMaxOrderByAggregateInput
    _min?: auth_userMinOrderByAggregateInput
    _sum?: auth_userSumOrderByAggregateInput
  }

  export type auth_userScalarWhereWithAggregatesInput = {
    AND?: auth_userScalarWhereWithAggregatesInput | auth_userScalarWhereWithAggregatesInput[]
    OR?: auth_userScalarWhereWithAggregatesInput[]
    NOT?: auth_userScalarWhereWithAggregatesInput | auth_userScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"auth_user"> | number
    login_name?: StringWithAggregatesFilter<"auth_user"> | string
    password_hash?: StringWithAggregatesFilter<"auth_user"> | string
    profile_picture?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    registry_number?: StringWithAggregatesFilter<"auth_user"> | string
    user_role?: EnumUserRoleEnumWithAggregatesFilter<"auth_user"> | $Enums.UserRoleEnum
    fname?: StringWithAggregatesFilter<"auth_user"> | string
    lname?: StringWithAggregatesFilter<"auth_user"> | string
    birthday?: DateTimeWithAggregatesFilter<"auth_user"> | Date | string
    gender?: EnumGenderEnumWithAggregatesFilter<"auth_user"> | $Enums.GenderEnum
    citizenship?: StringWithAggregatesFilter<"auth_user"> | string
    state_city?: StringWithAggregatesFilter<"auth_user"> | string
    town_district?: StringWithAggregatesFilter<"auth_user"> | string
    valid_address?: StringWithAggregatesFilter<"auth_user"> | string
    state_city_living?: StringWithAggregatesFilter<"auth_user"> | string
    town_district_living?: StringWithAggregatesFilter<"auth_user"> | string
    valid_address_living?: StringWithAggregatesFilter<"auth_user"> | string
    postal_address?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    home_phone_number?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    phone_number?: StringWithAggregatesFilter<"auth_user"> | string
    phone_number_emergency?: StringWithAggregatesFilter<"auth_user"> | string
    country?: StringWithAggregatesFilter<"auth_user"> | string
    ethnicity?: StringWithAggregatesFilter<"auth_user"> | string
    social_background?: StringWithAggregatesFilter<"auth_user"> | string
    state_city_of_birth?: StringWithAggregatesFilter<"auth_user"> | string
    town_district_of_birth?: StringWithAggregatesFilter<"auth_user"> | string
    place_of_birth?: StringWithAggregatesFilter<"auth_user"> | string
    education?: StringWithAggregatesFilter<"auth_user"> | string
    current_academic_degree?: StringWithAggregatesFilter<"auth_user"> | string
    profession?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    profession_certification?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    f_passport_number?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    married?: EnumMarriedEnumWithAggregatesFilter<"auth_user"> | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumWithAggregatesFilter<"auth_user"> | $Enums.MilitaryServiceEnum
    pensions_established?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    additional_notes?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    blood_type?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    drivers_certificate?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    drivers_certificate_number?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    disabled?: EnumDisabledEnumWithAggregatesFilter<"auth_user"> | $Enums.DisabledEnum
    is_active?: BoolWithAggregatesFilter<"auth_user"> | boolean
    email?: StringNullableWithAggregatesFilter<"auth_user"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"auth_user"> | Date | string
    family_tree_name?: StringWithAggregatesFilter<"auth_user"> | string
  }

  export type TeacherScheduleWhereInput = {
    AND?: TeacherScheduleWhereInput | TeacherScheduleWhereInput[]
    OR?: TeacherScheduleWhereInput[]
    NOT?: TeacherScheduleWhereInput | TeacherScheduleWhereInput[]
    teacherScheduleId?: IntFilter<"TeacherSchedule"> | number
    teacherId?: IntFilter<"TeacherSchedule"> | number
    weekDay?: StringFilter<"TeacherSchedule"> | string
    periodOfClass?: StringFilter<"TeacherSchedule"> | string
    classroomId?: IntFilter<"TeacherSchedule"> | number
    classGroup?: StringFilter<"TeacherSchedule"> | string
    courseName?: StringFilter<"TeacherSchedule"> | string
    credit?: IntFilter<"TeacherSchedule"> | number
    numberOfStudents?: IntFilter<"TeacherSchedule"> | number
    courseId?: IntFilter<"TeacherSchedule"> | number
    departmentId?: IntFilter<"TeacherSchedule"> | number
    createdAt?: DateTimeNullableFilter<"TeacherSchedule"> | Date | string | null
    classroom?: XOR<ClassroomsScalarRelationFilter, ClassroomsWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }

  export type TeacherScheduleOrderByWithRelationInput = {
    teacherScheduleId?: SortOrder
    teacherId?: SortOrder
    weekDay?: SortOrder
    periodOfClass?: SortOrder
    classroomId?: SortOrder
    classGroup?: SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    numberOfStudents?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    classroom?: ClassroomsOrderByWithRelationInput
    course?: CoursesOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
  }

  export type TeacherScheduleWhereUniqueInput = Prisma.AtLeast<{
    teacherScheduleId?: number
    AND?: TeacherScheduleWhereInput | TeacherScheduleWhereInput[]
    OR?: TeacherScheduleWhereInput[]
    NOT?: TeacherScheduleWhereInput | TeacherScheduleWhereInput[]
    teacherId?: IntFilter<"TeacherSchedule"> | number
    weekDay?: StringFilter<"TeacherSchedule"> | string
    periodOfClass?: StringFilter<"TeacherSchedule"> | string
    classroomId?: IntFilter<"TeacherSchedule"> | number
    classGroup?: StringFilter<"TeacherSchedule"> | string
    courseName?: StringFilter<"TeacherSchedule"> | string
    credit?: IntFilter<"TeacherSchedule"> | number
    numberOfStudents?: IntFilter<"TeacherSchedule"> | number
    courseId?: IntFilter<"TeacherSchedule"> | number
    departmentId?: IntFilter<"TeacherSchedule"> | number
    createdAt?: DateTimeNullableFilter<"TeacherSchedule"> | Date | string | null
    classroom?: XOR<ClassroomsScalarRelationFilter, ClassroomsWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }, "teacherScheduleId">

  export type TeacherScheduleOrderByWithAggregationInput = {
    teacherScheduleId?: SortOrder
    teacherId?: SortOrder
    weekDay?: SortOrder
    periodOfClass?: SortOrder
    classroomId?: SortOrder
    classGroup?: SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    numberOfStudents?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: TeacherScheduleCountOrderByAggregateInput
    _avg?: TeacherScheduleAvgOrderByAggregateInput
    _max?: TeacherScheduleMaxOrderByAggregateInput
    _min?: TeacherScheduleMinOrderByAggregateInput
    _sum?: TeacherScheduleSumOrderByAggregateInput
  }

  export type TeacherScheduleScalarWhereWithAggregatesInput = {
    AND?: TeacherScheduleScalarWhereWithAggregatesInput | TeacherScheduleScalarWhereWithAggregatesInput[]
    OR?: TeacherScheduleScalarWhereWithAggregatesInput[]
    NOT?: TeacherScheduleScalarWhereWithAggregatesInput | TeacherScheduleScalarWhereWithAggregatesInput[]
    teacherScheduleId?: IntWithAggregatesFilter<"TeacherSchedule"> | number
    teacherId?: IntWithAggregatesFilter<"TeacherSchedule"> | number
    weekDay?: StringWithAggregatesFilter<"TeacherSchedule"> | string
    periodOfClass?: StringWithAggregatesFilter<"TeacherSchedule"> | string
    classroomId?: IntWithAggregatesFilter<"TeacherSchedule"> | number
    classGroup?: StringWithAggregatesFilter<"TeacherSchedule"> | string
    courseName?: StringWithAggregatesFilter<"TeacherSchedule"> | string
    credit?: IntWithAggregatesFilter<"TeacherSchedule"> | number
    numberOfStudents?: IntWithAggregatesFilter<"TeacherSchedule"> | number
    courseId?: IntWithAggregatesFilter<"TeacherSchedule"> | number
    departmentId?: IntWithAggregatesFilter<"TeacherSchedule"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"TeacherSchedule"> | Date | string | null
  }

  export type TeachersCoursePlanningWhereInput = {
    AND?: TeachersCoursePlanningWhereInput | TeachersCoursePlanningWhereInput[]
    OR?: TeachersCoursePlanningWhereInput[]
    NOT?: TeachersCoursePlanningWhereInput | TeachersCoursePlanningWhereInput[]
    teacherCoursePlanningId?: IntFilter<"TeachersCoursePlanning"> | number
    teacherId?: IntFilter<"TeachersCoursePlanning"> | number
    majorName?: StringFilter<"TeachersCoursePlanning"> | string
    majorId?: DecimalNullableFilter<"TeachersCoursePlanning"> | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFilter<"TeachersCoursePlanning"> | string
    credit?: IntFilter<"TeachersCoursePlanning"> | number
    courseId?: IntFilter<"TeachersCoursePlanning"> | number
    departmentId?: IntFilter<"TeachersCoursePlanning"> | number
    createdAt?: DateTimeNullableFilter<"TeachersCoursePlanning"> | Date | string | null
    departmentOfEduId?: IntFilter<"TeachersCoursePlanning"> | number
    courseCode?: StringFilter<"TeachersCoursePlanning"> | string
    teacherMajorId?: IntFilter<"TeachersCoursePlanning"> | number
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    departmentOfEducation?: XOR<DepartmentsOfEducationScalarRelationFilter, DepartmentsOfEducationWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    teachersMajorPlanning?: XOR<TeachersMajorPlanningScalarRelationFilter, TeachersMajorPlanningWhereInput>
  }

  export type TeachersCoursePlanningOrderByWithRelationInput = {
    teacherCoursePlanningId?: SortOrder
    teacherId?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrderInput | SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    departmentOfEduId?: SortOrder
    courseCode?: SortOrder
    teacherMajorId?: SortOrder
    course?: CoursesOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    departmentOfEducation?: DepartmentsOfEducationOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
    teachersMajorPlanning?: TeachersMajorPlanningOrderByWithRelationInput
  }

  export type TeachersCoursePlanningWhereUniqueInput = Prisma.AtLeast<{
    teacherCoursePlanningId?: number
    teacherId_majorId_courseId?: TeachersCoursePlanningTeacherIdMajorIdCourseIdCompoundUniqueInput
    AND?: TeachersCoursePlanningWhereInput | TeachersCoursePlanningWhereInput[]
    OR?: TeachersCoursePlanningWhereInput[]
    NOT?: TeachersCoursePlanningWhereInput | TeachersCoursePlanningWhereInput[]
    teacherId?: IntFilter<"TeachersCoursePlanning"> | number
    majorName?: StringFilter<"TeachersCoursePlanning"> | string
    majorId?: DecimalNullableFilter<"TeachersCoursePlanning"> | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFilter<"TeachersCoursePlanning"> | string
    credit?: IntFilter<"TeachersCoursePlanning"> | number
    courseId?: IntFilter<"TeachersCoursePlanning"> | number
    departmentId?: IntFilter<"TeachersCoursePlanning"> | number
    createdAt?: DateTimeNullableFilter<"TeachersCoursePlanning"> | Date | string | null
    departmentOfEduId?: IntFilter<"TeachersCoursePlanning"> | number
    courseCode?: StringFilter<"TeachersCoursePlanning"> | string
    teacherMajorId?: IntFilter<"TeachersCoursePlanning"> | number
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    departmentOfEducation?: XOR<DepartmentsOfEducationScalarRelationFilter, DepartmentsOfEducationWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    teachersMajorPlanning?: XOR<TeachersMajorPlanningScalarRelationFilter, TeachersMajorPlanningWhereInput>
  }, "teacherCoursePlanningId" | "teacherId_majorId_courseId">

  export type TeachersCoursePlanningOrderByWithAggregationInput = {
    teacherCoursePlanningId?: SortOrder
    teacherId?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrderInput | SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    departmentOfEduId?: SortOrder
    courseCode?: SortOrder
    teacherMajorId?: SortOrder
    _count?: TeachersCoursePlanningCountOrderByAggregateInput
    _avg?: TeachersCoursePlanningAvgOrderByAggregateInput
    _max?: TeachersCoursePlanningMaxOrderByAggregateInput
    _min?: TeachersCoursePlanningMinOrderByAggregateInput
    _sum?: TeachersCoursePlanningSumOrderByAggregateInput
  }

  export type TeachersCoursePlanningScalarWhereWithAggregatesInput = {
    AND?: TeachersCoursePlanningScalarWhereWithAggregatesInput | TeachersCoursePlanningScalarWhereWithAggregatesInput[]
    OR?: TeachersCoursePlanningScalarWhereWithAggregatesInput[]
    NOT?: TeachersCoursePlanningScalarWhereWithAggregatesInput | TeachersCoursePlanningScalarWhereWithAggregatesInput[]
    teacherCoursePlanningId?: IntWithAggregatesFilter<"TeachersCoursePlanning"> | number
    teacherId?: IntWithAggregatesFilter<"TeachersCoursePlanning"> | number
    majorName?: StringWithAggregatesFilter<"TeachersCoursePlanning"> | string
    majorId?: DecimalNullableWithAggregatesFilter<"TeachersCoursePlanning"> | Decimal | DecimalJsLike | number | string | null
    courseName?: StringWithAggregatesFilter<"TeachersCoursePlanning"> | string
    credit?: IntWithAggregatesFilter<"TeachersCoursePlanning"> | number
    courseId?: IntWithAggregatesFilter<"TeachersCoursePlanning"> | number
    departmentId?: IntWithAggregatesFilter<"TeachersCoursePlanning"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"TeachersCoursePlanning"> | Date | string | null
    departmentOfEduId?: IntWithAggregatesFilter<"TeachersCoursePlanning"> | number
    courseCode?: StringWithAggregatesFilter<"TeachersCoursePlanning"> | string
    teacherMajorId?: IntWithAggregatesFilter<"TeachersCoursePlanning"> | number
  }

  export type ClassroomsWhereInput = {
    AND?: ClassroomsWhereInput | ClassroomsWhereInput[]
    OR?: ClassroomsWhereInput[]
    NOT?: ClassroomsWhereInput | ClassroomsWhereInput[]
    classroom_id?: IntFilter<"Classrooms"> | number
    department_id?: IntNullableFilter<"Classrooms"> | number | null
    classroom_type?: EnumClassroomTypeEnumFilter<"Classrooms"> | $Enums.ClassroomTypeEnum
    classroom_number?: StringFilter<"Classrooms"> | string
    projector?: EnumProjectorEnumFilter<"Classrooms"> | $Enums.ProjectorEnum
    tv?: EnumTvEnumFilter<"Classrooms"> | $Enums.TvEnum
    createdAt?: DateTimeNullableFilter<"Classrooms"> | Date | string | null
    capacity?: IntFilter<"Classrooms"> | number
    departmentOfEducation?: XOR<DepartmentsOfEducationNullableScalarRelationFilter, DepartmentsOfEducationWhereInput> | null
    TeacherSchedule?: TeacherScheduleListRelationFilter
    Department?: DepartmentListRelationFilter
  }

  export type ClassroomsOrderByWithRelationInput = {
    classroom_id?: SortOrder
    department_id?: SortOrderInput | SortOrder
    classroom_type?: SortOrder
    classroom_number?: SortOrder
    projector?: SortOrder
    tv?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    capacity?: SortOrder
    departmentOfEducation?: DepartmentsOfEducationOrderByWithRelationInput
    TeacherSchedule?: TeacherScheduleOrderByRelationAggregateInput
    Department?: DepartmentOrderByRelationAggregateInput
  }

  export type ClassroomsWhereUniqueInput = Prisma.AtLeast<{
    classroom_id?: number
    classroom_number?: string
    AND?: ClassroomsWhereInput | ClassroomsWhereInput[]
    OR?: ClassroomsWhereInput[]
    NOT?: ClassroomsWhereInput | ClassroomsWhereInput[]
    department_id?: IntNullableFilter<"Classrooms"> | number | null
    classroom_type?: EnumClassroomTypeEnumFilter<"Classrooms"> | $Enums.ClassroomTypeEnum
    projector?: EnumProjectorEnumFilter<"Classrooms"> | $Enums.ProjectorEnum
    tv?: EnumTvEnumFilter<"Classrooms"> | $Enums.TvEnum
    createdAt?: DateTimeNullableFilter<"Classrooms"> | Date | string | null
    capacity?: IntFilter<"Classrooms"> | number
    departmentOfEducation?: XOR<DepartmentsOfEducationNullableScalarRelationFilter, DepartmentsOfEducationWhereInput> | null
    TeacherSchedule?: TeacherScheduleListRelationFilter
    Department?: DepartmentListRelationFilter
  }, "classroom_id" | "classroom_number">

  export type ClassroomsOrderByWithAggregationInput = {
    classroom_id?: SortOrder
    department_id?: SortOrderInput | SortOrder
    classroom_type?: SortOrder
    classroom_number?: SortOrder
    projector?: SortOrder
    tv?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    capacity?: SortOrder
    _count?: ClassroomsCountOrderByAggregateInput
    _avg?: ClassroomsAvgOrderByAggregateInput
    _max?: ClassroomsMaxOrderByAggregateInput
    _min?: ClassroomsMinOrderByAggregateInput
    _sum?: ClassroomsSumOrderByAggregateInput
  }

  export type ClassroomsScalarWhereWithAggregatesInput = {
    AND?: ClassroomsScalarWhereWithAggregatesInput | ClassroomsScalarWhereWithAggregatesInput[]
    OR?: ClassroomsScalarWhereWithAggregatesInput[]
    NOT?: ClassroomsScalarWhereWithAggregatesInput | ClassroomsScalarWhereWithAggregatesInput[]
    classroom_id?: IntWithAggregatesFilter<"Classrooms"> | number
    department_id?: IntNullableWithAggregatesFilter<"Classrooms"> | number | null
    classroom_type?: EnumClassroomTypeEnumWithAggregatesFilter<"Classrooms"> | $Enums.ClassroomTypeEnum
    classroom_number?: StringWithAggregatesFilter<"Classrooms"> | string
    projector?: EnumProjectorEnumWithAggregatesFilter<"Classrooms"> | $Enums.ProjectorEnum
    tv?: EnumTvEnumWithAggregatesFilter<"Classrooms"> | $Enums.TvEnum
    createdAt?: DateTimeNullableWithAggregatesFilter<"Classrooms"> | Date | string | null
    capacity?: IntWithAggregatesFilter<"Classrooms"> | number
  }

  export type CoursesWhereInput = {
    AND?: CoursesWhereInput | CoursesWhereInput[]
    OR?: CoursesWhereInput[]
    NOT?: CoursesWhereInput | CoursesWhereInput[]
    courseId?: IntFilter<"Courses"> | number
    courseName?: StringFilter<"Courses"> | string
    courseCode?: StringFilter<"Courses"> | string
    courseType?: EnumCourseTypeEnumFilter<"Courses"> | $Enums.CourseTypeEnum
    courseYear?: StringFilter<"Courses"> | string
    totalCredits?: IntFilter<"Courses"> | number
    majorId?: IntFilter<"Courses"> | number
    description?: StringFilter<"Courses"> | string
    courseSeason?: EnumCourseSeasonTypeEnumFilter<"Courses"> | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: IntNullableFilter<"Courses"> | number | null
    departmentId?: IntNullableFilter<"Courses"> | number | null
    major?: XOR<MajorScalarRelationFilter, MajorWhereInput>
    TeacherSchedule?: TeacherScheduleListRelationFilter
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    StudentCurriculum?: StudentCurriculumListRelationFilter
  }

  export type CoursesOrderByWithRelationInput = {
    courseId?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    courseYear?: SortOrder
    totalCredits?: SortOrder
    majorId?: SortOrder
    description?: SortOrder
    courseSeason?: SortOrder
    timesPerWeek?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    major?: MajorOrderByWithRelationInput
    TeacherSchedule?: TeacherScheduleOrderByRelationAggregateInput
    TeachersCoursePlanning?: TeachersCoursePlanningOrderByRelationAggregateInput
    department?: DepartmentOrderByWithRelationInput
    StudentCurriculum?: StudentCurriculumOrderByRelationAggregateInput
  }

  export type CoursesWhereUniqueInput = Prisma.AtLeast<{
    courseId?: number
    courseName?: string
    AND?: CoursesWhereInput | CoursesWhereInput[]
    OR?: CoursesWhereInput[]
    NOT?: CoursesWhereInput | CoursesWhereInput[]
    courseCode?: StringFilter<"Courses"> | string
    courseType?: EnumCourseTypeEnumFilter<"Courses"> | $Enums.CourseTypeEnum
    courseYear?: StringFilter<"Courses"> | string
    totalCredits?: IntFilter<"Courses"> | number
    majorId?: IntFilter<"Courses"> | number
    description?: StringFilter<"Courses"> | string
    courseSeason?: EnumCourseSeasonTypeEnumFilter<"Courses"> | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: IntNullableFilter<"Courses"> | number | null
    departmentId?: IntNullableFilter<"Courses"> | number | null
    major?: XOR<MajorScalarRelationFilter, MajorWhereInput>
    TeacherSchedule?: TeacherScheduleListRelationFilter
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    StudentCurriculum?: StudentCurriculumListRelationFilter
  }, "courseId" | "courseName">

  export type CoursesOrderByWithAggregationInput = {
    courseId?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    courseYear?: SortOrder
    totalCredits?: SortOrder
    majorId?: SortOrder
    description?: SortOrder
    courseSeason?: SortOrder
    timesPerWeek?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    _count?: CoursesCountOrderByAggregateInput
    _avg?: CoursesAvgOrderByAggregateInput
    _max?: CoursesMaxOrderByAggregateInput
    _min?: CoursesMinOrderByAggregateInput
    _sum?: CoursesSumOrderByAggregateInput
  }

  export type CoursesScalarWhereWithAggregatesInput = {
    AND?: CoursesScalarWhereWithAggregatesInput | CoursesScalarWhereWithAggregatesInput[]
    OR?: CoursesScalarWhereWithAggregatesInput[]
    NOT?: CoursesScalarWhereWithAggregatesInput | CoursesScalarWhereWithAggregatesInput[]
    courseId?: IntWithAggregatesFilter<"Courses"> | number
    courseName?: StringWithAggregatesFilter<"Courses"> | string
    courseCode?: StringWithAggregatesFilter<"Courses"> | string
    courseType?: EnumCourseTypeEnumWithAggregatesFilter<"Courses"> | $Enums.CourseTypeEnum
    courseYear?: StringWithAggregatesFilter<"Courses"> | string
    totalCredits?: IntWithAggregatesFilter<"Courses"> | number
    majorId?: IntWithAggregatesFilter<"Courses"> | number
    description?: StringWithAggregatesFilter<"Courses"> | string
    courseSeason?: EnumCourseSeasonTypeEnumWithAggregatesFilter<"Courses"> | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: IntNullableWithAggregatesFilter<"Courses"> | number | null
    departmentId?: IntNullableWithAggregatesFilter<"Courses"> | number | null
  }

  export type TeachersMajorPlanningWhereInput = {
    AND?: TeachersMajorPlanningWhereInput | TeachersMajorPlanningWhereInput[]
    OR?: TeachersMajorPlanningWhereInput[]
    NOT?: TeachersMajorPlanningWhereInput | TeachersMajorPlanningWhereInput[]
    teacherMajorId?: IntFilter<"TeachersMajorPlanning"> | number
    teacherId?: IntFilter<"TeachersMajorPlanning"> | number
    academicDegreeOfMajor?: StringFilter<"TeachersMajorPlanning"> | string
    majorName?: StringFilter<"TeachersMajorPlanning"> | string
    majorId?: DecimalNullableFilter<"TeachersMajorPlanning"> | Decimal | DecimalJsLike | number | string | null
    credit?: IntFilter<"TeachersMajorPlanning"> | number
    departmentId?: IntFilter<"TeachersMajorPlanning"> | number
    createdAt?: DateTimeNullableFilter<"TeachersMajorPlanning"> | Date | string | null
    departmentOfEducationsId?: IntFilter<"TeachersMajorPlanning"> | number
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    departmentOfEducation?: XOR<DepartmentsOfEducationScalarRelationFilter, DepartmentsOfEducationWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
  }

  export type TeachersMajorPlanningOrderByWithRelationInput = {
    teacherMajorId?: SortOrder
    teacherId?: SortOrder
    academicDegreeOfMajor?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrderInput | SortOrder
    credit?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    departmentOfEducationsId?: SortOrder
    department?: DepartmentOrderByWithRelationInput
    departmentOfEducation?: DepartmentsOfEducationOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
    TeachersCoursePlanning?: TeachersCoursePlanningOrderByRelationAggregateInput
  }

  export type TeachersMajorPlanningWhereUniqueInput = Prisma.AtLeast<{
    teacherMajorId?: number
    teacherId_majorId?: TeachersMajorPlanningTeacherIdMajorIdCompoundUniqueInput
    AND?: TeachersMajorPlanningWhereInput | TeachersMajorPlanningWhereInput[]
    OR?: TeachersMajorPlanningWhereInput[]
    NOT?: TeachersMajorPlanningWhereInput | TeachersMajorPlanningWhereInput[]
    teacherId?: IntFilter<"TeachersMajorPlanning"> | number
    academicDegreeOfMajor?: StringFilter<"TeachersMajorPlanning"> | string
    majorName?: StringFilter<"TeachersMajorPlanning"> | string
    majorId?: DecimalNullableFilter<"TeachersMajorPlanning"> | Decimal | DecimalJsLike | number | string | null
    credit?: IntFilter<"TeachersMajorPlanning"> | number
    departmentId?: IntFilter<"TeachersMajorPlanning"> | number
    createdAt?: DateTimeNullableFilter<"TeachersMajorPlanning"> | Date | string | null
    departmentOfEducationsId?: IntFilter<"TeachersMajorPlanning"> | number
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    departmentOfEducation?: XOR<DepartmentsOfEducationScalarRelationFilter, DepartmentsOfEducationWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
  }, "teacherMajorId" | "teacherId_majorId">

  export type TeachersMajorPlanningOrderByWithAggregationInput = {
    teacherMajorId?: SortOrder
    teacherId?: SortOrder
    academicDegreeOfMajor?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrderInput | SortOrder
    credit?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    departmentOfEducationsId?: SortOrder
    _count?: TeachersMajorPlanningCountOrderByAggregateInput
    _avg?: TeachersMajorPlanningAvgOrderByAggregateInput
    _max?: TeachersMajorPlanningMaxOrderByAggregateInput
    _min?: TeachersMajorPlanningMinOrderByAggregateInput
    _sum?: TeachersMajorPlanningSumOrderByAggregateInput
  }

  export type TeachersMajorPlanningScalarWhereWithAggregatesInput = {
    AND?: TeachersMajorPlanningScalarWhereWithAggregatesInput | TeachersMajorPlanningScalarWhereWithAggregatesInput[]
    OR?: TeachersMajorPlanningScalarWhereWithAggregatesInput[]
    NOT?: TeachersMajorPlanningScalarWhereWithAggregatesInput | TeachersMajorPlanningScalarWhereWithAggregatesInput[]
    teacherMajorId?: IntWithAggregatesFilter<"TeachersMajorPlanning"> | number
    teacherId?: IntWithAggregatesFilter<"TeachersMajorPlanning"> | number
    academicDegreeOfMajor?: StringWithAggregatesFilter<"TeachersMajorPlanning"> | string
    majorName?: StringWithAggregatesFilter<"TeachersMajorPlanning"> | string
    majorId?: DecimalNullableWithAggregatesFilter<"TeachersMajorPlanning"> | Decimal | DecimalJsLike | number | string | null
    credit?: IntWithAggregatesFilter<"TeachersMajorPlanning"> | number
    departmentId?: IntWithAggregatesFilter<"TeachersMajorPlanning"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"TeachersMajorPlanning"> | Date | string | null
    departmentOfEducationsId?: IntWithAggregatesFilter<"TeachersMajorPlanning"> | number
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    teacherId?: IntFilter<"Teacher"> | number
    userId?: IntFilter<"Teacher"> | number
    teacherCode?: StringFilter<"Teacher"> | string
    teacherEmail?: StringFilter<"Teacher"> | string
    certificate?: StringNullableFilter<"Teacher"> | string | null
    profession?: StringFilter<"Teacher"> | string
    academicDegree?: StringFilter<"Teacher"> | string
    jobTitle?: StringNullableFilter<"Teacher"> | string | null
    isActive?: EnumIsActiveEnumFilter<"Teacher"> | $Enums.IsActiveEnum
    jobDescription?: StringFilter<"Teacher"> | string
    departmentsOfEducationId?: IntFilter<"Teacher"> | number
    departmentId?: IntNullableFilter<"Teacher"> | number | null
    auth_user?: XOR<Auth_userNullableScalarRelationFilter, auth_userWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    departmentsOfEducation?: XOR<DepartmentsOfEducationScalarRelationFilter, DepartmentsOfEducationWhereInput>
    TeacherSchedule?: TeacherScheduleListRelationFilter
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
    TeachersMajorPlanning?: TeachersMajorPlanningListRelationFilter
    StudentClubs?: StudentClubsListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    teacherId?: SortOrder
    userId?: SortOrder
    teacherCode?: SortOrder
    teacherEmail?: SortOrder
    certificate?: SortOrderInput | SortOrder
    profession?: SortOrder
    academicDegree?: SortOrder
    jobTitle?: SortOrderInput | SortOrder
    isActive?: SortOrder
    jobDescription?: SortOrder
    departmentsOfEducationId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    auth_user?: auth_userOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    departmentsOfEducation?: DepartmentsOfEducationOrderByWithRelationInput
    TeacherSchedule?: TeacherScheduleOrderByRelationAggregateInput
    TeachersCoursePlanning?: TeachersCoursePlanningOrderByRelationAggregateInput
    TeachersMajorPlanning?: TeachersMajorPlanningOrderByRelationAggregateInput
    StudentClubs?: StudentClubsOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    teacherId?: number
    userId?: number
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    teacherCode?: StringFilter<"Teacher"> | string
    teacherEmail?: StringFilter<"Teacher"> | string
    certificate?: StringNullableFilter<"Teacher"> | string | null
    profession?: StringFilter<"Teacher"> | string
    academicDegree?: StringFilter<"Teacher"> | string
    jobTitle?: StringNullableFilter<"Teacher"> | string | null
    isActive?: EnumIsActiveEnumFilter<"Teacher"> | $Enums.IsActiveEnum
    jobDescription?: StringFilter<"Teacher"> | string
    departmentsOfEducationId?: IntFilter<"Teacher"> | number
    departmentId?: IntNullableFilter<"Teacher"> | number | null
    auth_user?: XOR<Auth_userNullableScalarRelationFilter, auth_userWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    departmentsOfEducation?: XOR<DepartmentsOfEducationScalarRelationFilter, DepartmentsOfEducationWhereInput>
    TeacherSchedule?: TeacherScheduleListRelationFilter
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
    TeachersMajorPlanning?: TeachersMajorPlanningListRelationFilter
    StudentClubs?: StudentClubsListRelationFilter
  }, "teacherId" | "userId">

  export type TeacherOrderByWithAggregationInput = {
    teacherId?: SortOrder
    userId?: SortOrder
    teacherCode?: SortOrder
    teacherEmail?: SortOrder
    certificate?: SortOrderInput | SortOrder
    profession?: SortOrder
    academicDegree?: SortOrder
    jobTitle?: SortOrderInput | SortOrder
    isActive?: SortOrder
    jobDescription?: SortOrder
    departmentsOfEducationId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _avg?: TeacherAvgOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
    _sum?: TeacherSumOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    teacherId?: IntWithAggregatesFilter<"Teacher"> | number
    userId?: IntWithAggregatesFilter<"Teacher"> | number
    teacherCode?: StringWithAggregatesFilter<"Teacher"> | string
    teacherEmail?: StringWithAggregatesFilter<"Teacher"> | string
    certificate?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    profession?: StringWithAggregatesFilter<"Teacher"> | string
    academicDegree?: StringWithAggregatesFilter<"Teacher"> | string
    jobTitle?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    isActive?: EnumIsActiveEnumWithAggregatesFilter<"Teacher"> | $Enums.IsActiveEnum
    jobDescription?: StringWithAggregatesFilter<"Teacher"> | string
    departmentsOfEducationId?: IntWithAggregatesFilter<"Teacher"> | number
    departmentId?: IntNullableWithAggregatesFilter<"Teacher"> | number | null
  }

  export type StudentClubsWhereInput = {
    AND?: StudentClubsWhereInput | StudentClubsWhereInput[]
    OR?: StudentClubsWhereInput[]
    NOT?: StudentClubsWhereInput | StudentClubsWhereInput[]
    studentClubId?: IntFilter<"StudentClubs"> | number
    clubCode?: StringFilter<"StudentClubs"> | string
    clubName?: StringFilter<"StudentClubs"> | string
    clubMembers?: IntFilter<"StudentClubs"> | number
    clubType?: EnumClubTypeEnumFilter<"StudentClubs"> | $Enums.ClubTypeEnum
    clubMajorId?: IntFilter<"StudentClubs"> | number
    clubPrimaryLeaderId?: IntFilter<"StudentClubs"> | number
    clubAssistantLeaderId?: IntFilter<"StudentClubs"> | number
    clubAdvisorTeacherId?: IntFilter<"StudentClubs"> | number
    clubLogo?: StringFilter<"StudentClubs"> | string
    clubMoto?: StringFilter<"StudentClubs"> | string
    createdAt?: DateTimeNullableFilter<"StudentClubs"> | Date | string | null
    club_advisor_teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    clubAssistantLeader?: XOR<Auth_userScalarRelationFilter, auth_userWhereInput>
    clubMajor?: XOR<MajorScalarRelationFilter, MajorWhereInput>
    clubPrimaryLeader?: XOR<Auth_userScalarRelationFilter, auth_userWhereInput>
    Student?: StudentListRelationFilter
  }

  export type StudentClubsOrderByWithRelationInput = {
    studentClubId?: SortOrder
    clubCode?: SortOrder
    clubName?: SortOrder
    clubMembers?: SortOrder
    clubType?: SortOrder
    clubMajorId?: SortOrder
    clubPrimaryLeaderId?: SortOrder
    clubAssistantLeaderId?: SortOrder
    clubAdvisorTeacherId?: SortOrder
    clubLogo?: SortOrder
    clubMoto?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    club_advisor_teacher?: TeacherOrderByWithRelationInput
    clubAssistantLeader?: auth_userOrderByWithRelationInput
    clubMajor?: MajorOrderByWithRelationInput
    clubPrimaryLeader?: auth_userOrderByWithRelationInput
    Student?: StudentOrderByRelationAggregateInput
  }

  export type StudentClubsWhereUniqueInput = Prisma.AtLeast<{
    studentClubId?: number
    clubCode?: string
    AND?: StudentClubsWhereInput | StudentClubsWhereInput[]
    OR?: StudentClubsWhereInput[]
    NOT?: StudentClubsWhereInput | StudentClubsWhereInput[]
    clubName?: StringFilter<"StudentClubs"> | string
    clubMembers?: IntFilter<"StudentClubs"> | number
    clubType?: EnumClubTypeEnumFilter<"StudentClubs"> | $Enums.ClubTypeEnum
    clubMajorId?: IntFilter<"StudentClubs"> | number
    clubPrimaryLeaderId?: IntFilter<"StudentClubs"> | number
    clubAssistantLeaderId?: IntFilter<"StudentClubs"> | number
    clubAdvisorTeacherId?: IntFilter<"StudentClubs"> | number
    clubLogo?: StringFilter<"StudentClubs"> | string
    clubMoto?: StringFilter<"StudentClubs"> | string
    createdAt?: DateTimeNullableFilter<"StudentClubs"> | Date | string | null
    club_advisor_teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    clubAssistantLeader?: XOR<Auth_userScalarRelationFilter, auth_userWhereInput>
    clubMajor?: XOR<MajorScalarRelationFilter, MajorWhereInput>
    clubPrimaryLeader?: XOR<Auth_userScalarRelationFilter, auth_userWhereInput>
    Student?: StudentListRelationFilter
  }, "studentClubId" | "clubCode">

  export type StudentClubsOrderByWithAggregationInput = {
    studentClubId?: SortOrder
    clubCode?: SortOrder
    clubName?: SortOrder
    clubMembers?: SortOrder
    clubType?: SortOrder
    clubMajorId?: SortOrder
    clubPrimaryLeaderId?: SortOrder
    clubAssistantLeaderId?: SortOrder
    clubAdvisorTeacherId?: SortOrder
    clubLogo?: SortOrder
    clubMoto?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: StudentClubsCountOrderByAggregateInput
    _avg?: StudentClubsAvgOrderByAggregateInput
    _max?: StudentClubsMaxOrderByAggregateInput
    _min?: StudentClubsMinOrderByAggregateInput
    _sum?: StudentClubsSumOrderByAggregateInput
  }

  export type StudentClubsScalarWhereWithAggregatesInput = {
    AND?: StudentClubsScalarWhereWithAggregatesInput | StudentClubsScalarWhereWithAggregatesInput[]
    OR?: StudentClubsScalarWhereWithAggregatesInput[]
    NOT?: StudentClubsScalarWhereWithAggregatesInput | StudentClubsScalarWhereWithAggregatesInput[]
    studentClubId?: IntWithAggregatesFilter<"StudentClubs"> | number
    clubCode?: StringWithAggregatesFilter<"StudentClubs"> | string
    clubName?: StringWithAggregatesFilter<"StudentClubs"> | string
    clubMembers?: IntWithAggregatesFilter<"StudentClubs"> | number
    clubType?: EnumClubTypeEnumWithAggregatesFilter<"StudentClubs"> | $Enums.ClubTypeEnum
    clubMajorId?: IntWithAggregatesFilter<"StudentClubs"> | number
    clubPrimaryLeaderId?: IntWithAggregatesFilter<"StudentClubs"> | number
    clubAssistantLeaderId?: IntWithAggregatesFilter<"StudentClubs"> | number
    clubAdvisorTeacherId?: IntWithAggregatesFilter<"StudentClubs"> | number
    clubLogo?: StringWithAggregatesFilter<"StudentClubs"> | string
    clubMoto?: StringWithAggregatesFilter<"StudentClubs"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"StudentClubs"> | Date | string | null
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    student_id?: IntFilter<"Student"> | number
    user_id?: IntFilter<"Student"> | number
    student_club_id?: IntNullableFilter<"Student"> | number | null
    additional_roles?: EnumAdditionalRolesEnumFilter<"Student"> | $Enums.AdditionalRolesEnum
    student_code?: StringFilter<"Student"> | string
    student_email?: StringFilter<"Student"> | string
    student_file?: JsonNullableFilter<"Student">
    enrollment_number?: IntFilter<"Student"> | number
    enrollment_year?: IntFilter<"Student"> | number
    year_classification?: EnumYearClassificationEnumFilter<"Student"> | $Enums.YearClassificationEnum
    is_active?: EnumStudentIsActiveEnumNullableFilter<"Student"> | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFilter<"Student"> | string
    academic_degree_file?: StringNullableFilter<"Student"> | string | null
    major_id?: IntFilter<"Student"> | number
    created_at?: DateTimeNullableFilter<"Student"> | Date | string | null
    contracts?: JsonNullableFilter<"Student">
    department_id?: IntNullableFilter<"Student"> | number | null
    auth_user?: XOR<Auth_userNullableScalarRelationFilter, auth_userWhereInput> | null
    major?: XOR<MajorScalarRelationFilter, MajorWhereInput>
    student_clubs?: XOR<StudentClubsNullableScalarRelationFilter, StudentClubsWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    StudentCurriculum?: StudentCurriculumListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    student_id?: SortOrder
    user_id?: SortOrder
    student_club_id?: SortOrderInput | SortOrder
    additional_roles?: SortOrder
    student_code?: SortOrder
    student_email?: SortOrder
    student_file?: SortOrderInput | SortOrder
    enrollment_number?: SortOrder
    enrollment_year?: SortOrder
    year_classification?: SortOrder
    is_active?: SortOrderInput | SortOrder
    current_academic_degree?: SortOrder
    academic_degree_file?: SortOrderInput | SortOrder
    major_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    contracts?: SortOrderInput | SortOrder
    department_id?: SortOrderInput | SortOrder
    auth_user?: auth_userOrderByWithRelationInput
    major?: MajorOrderByWithRelationInput
    student_clubs?: StudentClubsOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    StudentCurriculum?: StudentCurriculumOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    student_id?: number
    user_id?: number
    enrollment_number?: number
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    student_club_id?: IntNullableFilter<"Student"> | number | null
    additional_roles?: EnumAdditionalRolesEnumFilter<"Student"> | $Enums.AdditionalRolesEnum
    student_code?: StringFilter<"Student"> | string
    student_email?: StringFilter<"Student"> | string
    student_file?: JsonNullableFilter<"Student">
    enrollment_year?: IntFilter<"Student"> | number
    year_classification?: EnumYearClassificationEnumFilter<"Student"> | $Enums.YearClassificationEnum
    is_active?: EnumStudentIsActiveEnumNullableFilter<"Student"> | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFilter<"Student"> | string
    academic_degree_file?: StringNullableFilter<"Student"> | string | null
    major_id?: IntFilter<"Student"> | number
    created_at?: DateTimeNullableFilter<"Student"> | Date | string | null
    contracts?: JsonNullableFilter<"Student">
    department_id?: IntNullableFilter<"Student"> | number | null
    auth_user?: XOR<Auth_userNullableScalarRelationFilter, auth_userWhereInput> | null
    major?: XOR<MajorScalarRelationFilter, MajorWhereInput>
    student_clubs?: XOR<StudentClubsNullableScalarRelationFilter, StudentClubsWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    StudentCurriculum?: StudentCurriculumListRelationFilter
  }, "student_id" | "user_id" | "enrollment_number">

  export type StudentOrderByWithAggregationInput = {
    student_id?: SortOrder
    user_id?: SortOrder
    student_club_id?: SortOrderInput | SortOrder
    additional_roles?: SortOrder
    student_code?: SortOrder
    student_email?: SortOrder
    student_file?: SortOrderInput | SortOrder
    enrollment_number?: SortOrder
    enrollment_year?: SortOrder
    year_classification?: SortOrder
    is_active?: SortOrderInput | SortOrder
    current_academic_degree?: SortOrder
    academic_degree_file?: SortOrderInput | SortOrder
    major_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    contracts?: SortOrderInput | SortOrder
    department_id?: SortOrderInput | SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    student_id?: IntWithAggregatesFilter<"Student"> | number
    user_id?: IntWithAggregatesFilter<"Student"> | number
    student_club_id?: IntNullableWithAggregatesFilter<"Student"> | number | null
    additional_roles?: EnumAdditionalRolesEnumWithAggregatesFilter<"Student"> | $Enums.AdditionalRolesEnum
    student_code?: StringWithAggregatesFilter<"Student"> | string
    student_email?: StringWithAggregatesFilter<"Student"> | string
    student_file?: JsonNullableWithAggregatesFilter<"Student">
    enrollment_number?: IntWithAggregatesFilter<"Student"> | number
    enrollment_year?: IntWithAggregatesFilter<"Student"> | number
    year_classification?: EnumYearClassificationEnumWithAggregatesFilter<"Student"> | $Enums.YearClassificationEnum
    is_active?: EnumStudentIsActiveEnumNullableWithAggregatesFilter<"Student"> | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringWithAggregatesFilter<"Student"> | string
    academic_degree_file?: StringNullableWithAggregatesFilter<"Student"> | string | null
    major_id?: IntWithAggregatesFilter<"Student"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"Student"> | Date | string | null
    contracts?: JsonNullableWithAggregatesFilter<"Student">
    department_id?: IntNullableWithAggregatesFilter<"Student"> | number | null
  }

  export type MajorWhereInput = {
    AND?: MajorWhereInput | MajorWhereInput[]
    OR?: MajorWhereInput[]
    NOT?: MajorWhereInput | MajorWhereInput[]
    major_id?: IntFilter<"Major"> | number
    major_name?: StringFilter<"Major"> | string
    majors_year?: DateTimeFilter<"Major"> | Date | string
    majors_type?: EnumMajorTypeEnumFilter<"Major"> | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFilter<"Major"> | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFilter<"Major"> | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFilter<"Major"> | string
    total_years?: IntFilter<"Major"> | number
    total_credits_per_year?: IntFilter<"Major"> | number
    department_of_edu_id?: IntFilter<"Major"> | number
    created_at?: DateTimeNullableFilter<"Major"> | Date | string | null
    exam1?: FloatFilter<"Major"> | number
    exam2?: FloatFilter<"Major"> | number
    majors_description?: StringFilter<"Major"> | string
    description_brief?: StringNullableFilter<"Major"> | string | null
    qualifications?: JsonNullableFilter<"Major">
    qualifications1?: StringNullableFilter<"Major"> | string | null
    qualifications2?: StringNullableFilter<"Major"> | string | null
    sign_ups?: EnumSignUpsEnumFilter<"Major"> | $Enums.SignUpsEnum
    department_id?: IntFilter<"Major"> | number
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    departmentOfEdu?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    Courses?: CoursesListRelationFilter
    Student?: StudentListRelationFilter
    StudentClubs?: StudentClubsListRelationFilter
  }

  export type MajorOrderByWithRelationInput = {
    major_id?: SortOrder
    major_name?: SortOrder
    majors_year?: SortOrder
    majors_type?: SortOrder
    credit_unit_rate?: SortOrder
    major_tuition?: SortOrder
    academic_degree?: SortOrder
    total_years?: SortOrder
    total_credits_per_year?: SortOrder
    department_of_edu_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    exam1?: SortOrder
    exam2?: SortOrder
    majors_description?: SortOrder
    description_brief?: SortOrderInput | SortOrder
    qualifications?: SortOrderInput | SortOrder
    qualifications1?: SortOrderInput | SortOrder
    qualifications2?: SortOrderInput | SortOrder
    sign_ups?: SortOrder
    department_id?: SortOrder
    department?: DepartmentOrderByWithRelationInput
    departmentOfEdu?: DepartmentOrderByWithRelationInput
    Courses?: CoursesOrderByRelationAggregateInput
    Student?: StudentOrderByRelationAggregateInput
    StudentClubs?: StudentClubsOrderByRelationAggregateInput
  }

  export type MajorWhereUniqueInput = Prisma.AtLeast<{
    major_id?: number
    major_name?: string
    AND?: MajorWhereInput | MajorWhereInput[]
    OR?: MajorWhereInput[]
    NOT?: MajorWhereInput | MajorWhereInput[]
    majors_year?: DateTimeFilter<"Major"> | Date | string
    majors_type?: EnumMajorTypeEnumFilter<"Major"> | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFilter<"Major"> | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFilter<"Major"> | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFilter<"Major"> | string
    total_years?: IntFilter<"Major"> | number
    total_credits_per_year?: IntFilter<"Major"> | number
    department_of_edu_id?: IntFilter<"Major"> | number
    created_at?: DateTimeNullableFilter<"Major"> | Date | string | null
    exam1?: FloatFilter<"Major"> | number
    exam2?: FloatFilter<"Major"> | number
    majors_description?: StringFilter<"Major"> | string
    description_brief?: StringNullableFilter<"Major"> | string | null
    qualifications?: JsonNullableFilter<"Major">
    qualifications1?: StringNullableFilter<"Major"> | string | null
    qualifications2?: StringNullableFilter<"Major"> | string | null
    sign_ups?: EnumSignUpsEnumFilter<"Major"> | $Enums.SignUpsEnum
    department_id?: IntFilter<"Major"> | number
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    departmentOfEdu?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    Courses?: CoursesListRelationFilter
    Student?: StudentListRelationFilter
    StudentClubs?: StudentClubsListRelationFilter
  }, "major_id" | "major_name">

  export type MajorOrderByWithAggregationInput = {
    major_id?: SortOrder
    major_name?: SortOrder
    majors_year?: SortOrder
    majors_type?: SortOrder
    credit_unit_rate?: SortOrder
    major_tuition?: SortOrder
    academic_degree?: SortOrder
    total_years?: SortOrder
    total_credits_per_year?: SortOrder
    department_of_edu_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    exam1?: SortOrder
    exam2?: SortOrder
    majors_description?: SortOrder
    description_brief?: SortOrderInput | SortOrder
    qualifications?: SortOrderInput | SortOrder
    qualifications1?: SortOrderInput | SortOrder
    qualifications2?: SortOrderInput | SortOrder
    sign_ups?: SortOrder
    department_id?: SortOrder
    _count?: MajorCountOrderByAggregateInput
    _avg?: MajorAvgOrderByAggregateInput
    _max?: MajorMaxOrderByAggregateInput
    _min?: MajorMinOrderByAggregateInput
    _sum?: MajorSumOrderByAggregateInput
  }

  export type MajorScalarWhereWithAggregatesInput = {
    AND?: MajorScalarWhereWithAggregatesInput | MajorScalarWhereWithAggregatesInput[]
    OR?: MajorScalarWhereWithAggregatesInput[]
    NOT?: MajorScalarWhereWithAggregatesInput | MajorScalarWhereWithAggregatesInput[]
    major_id?: IntWithAggregatesFilter<"Major"> | number
    major_name?: StringWithAggregatesFilter<"Major"> | string
    majors_year?: DateTimeWithAggregatesFilter<"Major"> | Date | string
    majors_type?: EnumMajorTypeEnumWithAggregatesFilter<"Major"> | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalWithAggregatesFilter<"Major"> | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalWithAggregatesFilter<"Major"> | Decimal | DecimalJsLike | number | string
    academic_degree?: StringWithAggregatesFilter<"Major"> | string
    total_years?: IntWithAggregatesFilter<"Major"> | number
    total_credits_per_year?: IntWithAggregatesFilter<"Major"> | number
    department_of_edu_id?: IntWithAggregatesFilter<"Major"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"Major"> | Date | string | null
    exam1?: FloatWithAggregatesFilter<"Major"> | number
    exam2?: FloatWithAggregatesFilter<"Major"> | number
    majors_description?: StringWithAggregatesFilter<"Major"> | string
    description_brief?: StringNullableWithAggregatesFilter<"Major"> | string | null
    qualifications?: JsonNullableWithAggregatesFilter<"Major">
    qualifications1?: StringNullableWithAggregatesFilter<"Major"> | string | null
    qualifications2?: StringNullableWithAggregatesFilter<"Major"> | string | null
    sign_ups?: EnumSignUpsEnumWithAggregatesFilter<"Major"> | $Enums.SignUpsEnum
    department_id?: IntWithAggregatesFilter<"Major"> | number
  }

  export type DepartmentsOfEducationWhereInput = {
    AND?: DepartmentsOfEducationWhereInput | DepartmentsOfEducationWhereInput[]
    OR?: DepartmentsOfEducationWhereInput[]
    NOT?: DepartmentsOfEducationWhereInput | DepartmentsOfEducationWhereInput[]
    departmentsOfEducationId?: IntFilter<"DepartmentsOfEducation"> | number
    edDepartmentName?: StringFilter<"DepartmentsOfEducation"> | string
    edDepartmentCode?: StringFilter<"DepartmentsOfEducation"> | string
    teachers?: JsonNullableFilter<"DepartmentsOfEducation">
    Classrooms?: ClassroomsListRelationFilter
    Teacher?: TeacherListRelationFilter
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
    TeachersMajorPlanning?: TeachersMajorPlanningListRelationFilter
    Department?: DepartmentListRelationFilter
  }

  export type DepartmentsOfEducationOrderByWithRelationInput = {
    departmentsOfEducationId?: SortOrder
    edDepartmentName?: SortOrder
    edDepartmentCode?: SortOrder
    teachers?: SortOrderInput | SortOrder
    Classrooms?: ClassroomsOrderByRelationAggregateInput
    Teacher?: TeacherOrderByRelationAggregateInput
    TeachersCoursePlanning?: TeachersCoursePlanningOrderByRelationAggregateInput
    TeachersMajorPlanning?: TeachersMajorPlanningOrderByRelationAggregateInput
    Department?: DepartmentOrderByRelationAggregateInput
  }

  export type DepartmentsOfEducationWhereUniqueInput = Prisma.AtLeast<{
    departmentsOfEducationId?: number
    AND?: DepartmentsOfEducationWhereInput | DepartmentsOfEducationWhereInput[]
    OR?: DepartmentsOfEducationWhereInput[]
    NOT?: DepartmentsOfEducationWhereInput | DepartmentsOfEducationWhereInput[]
    edDepartmentName?: StringFilter<"DepartmentsOfEducation"> | string
    edDepartmentCode?: StringFilter<"DepartmentsOfEducation"> | string
    teachers?: JsonNullableFilter<"DepartmentsOfEducation">
    Classrooms?: ClassroomsListRelationFilter
    Teacher?: TeacherListRelationFilter
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
    TeachersMajorPlanning?: TeachersMajorPlanningListRelationFilter
    Department?: DepartmentListRelationFilter
  }, "departmentsOfEducationId">

  export type DepartmentsOfEducationOrderByWithAggregationInput = {
    departmentsOfEducationId?: SortOrder
    edDepartmentName?: SortOrder
    edDepartmentCode?: SortOrder
    teachers?: SortOrderInput | SortOrder
    _count?: DepartmentsOfEducationCountOrderByAggregateInput
    _avg?: DepartmentsOfEducationAvgOrderByAggregateInput
    _max?: DepartmentsOfEducationMaxOrderByAggregateInput
    _min?: DepartmentsOfEducationMinOrderByAggregateInput
    _sum?: DepartmentsOfEducationSumOrderByAggregateInput
  }

  export type DepartmentsOfEducationScalarWhereWithAggregatesInput = {
    AND?: DepartmentsOfEducationScalarWhereWithAggregatesInput | DepartmentsOfEducationScalarWhereWithAggregatesInput[]
    OR?: DepartmentsOfEducationScalarWhereWithAggregatesInput[]
    NOT?: DepartmentsOfEducationScalarWhereWithAggregatesInput | DepartmentsOfEducationScalarWhereWithAggregatesInput[]
    departmentsOfEducationId?: IntWithAggregatesFilter<"DepartmentsOfEducation"> | number
    edDepartmentName?: StringWithAggregatesFilter<"DepartmentsOfEducation"> | string
    edDepartmentCode?: StringWithAggregatesFilter<"DepartmentsOfEducation"> | string
    teachers?: JsonNullableWithAggregatesFilter<"DepartmentsOfEducation">
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    department_id?: IntFilter<"Department"> | number
    department_name?: StringFilter<"Department"> | string
    department_code?: StringFilter<"Department"> | string
    department_email?: StringFilter<"Department"> | string
    number_of_staff?: IntNullableFilter<"Department"> | number | null
    logo?: StringFilter<"Department"> | string
    created_at?: DateTimeNullableFilter<"Department"> | Date | string | null
    department_of_edu_id?: IntFilter<"Department"> | number
    departmentOfEducation?: XOR<DepartmentsOfEducationScalarRelationFilter, DepartmentsOfEducationWhereInput>
    Classrooms?: ClassroomsListRelationFilter
    Courses?: CoursesListRelationFilter
    majors?: MajorListRelationFilter
    majorsOfEducation?: MajorListRelationFilter
    Student?: StudentListRelationFilter
    Teacher?: TeacherListRelationFilter
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
    TeachersMajorPlanning?: TeachersMajorPlanningListRelationFilter
    teacherSchedules?: TeacherScheduleListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    department_code?: SortOrder
    department_email?: SortOrder
    number_of_staff?: SortOrderInput | SortOrder
    logo?: SortOrder
    created_at?: SortOrderInput | SortOrder
    department_of_edu_id?: SortOrder
    departmentOfEducation?: DepartmentsOfEducationOrderByWithRelationInput
    Classrooms?: ClassroomsOrderByRelationAggregateInput
    Courses?: CoursesOrderByRelationAggregateInput
    majors?: MajorOrderByRelationAggregateInput
    majorsOfEducation?: MajorOrderByRelationAggregateInput
    Student?: StudentOrderByRelationAggregateInput
    Teacher?: TeacherOrderByRelationAggregateInput
    TeachersCoursePlanning?: TeachersCoursePlanningOrderByRelationAggregateInput
    TeachersMajorPlanning?: TeachersMajorPlanningOrderByRelationAggregateInput
    teacherSchedules?: TeacherScheduleOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    department_id?: number
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    department_name?: StringFilter<"Department"> | string
    department_code?: StringFilter<"Department"> | string
    department_email?: StringFilter<"Department"> | string
    number_of_staff?: IntNullableFilter<"Department"> | number | null
    logo?: StringFilter<"Department"> | string
    created_at?: DateTimeNullableFilter<"Department"> | Date | string | null
    department_of_edu_id?: IntFilter<"Department"> | number
    departmentOfEducation?: XOR<DepartmentsOfEducationScalarRelationFilter, DepartmentsOfEducationWhereInput>
    Classrooms?: ClassroomsListRelationFilter
    Courses?: CoursesListRelationFilter
    majors?: MajorListRelationFilter
    majorsOfEducation?: MajorListRelationFilter
    Student?: StudentListRelationFilter
    Teacher?: TeacherListRelationFilter
    TeachersCoursePlanning?: TeachersCoursePlanningListRelationFilter
    TeachersMajorPlanning?: TeachersMajorPlanningListRelationFilter
    teacherSchedules?: TeacherScheduleListRelationFilter
  }, "department_id">

  export type DepartmentOrderByWithAggregationInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    department_code?: SortOrder
    department_email?: SortOrder
    number_of_staff?: SortOrderInput | SortOrder
    logo?: SortOrder
    created_at?: SortOrderInput | SortOrder
    department_of_edu_id?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    department_id?: IntWithAggregatesFilter<"Department"> | number
    department_name?: StringWithAggregatesFilter<"Department"> | string
    department_code?: StringWithAggregatesFilter<"Department"> | string
    department_email?: StringWithAggregatesFilter<"Department"> | string
    number_of_staff?: IntNullableWithAggregatesFilter<"Department"> | number | null
    logo?: StringWithAggregatesFilter<"Department"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"Department"> | Date | string | null
    department_of_edu_id?: IntWithAggregatesFilter<"Department"> | number
  }

  export type StudentCurriculumWhereInput = {
    AND?: StudentCurriculumWhereInput | StudentCurriculumWhereInput[]
    OR?: StudentCurriculumWhereInput[]
    NOT?: StudentCurriculumWhereInput | StudentCurriculumWhereInput[]
    studentCurriculumId?: IntFilter<"StudentCurriculum"> | number
    studentId?: IntFilter<"StudentCurriculum"> | number
    courseId?: IntFilter<"StudentCurriculum"> | number
    credit?: IntFilter<"StudentCurriculum"> | number
    studentYear?: DateTimeFilter<"StudentCurriculum"> | Date | string
    semesterYear?: StringFilter<"StudentCurriculum"> | string
    modifiedAt?: DateTimeNullableFilter<"StudentCurriculum"> | Date | string | null
    courseCode?: StringFilter<"StudentCurriculum"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
  }

  export type StudentCurriculumOrderByWithRelationInput = {
    studentCurriculumId?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    credit?: SortOrder
    studentYear?: SortOrder
    semesterYear?: SortOrder
    modifiedAt?: SortOrderInput | SortOrder
    courseCode?: SortOrder
    student?: StudentOrderByWithRelationInput
    course?: CoursesOrderByWithRelationInput
  }

  export type StudentCurriculumWhereUniqueInput = Prisma.AtLeast<{
    studentCurriculumId?: number
    AND?: StudentCurriculumWhereInput | StudentCurriculumWhereInput[]
    OR?: StudentCurriculumWhereInput[]
    NOT?: StudentCurriculumWhereInput | StudentCurriculumWhereInput[]
    studentId?: IntFilter<"StudentCurriculum"> | number
    courseId?: IntFilter<"StudentCurriculum"> | number
    credit?: IntFilter<"StudentCurriculum"> | number
    studentYear?: DateTimeFilter<"StudentCurriculum"> | Date | string
    semesterYear?: StringFilter<"StudentCurriculum"> | string
    modifiedAt?: DateTimeNullableFilter<"StudentCurriculum"> | Date | string | null
    courseCode?: StringFilter<"StudentCurriculum"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
  }, "studentCurriculumId">

  export type StudentCurriculumOrderByWithAggregationInput = {
    studentCurriculumId?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    credit?: SortOrder
    studentYear?: SortOrder
    semesterYear?: SortOrder
    modifiedAt?: SortOrderInput | SortOrder
    courseCode?: SortOrder
    _count?: StudentCurriculumCountOrderByAggregateInput
    _avg?: StudentCurriculumAvgOrderByAggregateInput
    _max?: StudentCurriculumMaxOrderByAggregateInput
    _min?: StudentCurriculumMinOrderByAggregateInput
    _sum?: StudentCurriculumSumOrderByAggregateInput
  }

  export type StudentCurriculumScalarWhereWithAggregatesInput = {
    AND?: StudentCurriculumScalarWhereWithAggregatesInput | StudentCurriculumScalarWhereWithAggregatesInput[]
    OR?: StudentCurriculumScalarWhereWithAggregatesInput[]
    NOT?: StudentCurriculumScalarWhereWithAggregatesInput | StudentCurriculumScalarWhereWithAggregatesInput[]
    studentCurriculumId?: IntWithAggregatesFilter<"StudentCurriculum"> | number
    studentId?: IntWithAggregatesFilter<"StudentCurriculum"> | number
    courseId?: IntWithAggregatesFilter<"StudentCurriculum"> | number
    credit?: IntWithAggregatesFilter<"StudentCurriculum"> | number
    studentYear?: DateTimeWithAggregatesFilter<"StudentCurriculum"> | Date | string
    semesterYear?: StringWithAggregatesFilter<"StudentCurriculum"> | string
    modifiedAt?: DateTimeNullableWithAggregatesFilter<"StudentCurriculum"> | Date | string | null
    courseCode?: StringWithAggregatesFilter<"StudentCurriculum"> | string
  }

  export type auth_userCreateInput = {
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    Teacher?: TeacherCreateNestedManyWithoutAuth_userInput
    assistantLeaderIn?: StudentClubsCreateNestedManyWithoutClubAssistantLeaderInput
    primaryLeaderIn?: StudentClubsCreateNestedManyWithoutClubPrimaryLeaderInput
    Student?: StudentCreateNestedManyWithoutAuth_userInput
  }

  export type auth_userUncheckedCreateInput = {
    user_id?: number
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    Teacher?: TeacherUncheckedCreateNestedManyWithoutAuth_userInput
    assistantLeaderIn?: StudentClubsUncheckedCreateNestedManyWithoutClubAssistantLeaderInput
    primaryLeaderIn?: StudentClubsUncheckedCreateNestedManyWithoutClubPrimaryLeaderInput
    Student?: StudentUncheckedCreateNestedManyWithoutAuth_userInput
  }

  export type auth_userUpdateInput = {
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUpdateManyWithoutAuth_userNestedInput
    assistantLeaderIn?: StudentClubsUpdateManyWithoutClubAssistantLeaderNestedInput
    primaryLeaderIn?: StudentClubsUpdateManyWithoutClubPrimaryLeaderNestedInput
    Student?: StudentUpdateManyWithoutAuth_userNestedInput
  }

  export type auth_userUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUncheckedUpdateManyWithoutAuth_userNestedInput
    assistantLeaderIn?: StudentClubsUncheckedUpdateManyWithoutClubAssistantLeaderNestedInput
    primaryLeaderIn?: StudentClubsUncheckedUpdateManyWithoutClubPrimaryLeaderNestedInput
    Student?: StudentUncheckedUpdateManyWithoutAuth_userNestedInput
  }

  export type auth_userCreateManyInput = {
    user_id?: number
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
  }

  export type auth_userUpdateManyMutationInput = {
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
  }

  export type auth_userUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherScheduleCreateInput = {
    weekDay: string
    periodOfClass: string
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    createdAt?: Date | string | null
    classroom: ClassroomsCreateNestedOneWithoutTeacherScheduleInput
    course: CoursesCreateNestedOneWithoutTeacherScheduleInput
    department: DepartmentCreateNestedOneWithoutTeacherSchedulesInput
    teacher: TeacherCreateNestedOneWithoutTeacherScheduleInput
  }

  export type TeacherScheduleUncheckedCreateInput = {
    teacherScheduleId?: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type TeacherScheduleUpdateInput = {
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classroom?: ClassroomsUpdateOneRequiredWithoutTeacherScheduleNestedInput
    course?: CoursesUpdateOneRequiredWithoutTeacherScheduleNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeacherSchedulesNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeacherScheduleNestedInput
  }

  export type TeacherScheduleUncheckedUpdateInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classroomId?: IntFieldUpdateOperationsInput | number
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeacherScheduleCreateManyInput = {
    teacherScheduleId?: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type TeacherScheduleUpdateManyMutationInput = {
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeacherScheduleUncheckedUpdateManyInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classroomId?: IntFieldUpdateOperationsInput | number
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeachersCoursePlanningCreateInput = {
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    createdAt?: Date | string | null
    courseCode: string
    course: CoursesCreateNestedOneWithoutTeachersCoursePlanningInput
    department: DepartmentCreateNestedOneWithoutTeachersCoursePlanningInput
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersCoursePlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersCoursePlanningInput
    teachersMajorPlanning: TeachersMajorPlanningCreateNestedOneWithoutTeachersCoursePlanningInput
  }

  export type TeachersCoursePlanningUncheckedCreateInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersCoursePlanningUpdateInput = {
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    course?: CoursesUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teachersMajorPlanning?: TeachersMajorPlanningUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
  }

  export type TeachersCoursePlanningUncheckedUpdateInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersCoursePlanningCreateManyInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersCoursePlanningUpdateManyMutationInput = {
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type TeachersCoursePlanningUncheckedUpdateManyInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassroomsCreateInput = {
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
    departmentOfEducation?: DepartmentsOfEducationCreateNestedOneWithoutClassroomsInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutClassroomInput
    Department?: DepartmentCreateNestedManyWithoutClassroomsInput
  }

  export type ClassroomsUncheckedCreateInput = {
    classroom_id?: number
    department_id?: number | null
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutClassroomInput
    Department?: DepartmentUncheckedCreateNestedManyWithoutClassroomsInput
  }

  export type ClassroomsUpdateInput = {
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    departmentOfEducation?: DepartmentsOfEducationUpdateOneWithoutClassroomsNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutClassroomNestedInput
    Department?: DepartmentUpdateManyWithoutClassroomsNestedInput
  }

  export type ClassroomsUncheckedUpdateInput = {
    classroom_id?: IntFieldUpdateOperationsInput | number
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutClassroomNestedInput
    Department?: DepartmentUncheckedUpdateManyWithoutClassroomsNestedInput
  }

  export type ClassroomsCreateManyInput = {
    classroom_id?: number
    department_id?: number | null
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
  }

  export type ClassroomsUpdateManyMutationInput = {
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type ClassroomsUncheckedUpdateManyInput = {
    classroom_id?: IntFieldUpdateOperationsInput | number
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type CoursesCreateInput = {
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    major: MajorCreateNestedOneWithoutCoursesInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutCourseInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutCourseInput
    department?: DepartmentCreateNestedOneWithoutCoursesInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    majorId: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutCourseInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutCourseInput
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesUpdateInput = {
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    major?: MajorUpdateOneRequiredWithoutCoursesNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutCourseNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutCourseNestedInput
    department?: DepartmentUpdateOneWithoutCoursesNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutCourseNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutCourseNestedInput
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CoursesCreateManyInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    majorId: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    departmentId?: number | null
  }

  export type CoursesUpdateManyMutationInput = {
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CoursesUncheckedUpdateManyInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeachersMajorPlanningCreateInput = {
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    createdAt?: Date | string | null
    department: DepartmentCreateNestedOneWithoutTeachersMajorPlanningInput
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersMajorPlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersMajorPlanningInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningUncheckedCreateInput = {
    teacherMajorId?: number
    teacherId: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEducationsId: number
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningUpdateInput = {
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningUncheckedUpdateInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducationsId?: IntFieldUpdateOperationsInput | number
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningCreateManyInput = {
    teacherMajorId?: number
    teacherId: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEducationsId: number
  }

  export type TeachersMajorPlanningUpdateManyMutationInput = {
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeachersMajorPlanningUncheckedUpdateManyInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducationsId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherCreateInput = {
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    auth_user?: auth_userCreateNestedOneWithoutTeacherInput
    department?: DepartmentCreateNestedOneWithoutTeacherInput
    departmentsOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeacherInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherUncheckedCreateInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherUpdateInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    auth_user?: auth_userUpdateOneWithoutTeacherNestedInput
    department?: DepartmentUpdateOneWithoutTeacherNestedInput
    departmentsOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeacherNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherCreateManyInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    departmentId?: number | null
  }

  export type TeacherUpdateManyMutationInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherUncheckedUpdateManyInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentClubsCreateInput = {
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    club_advisor_teacher: TeacherCreateNestedOneWithoutStudentClubsInput
    clubAssistantLeader: auth_userCreateNestedOneWithoutAssistantLeaderInInput
    clubMajor: MajorCreateNestedOneWithoutStudentClubsInput
    clubPrimaryLeader: auth_userCreateNestedOneWithoutPrimaryLeaderInInput
    Student?: StudentCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsUncheckedCreateInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    Student?: StudentUncheckedCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsUpdateInput = {
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_advisor_teacher?: TeacherUpdateOneRequiredWithoutStudentClubsNestedInput
    clubAssistantLeader?: auth_userUpdateOneRequiredWithoutAssistantLeaderInNestedInput
    clubMajor?: MajorUpdateOneRequiredWithoutStudentClubsNestedInput
    clubPrimaryLeader?: auth_userUpdateOneRequiredWithoutPrimaryLeaderInNestedInput
    Student?: StudentUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Student?: StudentUncheckedUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsCreateManyInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
  }

  export type StudentClubsUpdateManyMutationInput = {
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentClubsUncheckedUpdateManyInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentCreateInput = {
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userCreateNestedOneWithoutStudentInput
    major: MajorCreateNestedOneWithoutStudentInput
    student_clubs?: StudentClubsCreateNestedOneWithoutStudentInput
    department?: DepartmentCreateNestedOneWithoutStudentInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    student_id?: number
    user_id: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userUpdateOneWithoutStudentNestedInput
    major?: MajorUpdateOneRequiredWithoutStudentNestedInput
    student_clubs?: StudentClubsUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneWithoutStudentNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    student_id?: number
    user_id: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
  }

  export type StudentUpdateManyMutationInput = {
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StudentUncheckedUpdateManyInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MajorCreateInput = {
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department?: DepartmentCreateNestedOneWithoutMajorsInput
    departmentOfEdu: DepartmentCreateNestedOneWithoutMajorsOfEducationInput
    Courses?: CoursesCreateNestedManyWithoutMajorInput
    Student?: StudentCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClubMajorInput
  }

  export type MajorUncheckedCreateInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department_id?: number
    Courses?: CoursesUncheckedCreateNestedManyWithoutMajorInput
    Student?: StudentUncheckedCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClubMajorInput
  }

  export type MajorUpdateInput = {
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department?: DepartmentUpdateOneRequiredWithoutMajorsNestedInput
    departmentOfEdu?: DepartmentUpdateOneRequiredWithoutMajorsOfEducationNestedInput
    Courses?: CoursesUpdateManyWithoutMajorNestedInput
    Student?: StudentUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClubMajorNestedInput
  }

  export type MajorUncheckedUpdateInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department_id?: IntFieldUpdateOperationsInput | number
    Courses?: CoursesUncheckedUpdateManyWithoutMajorNestedInput
    Student?: StudentUncheckedUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClubMajorNestedInput
  }

  export type MajorCreateManyInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department_id?: number
  }

  export type MajorUpdateManyMutationInput = {
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
  }

  export type MajorUncheckedUpdateManyInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department_id?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentsOfEducationCreateInput = {
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentOfEducationInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationUncheckedCreateInput = {
    departmentsOfEducationId?: number
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationUpdateInput = {
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentOfEducationNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type DepartmentsOfEducationUncheckedUpdateInput = {
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type DepartmentsOfEducationCreateManyInput = {
    departmentsOfEducationId?: number
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DepartmentsOfEducationUpdateManyMutationInput = {
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DepartmentsOfEducationUncheckedUpdateManyInput = {
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DepartmentCreateInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
  }

  export type DepartmentUpdateManyMutationInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentUncheckedUpdateManyInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCurriculumCreateInput = {
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
    student: StudentCreateNestedOneWithoutStudentCurriculumInput
    course: CoursesCreateNestedOneWithoutStudentCurriculumInput
  }

  export type StudentCurriculumUncheckedCreateInput = {
    studentCurriculumId?: number
    studentId: number
    courseId: number
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
  }

  export type StudentCurriculumUpdateInput = {
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutStudentCurriculumNestedInput
    course?: CoursesUpdateOneRequiredWithoutStudentCurriculumNestedInput
  }

  export type StudentCurriculumUncheckedUpdateInput = {
    studentCurriculumId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCurriculumCreateManyInput = {
    studentCurriculumId?: number
    studentId: number
    courseId: number
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
  }

  export type StudentCurriculumUpdateManyMutationInput = {
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCurriculumUncheckedUpdateManyInput = {
    studentCurriculumId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumFilter<$PrismaModel> | $Enums.UserRoleEnum
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumGenderEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderEnum | EnumGenderEnumFieldRefInput<$PrismaModel>
    in?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderEnumFilter<$PrismaModel> | $Enums.GenderEnum
  }

  export type EnumMarriedEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.MarriedEnum | EnumMarriedEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MarriedEnum[] | ListEnumMarriedEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MarriedEnum[] | ListEnumMarriedEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMarriedEnumFilter<$PrismaModel> | $Enums.MarriedEnum
  }

  export type EnumMilitaryServiceEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.MilitaryServiceEnum | EnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MilitaryServiceEnum[] | ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MilitaryServiceEnum[] | ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMilitaryServiceEnumFilter<$PrismaModel> | $Enums.MilitaryServiceEnum
  }

  export type EnumDisabledEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.DisabledEnum | EnumDisabledEnumFieldRefInput<$PrismaModel>
    in?: $Enums.DisabledEnum[] | ListEnumDisabledEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.DisabledEnum[] | ListEnumDisabledEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumDisabledEnumFilter<$PrismaModel> | $Enums.DisabledEnum
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type TeacherListRelationFilter = {
    every?: TeacherWhereInput
    some?: TeacherWhereInput
    none?: TeacherWhereInput
  }

  export type StudentClubsListRelationFilter = {
    every?: StudentClubsWhereInput
    some?: StudentClubsWhereInput
    none?: StudentClubsWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TeacherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentClubsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type auth_userCountOrderByAggregateInput = {
    user_id?: SortOrder
    login_name?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrder
    registry_number?: SortOrder
    user_role?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    citizenship?: SortOrder
    state_city?: SortOrder
    town_district?: SortOrder
    valid_address?: SortOrder
    state_city_living?: SortOrder
    town_district_living?: SortOrder
    valid_address_living?: SortOrder
    postal_address?: SortOrder
    home_phone_number?: SortOrder
    phone_number?: SortOrder
    phone_number_emergency?: SortOrder
    country?: SortOrder
    ethnicity?: SortOrder
    social_background?: SortOrder
    state_city_of_birth?: SortOrder
    town_district_of_birth?: SortOrder
    place_of_birth?: SortOrder
    education?: SortOrder
    current_academic_degree?: SortOrder
    profession?: SortOrder
    profession_certification?: SortOrder
    f_passport_number?: SortOrder
    married?: SortOrder
    military_service?: SortOrder
    pensions_established?: SortOrder
    additional_notes?: SortOrder
    blood_type?: SortOrder
    drivers_certificate?: SortOrder
    drivers_certificate_number?: SortOrder
    disabled?: SortOrder
    is_active?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    family_tree_name?: SortOrder
  }

  export type auth_userAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type auth_userMaxOrderByAggregateInput = {
    user_id?: SortOrder
    login_name?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrder
    registry_number?: SortOrder
    user_role?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    citizenship?: SortOrder
    state_city?: SortOrder
    town_district?: SortOrder
    valid_address?: SortOrder
    state_city_living?: SortOrder
    town_district_living?: SortOrder
    valid_address_living?: SortOrder
    postal_address?: SortOrder
    home_phone_number?: SortOrder
    phone_number?: SortOrder
    phone_number_emergency?: SortOrder
    country?: SortOrder
    ethnicity?: SortOrder
    social_background?: SortOrder
    state_city_of_birth?: SortOrder
    town_district_of_birth?: SortOrder
    place_of_birth?: SortOrder
    education?: SortOrder
    current_academic_degree?: SortOrder
    profession?: SortOrder
    profession_certification?: SortOrder
    f_passport_number?: SortOrder
    married?: SortOrder
    military_service?: SortOrder
    pensions_established?: SortOrder
    additional_notes?: SortOrder
    blood_type?: SortOrder
    drivers_certificate?: SortOrder
    drivers_certificate_number?: SortOrder
    disabled?: SortOrder
    is_active?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    family_tree_name?: SortOrder
  }

  export type auth_userMinOrderByAggregateInput = {
    user_id?: SortOrder
    login_name?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrder
    registry_number?: SortOrder
    user_role?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    citizenship?: SortOrder
    state_city?: SortOrder
    town_district?: SortOrder
    valid_address?: SortOrder
    state_city_living?: SortOrder
    town_district_living?: SortOrder
    valid_address_living?: SortOrder
    postal_address?: SortOrder
    home_phone_number?: SortOrder
    phone_number?: SortOrder
    phone_number_emergency?: SortOrder
    country?: SortOrder
    ethnicity?: SortOrder
    social_background?: SortOrder
    state_city_of_birth?: SortOrder
    town_district_of_birth?: SortOrder
    place_of_birth?: SortOrder
    education?: SortOrder
    current_academic_degree?: SortOrder
    profession?: SortOrder
    profession_certification?: SortOrder
    f_passport_number?: SortOrder
    married?: SortOrder
    military_service?: SortOrder
    pensions_established?: SortOrder
    additional_notes?: SortOrder
    blood_type?: SortOrder
    drivers_certificate?: SortOrder
    drivers_certificate_number?: SortOrder
    disabled?: SortOrder
    is_active?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    family_tree_name?: SortOrder
  }

  export type auth_userSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel> | $Enums.UserRoleEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleEnumFilter<$PrismaModel>
    _max?: NestedEnumUserRoleEnumFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumGenderEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderEnum | EnumGenderEnumFieldRefInput<$PrismaModel>
    in?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderEnumWithAggregatesFilter<$PrismaModel> | $Enums.GenderEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderEnumFilter<$PrismaModel>
    _max?: NestedEnumGenderEnumFilter<$PrismaModel>
  }

  export type EnumMarriedEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MarriedEnum | EnumMarriedEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MarriedEnum[] | ListEnumMarriedEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MarriedEnum[] | ListEnumMarriedEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMarriedEnumWithAggregatesFilter<$PrismaModel> | $Enums.MarriedEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMarriedEnumFilter<$PrismaModel>
    _max?: NestedEnumMarriedEnumFilter<$PrismaModel>
  }

  export type EnumMilitaryServiceEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MilitaryServiceEnum | EnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MilitaryServiceEnum[] | ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MilitaryServiceEnum[] | ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMilitaryServiceEnumWithAggregatesFilter<$PrismaModel> | $Enums.MilitaryServiceEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMilitaryServiceEnumFilter<$PrismaModel>
    _max?: NestedEnumMilitaryServiceEnumFilter<$PrismaModel>
  }

  export type EnumDisabledEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DisabledEnum | EnumDisabledEnumFieldRefInput<$PrismaModel>
    in?: $Enums.DisabledEnum[] | ListEnumDisabledEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.DisabledEnum[] | ListEnumDisabledEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumDisabledEnumWithAggregatesFilter<$PrismaModel> | $Enums.DisabledEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDisabledEnumFilter<$PrismaModel>
    _max?: NestedEnumDisabledEnumFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ClassroomsScalarRelationFilter = {
    is?: ClassroomsWhereInput
    isNot?: ClassroomsWhereInput
  }

  export type CoursesScalarRelationFilter = {
    is?: CoursesWhereInput
    isNot?: CoursesWhereInput
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type TeacherScalarRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type TeacherScheduleCountOrderByAggregateInput = {
    teacherScheduleId?: SortOrder
    teacherId?: SortOrder
    weekDay?: SortOrder
    periodOfClass?: SortOrder
    classroomId?: SortOrder
    classGroup?: SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    numberOfStudents?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeacherScheduleAvgOrderByAggregateInput = {
    teacherScheduleId?: SortOrder
    teacherId?: SortOrder
    classroomId?: SortOrder
    credit?: SortOrder
    numberOfStudents?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
  }

  export type TeacherScheduleMaxOrderByAggregateInput = {
    teacherScheduleId?: SortOrder
    teacherId?: SortOrder
    weekDay?: SortOrder
    periodOfClass?: SortOrder
    classroomId?: SortOrder
    classGroup?: SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    numberOfStudents?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeacherScheduleMinOrderByAggregateInput = {
    teacherScheduleId?: SortOrder
    teacherId?: SortOrder
    weekDay?: SortOrder
    periodOfClass?: SortOrder
    classroomId?: SortOrder
    classGroup?: SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    numberOfStudents?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
  }

  export type TeacherScheduleSumOrderByAggregateInput = {
    teacherScheduleId?: SortOrder
    teacherId?: SortOrder
    classroomId?: SortOrder
    credit?: SortOrder
    numberOfStudents?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DepartmentsOfEducationScalarRelationFilter = {
    is?: DepartmentsOfEducationWhereInput
    isNot?: DepartmentsOfEducationWhereInput
  }

  export type TeachersMajorPlanningScalarRelationFilter = {
    is?: TeachersMajorPlanningWhereInput
    isNot?: TeachersMajorPlanningWhereInput
  }

  export type TeachersCoursePlanningTeacherIdMajorIdCourseIdCompoundUniqueInput = {
    teacherId: number
    majorId: Decimal | DecimalJsLike | number | string
    courseId: number
  }

  export type TeachersCoursePlanningCountOrderByAggregateInput = {
    teacherCoursePlanningId?: SortOrder
    teacherId?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    departmentOfEduId?: SortOrder
    courseCode?: SortOrder
    teacherMajorId?: SortOrder
  }

  export type TeachersCoursePlanningAvgOrderByAggregateInput = {
    teacherCoursePlanningId?: SortOrder
    teacherId?: SortOrder
    majorId?: SortOrder
    credit?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    departmentOfEduId?: SortOrder
    teacherMajorId?: SortOrder
  }

  export type TeachersCoursePlanningMaxOrderByAggregateInput = {
    teacherCoursePlanningId?: SortOrder
    teacherId?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    departmentOfEduId?: SortOrder
    courseCode?: SortOrder
    teacherMajorId?: SortOrder
  }

  export type TeachersCoursePlanningMinOrderByAggregateInput = {
    teacherCoursePlanningId?: SortOrder
    teacherId?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrder
    courseName?: SortOrder
    credit?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    departmentOfEduId?: SortOrder
    courseCode?: SortOrder
    teacherMajorId?: SortOrder
  }

  export type TeachersCoursePlanningSumOrderByAggregateInput = {
    teacherCoursePlanningId?: SortOrder
    teacherId?: SortOrder
    majorId?: SortOrder
    credit?: SortOrder
    courseId?: SortOrder
    departmentId?: SortOrder
    departmentOfEduId?: SortOrder
    teacherMajorId?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumClassroomTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassroomTypeEnum | EnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ClassroomTypeEnum[] | ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassroomTypeEnum[] | ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumClassroomTypeEnumFilter<$PrismaModel> | $Enums.ClassroomTypeEnum
  }

  export type EnumProjectorEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectorEnum | EnumProjectorEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectorEnum[] | ListEnumProjectorEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectorEnum[] | ListEnumProjectorEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectorEnumFilter<$PrismaModel> | $Enums.ProjectorEnum
  }

  export type EnumTvEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.TvEnum | EnumTvEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TvEnum[] | ListEnumTvEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.TvEnum[] | ListEnumTvEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumTvEnumFilter<$PrismaModel> | $Enums.TvEnum
  }

  export type DepartmentsOfEducationNullableScalarRelationFilter = {
    is?: DepartmentsOfEducationWhereInput | null
    isNot?: DepartmentsOfEducationWhereInput | null
  }

  export type TeacherScheduleListRelationFilter = {
    every?: TeacherScheduleWhereInput
    some?: TeacherScheduleWhereInput
    none?: TeacherScheduleWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type TeacherScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassroomsCountOrderByAggregateInput = {
    classroom_id?: SortOrder
    department_id?: SortOrder
    classroom_type?: SortOrder
    classroom_number?: SortOrder
    projector?: SortOrder
    tv?: SortOrder
    createdAt?: SortOrder
    capacity?: SortOrder
  }

  export type ClassroomsAvgOrderByAggregateInput = {
    classroom_id?: SortOrder
    department_id?: SortOrder
    capacity?: SortOrder
  }

  export type ClassroomsMaxOrderByAggregateInput = {
    classroom_id?: SortOrder
    department_id?: SortOrder
    classroom_type?: SortOrder
    classroom_number?: SortOrder
    projector?: SortOrder
    tv?: SortOrder
    createdAt?: SortOrder
    capacity?: SortOrder
  }

  export type ClassroomsMinOrderByAggregateInput = {
    classroom_id?: SortOrder
    department_id?: SortOrder
    classroom_type?: SortOrder
    classroom_number?: SortOrder
    projector?: SortOrder
    tv?: SortOrder
    createdAt?: SortOrder
    capacity?: SortOrder
  }

  export type ClassroomsSumOrderByAggregateInput = {
    classroom_id?: SortOrder
    department_id?: SortOrder
    capacity?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumClassroomTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassroomTypeEnum | EnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ClassroomTypeEnum[] | ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassroomTypeEnum[] | ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumClassroomTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.ClassroomTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClassroomTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumClassroomTypeEnumFilter<$PrismaModel>
  }

  export type EnumProjectorEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectorEnum | EnumProjectorEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectorEnum[] | ListEnumProjectorEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectorEnum[] | ListEnumProjectorEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectorEnumWithAggregatesFilter<$PrismaModel> | $Enums.ProjectorEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectorEnumFilter<$PrismaModel>
    _max?: NestedEnumProjectorEnumFilter<$PrismaModel>
  }

  export type EnumTvEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TvEnum | EnumTvEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TvEnum[] | ListEnumTvEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.TvEnum[] | ListEnumTvEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumTvEnumWithAggregatesFilter<$PrismaModel> | $Enums.TvEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTvEnumFilter<$PrismaModel>
    _max?: NestedEnumTvEnumFilter<$PrismaModel>
  }

  export type EnumCourseTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseTypeEnum | EnumCourseTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CourseTypeEnum[] | ListEnumCourseTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseTypeEnum[] | ListEnumCourseTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseTypeEnumFilter<$PrismaModel> | $Enums.CourseTypeEnum
  }

  export type EnumCourseSeasonTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseSeasonTypeEnum | EnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CourseSeasonTypeEnum[] | ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseSeasonTypeEnum[] | ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseSeasonTypeEnumFilter<$PrismaModel> | $Enums.CourseSeasonTypeEnum
  }

  export type MajorScalarRelationFilter = {
    is?: MajorWhereInput
    isNot?: MajorWhereInput
  }

  export type TeachersCoursePlanningListRelationFilter = {
    every?: TeachersCoursePlanningWhereInput
    some?: TeachersCoursePlanningWhereInput
    none?: TeachersCoursePlanningWhereInput
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type StudentCurriculumListRelationFilter = {
    every?: StudentCurriculumWhereInput
    some?: StudentCurriculumWhereInput
    none?: StudentCurriculumWhereInput
  }

  export type TeachersCoursePlanningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCurriculumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoursesCountOrderByAggregateInput = {
    courseId?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    courseYear?: SortOrder
    totalCredits?: SortOrder
    majorId?: SortOrder
    description?: SortOrder
    courseSeason?: SortOrder
    timesPerWeek?: SortOrder
    departmentId?: SortOrder
  }

  export type CoursesAvgOrderByAggregateInput = {
    courseId?: SortOrder
    totalCredits?: SortOrder
    majorId?: SortOrder
    timesPerWeek?: SortOrder
    departmentId?: SortOrder
  }

  export type CoursesMaxOrderByAggregateInput = {
    courseId?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    courseYear?: SortOrder
    totalCredits?: SortOrder
    majorId?: SortOrder
    description?: SortOrder
    courseSeason?: SortOrder
    timesPerWeek?: SortOrder
    departmentId?: SortOrder
  }

  export type CoursesMinOrderByAggregateInput = {
    courseId?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    courseYear?: SortOrder
    totalCredits?: SortOrder
    majorId?: SortOrder
    description?: SortOrder
    courseSeason?: SortOrder
    timesPerWeek?: SortOrder
    departmentId?: SortOrder
  }

  export type CoursesSumOrderByAggregateInput = {
    courseId?: SortOrder
    totalCredits?: SortOrder
    majorId?: SortOrder
    timesPerWeek?: SortOrder
    departmentId?: SortOrder
  }

  export type EnumCourseTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseTypeEnum | EnumCourseTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CourseTypeEnum[] | ListEnumCourseTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseTypeEnum[] | ListEnumCourseTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.CourseTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumCourseTypeEnumFilter<$PrismaModel>
  }

  export type EnumCourseSeasonTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseSeasonTypeEnum | EnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CourseSeasonTypeEnum[] | ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseSeasonTypeEnum[] | ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseSeasonTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.CourseSeasonTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseSeasonTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumCourseSeasonTypeEnumFilter<$PrismaModel>
  }

  export type TeachersMajorPlanningTeacherIdMajorIdCompoundUniqueInput = {
    teacherId: number
    majorId: Decimal | DecimalJsLike | number | string
  }

  export type TeachersMajorPlanningCountOrderByAggregateInput = {
    teacherMajorId?: SortOrder
    teacherId?: SortOrder
    academicDegreeOfMajor?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrder
    credit?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    departmentOfEducationsId?: SortOrder
  }

  export type TeachersMajorPlanningAvgOrderByAggregateInput = {
    teacherMajorId?: SortOrder
    teacherId?: SortOrder
    majorId?: SortOrder
    credit?: SortOrder
    departmentId?: SortOrder
    departmentOfEducationsId?: SortOrder
  }

  export type TeachersMajorPlanningMaxOrderByAggregateInput = {
    teacherMajorId?: SortOrder
    teacherId?: SortOrder
    academicDegreeOfMajor?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrder
    credit?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    departmentOfEducationsId?: SortOrder
  }

  export type TeachersMajorPlanningMinOrderByAggregateInput = {
    teacherMajorId?: SortOrder
    teacherId?: SortOrder
    academicDegreeOfMajor?: SortOrder
    majorName?: SortOrder
    majorId?: SortOrder
    credit?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    departmentOfEducationsId?: SortOrder
  }

  export type TeachersMajorPlanningSumOrderByAggregateInput = {
    teacherMajorId?: SortOrder
    teacherId?: SortOrder
    majorId?: SortOrder
    credit?: SortOrder
    departmentId?: SortOrder
    departmentOfEducationsId?: SortOrder
  }

  export type EnumIsActiveEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.IsActiveEnum | EnumIsActiveEnumFieldRefInput<$PrismaModel>
    in?: $Enums.IsActiveEnum[] | ListEnumIsActiveEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.IsActiveEnum[] | ListEnumIsActiveEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumIsActiveEnumFilter<$PrismaModel> | $Enums.IsActiveEnum
  }

  export type Auth_userNullableScalarRelationFilter = {
    is?: auth_userWhereInput | null
    isNot?: auth_userWhereInput | null
  }

  export type TeachersMajorPlanningListRelationFilter = {
    every?: TeachersMajorPlanningWhereInput
    some?: TeachersMajorPlanningWhereInput
    none?: TeachersMajorPlanningWhereInput
  }

  export type TeachersMajorPlanningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    teacherId?: SortOrder
    userId?: SortOrder
    teacherCode?: SortOrder
    teacherEmail?: SortOrder
    certificate?: SortOrder
    profession?: SortOrder
    academicDegree?: SortOrder
    jobTitle?: SortOrder
    isActive?: SortOrder
    jobDescription?: SortOrder
    departmentsOfEducationId?: SortOrder
    departmentId?: SortOrder
  }

  export type TeacherAvgOrderByAggregateInput = {
    teacherId?: SortOrder
    userId?: SortOrder
    departmentsOfEducationId?: SortOrder
    departmentId?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    teacherId?: SortOrder
    userId?: SortOrder
    teacherCode?: SortOrder
    teacherEmail?: SortOrder
    certificate?: SortOrder
    profession?: SortOrder
    academicDegree?: SortOrder
    jobTitle?: SortOrder
    isActive?: SortOrder
    jobDescription?: SortOrder
    departmentsOfEducationId?: SortOrder
    departmentId?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    teacherId?: SortOrder
    userId?: SortOrder
    teacherCode?: SortOrder
    teacherEmail?: SortOrder
    certificate?: SortOrder
    profession?: SortOrder
    academicDegree?: SortOrder
    jobTitle?: SortOrder
    isActive?: SortOrder
    jobDescription?: SortOrder
    departmentsOfEducationId?: SortOrder
    departmentId?: SortOrder
  }

  export type TeacherSumOrderByAggregateInput = {
    teacherId?: SortOrder
    userId?: SortOrder
    departmentsOfEducationId?: SortOrder
    departmentId?: SortOrder
  }

  export type EnumIsActiveEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IsActiveEnum | EnumIsActiveEnumFieldRefInput<$PrismaModel>
    in?: $Enums.IsActiveEnum[] | ListEnumIsActiveEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.IsActiveEnum[] | ListEnumIsActiveEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumIsActiveEnumWithAggregatesFilter<$PrismaModel> | $Enums.IsActiveEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIsActiveEnumFilter<$PrismaModel>
    _max?: NestedEnumIsActiveEnumFilter<$PrismaModel>
  }

  export type EnumClubTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubTypeEnum | EnumClubTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ClubTypeEnum[] | ListEnumClubTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubTypeEnum[] | ListEnumClubTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumClubTypeEnumFilter<$PrismaModel> | $Enums.ClubTypeEnum
  }

  export type Auth_userScalarRelationFilter = {
    is?: auth_userWhereInput
    isNot?: auth_userWhereInput
  }

  export type StudentClubsCountOrderByAggregateInput = {
    studentClubId?: SortOrder
    clubCode?: SortOrder
    clubName?: SortOrder
    clubMembers?: SortOrder
    clubType?: SortOrder
    clubMajorId?: SortOrder
    clubPrimaryLeaderId?: SortOrder
    clubAssistantLeaderId?: SortOrder
    clubAdvisorTeacherId?: SortOrder
    clubLogo?: SortOrder
    clubMoto?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentClubsAvgOrderByAggregateInput = {
    studentClubId?: SortOrder
    clubMembers?: SortOrder
    clubMajorId?: SortOrder
    clubPrimaryLeaderId?: SortOrder
    clubAssistantLeaderId?: SortOrder
    clubAdvisorTeacherId?: SortOrder
  }

  export type StudentClubsMaxOrderByAggregateInput = {
    studentClubId?: SortOrder
    clubCode?: SortOrder
    clubName?: SortOrder
    clubMembers?: SortOrder
    clubType?: SortOrder
    clubMajorId?: SortOrder
    clubPrimaryLeaderId?: SortOrder
    clubAssistantLeaderId?: SortOrder
    clubAdvisorTeacherId?: SortOrder
    clubLogo?: SortOrder
    clubMoto?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentClubsMinOrderByAggregateInput = {
    studentClubId?: SortOrder
    clubCode?: SortOrder
    clubName?: SortOrder
    clubMembers?: SortOrder
    clubType?: SortOrder
    clubMajorId?: SortOrder
    clubPrimaryLeaderId?: SortOrder
    clubAssistantLeaderId?: SortOrder
    clubAdvisorTeacherId?: SortOrder
    clubLogo?: SortOrder
    clubMoto?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentClubsSumOrderByAggregateInput = {
    studentClubId?: SortOrder
    clubMembers?: SortOrder
    clubMajorId?: SortOrder
    clubPrimaryLeaderId?: SortOrder
    clubAssistantLeaderId?: SortOrder
    clubAdvisorTeacherId?: SortOrder
  }

  export type EnumClubTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubTypeEnum | EnumClubTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ClubTypeEnum[] | ListEnumClubTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubTypeEnum[] | ListEnumClubTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumClubTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.ClubTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumClubTypeEnumFilter<$PrismaModel>
  }

  export type EnumAdditionalRolesEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.AdditionalRolesEnum | EnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    in?: $Enums.AdditionalRolesEnum[] | ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdditionalRolesEnum[] | ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumAdditionalRolesEnumFilter<$PrismaModel> | $Enums.AdditionalRolesEnum
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumYearClassificationEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.YearClassificationEnum | EnumYearClassificationEnumFieldRefInput<$PrismaModel>
    in?: $Enums.YearClassificationEnum[] | ListEnumYearClassificationEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.YearClassificationEnum[] | ListEnumYearClassificationEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumYearClassificationEnumFilter<$PrismaModel> | $Enums.YearClassificationEnum
  }

  export type EnumStudentIsActiveEnumNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentIsActiveEnum | EnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    in?: $Enums.StudentIsActiveEnum[] | ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StudentIsActiveEnum[] | ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStudentIsActiveEnumNullableFilter<$PrismaModel> | $Enums.StudentIsActiveEnum | null
  }

  export type StudentClubsNullableScalarRelationFilter = {
    is?: StudentClubsWhereInput | null
    isNot?: StudentClubsWhereInput | null
  }

  export type StudentCountOrderByAggregateInput = {
    student_id?: SortOrder
    user_id?: SortOrder
    student_club_id?: SortOrder
    additional_roles?: SortOrder
    student_code?: SortOrder
    student_email?: SortOrder
    student_file?: SortOrder
    enrollment_number?: SortOrder
    enrollment_year?: SortOrder
    year_classification?: SortOrder
    is_active?: SortOrder
    current_academic_degree?: SortOrder
    academic_degree_file?: SortOrder
    major_id?: SortOrder
    created_at?: SortOrder
    contracts?: SortOrder
    department_id?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    student_id?: SortOrder
    user_id?: SortOrder
    student_club_id?: SortOrder
    enrollment_number?: SortOrder
    enrollment_year?: SortOrder
    major_id?: SortOrder
    department_id?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    student_id?: SortOrder
    user_id?: SortOrder
    student_club_id?: SortOrder
    additional_roles?: SortOrder
    student_code?: SortOrder
    student_email?: SortOrder
    enrollment_number?: SortOrder
    enrollment_year?: SortOrder
    year_classification?: SortOrder
    is_active?: SortOrder
    current_academic_degree?: SortOrder
    academic_degree_file?: SortOrder
    major_id?: SortOrder
    created_at?: SortOrder
    department_id?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    student_id?: SortOrder
    user_id?: SortOrder
    student_club_id?: SortOrder
    additional_roles?: SortOrder
    student_code?: SortOrder
    student_email?: SortOrder
    enrollment_number?: SortOrder
    enrollment_year?: SortOrder
    year_classification?: SortOrder
    is_active?: SortOrder
    current_academic_degree?: SortOrder
    academic_degree_file?: SortOrder
    major_id?: SortOrder
    created_at?: SortOrder
    department_id?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    student_id?: SortOrder
    user_id?: SortOrder
    student_club_id?: SortOrder
    enrollment_number?: SortOrder
    enrollment_year?: SortOrder
    major_id?: SortOrder
    department_id?: SortOrder
  }

  export type EnumAdditionalRolesEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdditionalRolesEnum | EnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    in?: $Enums.AdditionalRolesEnum[] | ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdditionalRolesEnum[] | ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumAdditionalRolesEnumWithAggregatesFilter<$PrismaModel> | $Enums.AdditionalRolesEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdditionalRolesEnumFilter<$PrismaModel>
    _max?: NestedEnumAdditionalRolesEnumFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumYearClassificationEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YearClassificationEnum | EnumYearClassificationEnumFieldRefInput<$PrismaModel>
    in?: $Enums.YearClassificationEnum[] | ListEnumYearClassificationEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.YearClassificationEnum[] | ListEnumYearClassificationEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumYearClassificationEnumWithAggregatesFilter<$PrismaModel> | $Enums.YearClassificationEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYearClassificationEnumFilter<$PrismaModel>
    _max?: NestedEnumYearClassificationEnumFilter<$PrismaModel>
  }

  export type EnumStudentIsActiveEnumNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentIsActiveEnum | EnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    in?: $Enums.StudentIsActiveEnum[] | ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StudentIsActiveEnum[] | ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStudentIsActiveEnumNullableWithAggregatesFilter<$PrismaModel> | $Enums.StudentIsActiveEnum | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStudentIsActiveEnumNullableFilter<$PrismaModel>
    _max?: NestedEnumStudentIsActiveEnumNullableFilter<$PrismaModel>
  }

  export type EnumMajorTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.MajorTypeEnum | EnumMajorTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MajorTypeEnum[] | ListEnumMajorTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MajorTypeEnum[] | ListEnumMajorTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMajorTypeEnumFilter<$PrismaModel> | $Enums.MajorTypeEnum
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumSignUpsEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.SignUpsEnum | EnumSignUpsEnumFieldRefInput<$PrismaModel>
    in?: $Enums.SignUpsEnum[] | ListEnumSignUpsEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignUpsEnum[] | ListEnumSignUpsEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumSignUpsEnumFilter<$PrismaModel> | $Enums.SignUpsEnum
  }

  export type CoursesListRelationFilter = {
    every?: CoursesWhereInput
    some?: CoursesWhereInput
    none?: CoursesWhereInput
  }

  export type CoursesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MajorCountOrderByAggregateInput = {
    major_id?: SortOrder
    major_name?: SortOrder
    majors_year?: SortOrder
    majors_type?: SortOrder
    credit_unit_rate?: SortOrder
    major_tuition?: SortOrder
    academic_degree?: SortOrder
    total_years?: SortOrder
    total_credits_per_year?: SortOrder
    department_of_edu_id?: SortOrder
    created_at?: SortOrder
    exam1?: SortOrder
    exam2?: SortOrder
    majors_description?: SortOrder
    description_brief?: SortOrder
    qualifications?: SortOrder
    qualifications1?: SortOrder
    qualifications2?: SortOrder
    sign_ups?: SortOrder
    department_id?: SortOrder
  }

  export type MajorAvgOrderByAggregateInput = {
    major_id?: SortOrder
    credit_unit_rate?: SortOrder
    major_tuition?: SortOrder
    total_years?: SortOrder
    total_credits_per_year?: SortOrder
    department_of_edu_id?: SortOrder
    exam1?: SortOrder
    exam2?: SortOrder
    department_id?: SortOrder
  }

  export type MajorMaxOrderByAggregateInput = {
    major_id?: SortOrder
    major_name?: SortOrder
    majors_year?: SortOrder
    majors_type?: SortOrder
    credit_unit_rate?: SortOrder
    major_tuition?: SortOrder
    academic_degree?: SortOrder
    total_years?: SortOrder
    total_credits_per_year?: SortOrder
    department_of_edu_id?: SortOrder
    created_at?: SortOrder
    exam1?: SortOrder
    exam2?: SortOrder
    majors_description?: SortOrder
    description_brief?: SortOrder
    qualifications1?: SortOrder
    qualifications2?: SortOrder
    sign_ups?: SortOrder
    department_id?: SortOrder
  }

  export type MajorMinOrderByAggregateInput = {
    major_id?: SortOrder
    major_name?: SortOrder
    majors_year?: SortOrder
    majors_type?: SortOrder
    credit_unit_rate?: SortOrder
    major_tuition?: SortOrder
    academic_degree?: SortOrder
    total_years?: SortOrder
    total_credits_per_year?: SortOrder
    department_of_edu_id?: SortOrder
    created_at?: SortOrder
    exam1?: SortOrder
    exam2?: SortOrder
    majors_description?: SortOrder
    description_brief?: SortOrder
    qualifications1?: SortOrder
    qualifications2?: SortOrder
    sign_ups?: SortOrder
    department_id?: SortOrder
  }

  export type MajorSumOrderByAggregateInput = {
    major_id?: SortOrder
    credit_unit_rate?: SortOrder
    major_tuition?: SortOrder
    total_years?: SortOrder
    total_credits_per_year?: SortOrder
    department_of_edu_id?: SortOrder
    exam1?: SortOrder
    exam2?: SortOrder
    department_id?: SortOrder
  }

  export type EnumMajorTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MajorTypeEnum | EnumMajorTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MajorTypeEnum[] | ListEnumMajorTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MajorTypeEnum[] | ListEnumMajorTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMajorTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.MajorTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMajorTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumMajorTypeEnumFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumSignUpsEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignUpsEnum | EnumSignUpsEnumFieldRefInput<$PrismaModel>
    in?: $Enums.SignUpsEnum[] | ListEnumSignUpsEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignUpsEnum[] | ListEnumSignUpsEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumSignUpsEnumWithAggregatesFilter<$PrismaModel> | $Enums.SignUpsEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignUpsEnumFilter<$PrismaModel>
    _max?: NestedEnumSignUpsEnumFilter<$PrismaModel>
  }

  export type ClassroomsListRelationFilter = {
    every?: ClassroomsWhereInput
    some?: ClassroomsWhereInput
    none?: ClassroomsWhereInput
  }

  export type ClassroomsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentsOfEducationCountOrderByAggregateInput = {
    departmentsOfEducationId?: SortOrder
    edDepartmentName?: SortOrder
    edDepartmentCode?: SortOrder
    teachers?: SortOrder
  }

  export type DepartmentsOfEducationAvgOrderByAggregateInput = {
    departmentsOfEducationId?: SortOrder
  }

  export type DepartmentsOfEducationMaxOrderByAggregateInput = {
    departmentsOfEducationId?: SortOrder
    edDepartmentName?: SortOrder
    edDepartmentCode?: SortOrder
  }

  export type DepartmentsOfEducationMinOrderByAggregateInput = {
    departmentsOfEducationId?: SortOrder
    edDepartmentName?: SortOrder
    edDepartmentCode?: SortOrder
  }

  export type DepartmentsOfEducationSumOrderByAggregateInput = {
    departmentsOfEducationId?: SortOrder
  }

  export type MajorListRelationFilter = {
    every?: MajorWhereInput
    some?: MajorWhereInput
    none?: MajorWhereInput
  }

  export type MajorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    department_code?: SortOrder
    department_email?: SortOrder
    number_of_staff?: SortOrder
    logo?: SortOrder
    created_at?: SortOrder
    department_of_edu_id?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    department_id?: SortOrder
    number_of_staff?: SortOrder
    department_of_edu_id?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    department_code?: SortOrder
    department_email?: SortOrder
    number_of_staff?: SortOrder
    logo?: SortOrder
    created_at?: SortOrder
    department_of_edu_id?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    department_code?: SortOrder
    department_email?: SortOrder
    number_of_staff?: SortOrder
    logo?: SortOrder
    created_at?: SortOrder
    department_of_edu_id?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    department_id?: SortOrder
    number_of_staff?: SortOrder
    department_of_edu_id?: SortOrder
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type StudentCurriculumCountOrderByAggregateInput = {
    studentCurriculumId?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    credit?: SortOrder
    studentYear?: SortOrder
    semesterYear?: SortOrder
    modifiedAt?: SortOrder
    courseCode?: SortOrder
  }

  export type StudentCurriculumAvgOrderByAggregateInput = {
    studentCurriculumId?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    credit?: SortOrder
  }

  export type StudentCurriculumMaxOrderByAggregateInput = {
    studentCurriculumId?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    credit?: SortOrder
    studentYear?: SortOrder
    semesterYear?: SortOrder
    modifiedAt?: SortOrder
    courseCode?: SortOrder
  }

  export type StudentCurriculumMinOrderByAggregateInput = {
    studentCurriculumId?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    credit?: SortOrder
    studentYear?: SortOrder
    semesterYear?: SortOrder
    modifiedAt?: SortOrder
    courseCode?: SortOrder
  }

  export type StudentCurriculumSumOrderByAggregateInput = {
    studentCurriculumId?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    credit?: SortOrder
  }

  export type TeacherCreateNestedManyWithoutAuth_userInput = {
    create?: XOR<TeacherCreateWithoutAuth_userInput, TeacherUncheckedCreateWithoutAuth_userInput> | TeacherCreateWithoutAuth_userInput[] | TeacherUncheckedCreateWithoutAuth_userInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutAuth_userInput | TeacherCreateOrConnectWithoutAuth_userInput[]
    createMany?: TeacherCreateManyAuth_userInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type StudentClubsCreateNestedManyWithoutClubAssistantLeaderInput = {
    create?: XOR<StudentClubsCreateWithoutClubAssistantLeaderInput, StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput> | StudentClubsCreateWithoutClubAssistantLeaderInput[] | StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput | StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput[]
    createMany?: StudentClubsCreateManyClubAssistantLeaderInputEnvelope
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
  }

  export type StudentClubsCreateNestedManyWithoutClubPrimaryLeaderInput = {
    create?: XOR<StudentClubsCreateWithoutClubPrimaryLeaderInput, StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput> | StudentClubsCreateWithoutClubPrimaryLeaderInput[] | StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput | StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput[]
    createMany?: StudentClubsCreateManyClubPrimaryLeaderInputEnvelope
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutAuth_userInput = {
    create?: XOR<StudentCreateWithoutAuth_userInput, StudentUncheckedCreateWithoutAuth_userInput> | StudentCreateWithoutAuth_userInput[] | StudentUncheckedCreateWithoutAuth_userInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutAuth_userInput | StudentCreateOrConnectWithoutAuth_userInput[]
    createMany?: StudentCreateManyAuth_userInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutAuth_userInput = {
    create?: XOR<TeacherCreateWithoutAuth_userInput, TeacherUncheckedCreateWithoutAuth_userInput> | TeacherCreateWithoutAuth_userInput[] | TeacherUncheckedCreateWithoutAuth_userInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutAuth_userInput | TeacherCreateOrConnectWithoutAuth_userInput[]
    createMany?: TeacherCreateManyAuth_userInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type StudentClubsUncheckedCreateNestedManyWithoutClubAssistantLeaderInput = {
    create?: XOR<StudentClubsCreateWithoutClubAssistantLeaderInput, StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput> | StudentClubsCreateWithoutClubAssistantLeaderInput[] | StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput | StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput[]
    createMany?: StudentClubsCreateManyClubAssistantLeaderInputEnvelope
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
  }

  export type StudentClubsUncheckedCreateNestedManyWithoutClubPrimaryLeaderInput = {
    create?: XOR<StudentClubsCreateWithoutClubPrimaryLeaderInput, StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput> | StudentClubsCreateWithoutClubPrimaryLeaderInput[] | StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput | StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput[]
    createMany?: StudentClubsCreateManyClubPrimaryLeaderInputEnvelope
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutAuth_userInput = {
    create?: XOR<StudentCreateWithoutAuth_userInput, StudentUncheckedCreateWithoutAuth_userInput> | StudentCreateWithoutAuth_userInput[] | StudentUncheckedCreateWithoutAuth_userInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutAuth_userInput | StudentCreateOrConnectWithoutAuth_userInput[]
    createMany?: StudentCreateManyAuth_userInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleEnumFieldUpdateOperationsInput = {
    set?: $Enums.UserRoleEnum
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumGenderEnumFieldUpdateOperationsInput = {
    set?: $Enums.GenderEnum
  }

  export type EnumMarriedEnumFieldUpdateOperationsInput = {
    set?: $Enums.MarriedEnum
  }

  export type EnumMilitaryServiceEnumFieldUpdateOperationsInput = {
    set?: $Enums.MilitaryServiceEnum
  }

  export type EnumDisabledEnumFieldUpdateOperationsInput = {
    set?: $Enums.DisabledEnum
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TeacherUpdateManyWithoutAuth_userNestedInput = {
    create?: XOR<TeacherCreateWithoutAuth_userInput, TeacherUncheckedCreateWithoutAuth_userInput> | TeacherCreateWithoutAuth_userInput[] | TeacherUncheckedCreateWithoutAuth_userInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutAuth_userInput | TeacherCreateOrConnectWithoutAuth_userInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutAuth_userInput | TeacherUpsertWithWhereUniqueWithoutAuth_userInput[]
    createMany?: TeacherCreateManyAuth_userInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutAuth_userInput | TeacherUpdateWithWhereUniqueWithoutAuth_userInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutAuth_userInput | TeacherUpdateManyWithWhereWithoutAuth_userInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type StudentClubsUpdateManyWithoutClubAssistantLeaderNestedInput = {
    create?: XOR<StudentClubsCreateWithoutClubAssistantLeaderInput, StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput> | StudentClubsCreateWithoutClubAssistantLeaderInput[] | StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput | StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput[]
    upsert?: StudentClubsUpsertWithWhereUniqueWithoutClubAssistantLeaderInput | StudentClubsUpsertWithWhereUniqueWithoutClubAssistantLeaderInput[]
    createMany?: StudentClubsCreateManyClubAssistantLeaderInputEnvelope
    set?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    disconnect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    delete?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    update?: StudentClubsUpdateWithWhereUniqueWithoutClubAssistantLeaderInput | StudentClubsUpdateWithWhereUniqueWithoutClubAssistantLeaderInput[]
    updateMany?: StudentClubsUpdateManyWithWhereWithoutClubAssistantLeaderInput | StudentClubsUpdateManyWithWhereWithoutClubAssistantLeaderInput[]
    deleteMany?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
  }

  export type StudentClubsUpdateManyWithoutClubPrimaryLeaderNestedInput = {
    create?: XOR<StudentClubsCreateWithoutClubPrimaryLeaderInput, StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput> | StudentClubsCreateWithoutClubPrimaryLeaderInput[] | StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput | StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput[]
    upsert?: StudentClubsUpsertWithWhereUniqueWithoutClubPrimaryLeaderInput | StudentClubsUpsertWithWhereUniqueWithoutClubPrimaryLeaderInput[]
    createMany?: StudentClubsCreateManyClubPrimaryLeaderInputEnvelope
    set?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    disconnect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    delete?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    update?: StudentClubsUpdateWithWhereUniqueWithoutClubPrimaryLeaderInput | StudentClubsUpdateWithWhereUniqueWithoutClubPrimaryLeaderInput[]
    updateMany?: StudentClubsUpdateManyWithWhereWithoutClubPrimaryLeaderInput | StudentClubsUpdateManyWithWhereWithoutClubPrimaryLeaderInput[]
    deleteMany?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutAuth_userNestedInput = {
    create?: XOR<StudentCreateWithoutAuth_userInput, StudentUncheckedCreateWithoutAuth_userInput> | StudentCreateWithoutAuth_userInput[] | StudentUncheckedCreateWithoutAuth_userInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutAuth_userInput | StudentCreateOrConnectWithoutAuth_userInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutAuth_userInput | StudentUpsertWithWhereUniqueWithoutAuth_userInput[]
    createMany?: StudentCreateManyAuth_userInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutAuth_userInput | StudentUpdateWithWhereUniqueWithoutAuth_userInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutAuth_userInput | StudentUpdateManyWithWhereWithoutAuth_userInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeacherUncheckedUpdateManyWithoutAuth_userNestedInput = {
    create?: XOR<TeacherCreateWithoutAuth_userInput, TeacherUncheckedCreateWithoutAuth_userInput> | TeacherCreateWithoutAuth_userInput[] | TeacherUncheckedCreateWithoutAuth_userInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutAuth_userInput | TeacherCreateOrConnectWithoutAuth_userInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutAuth_userInput | TeacherUpsertWithWhereUniqueWithoutAuth_userInput[]
    createMany?: TeacherCreateManyAuth_userInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutAuth_userInput | TeacherUpdateWithWhereUniqueWithoutAuth_userInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutAuth_userInput | TeacherUpdateManyWithWhereWithoutAuth_userInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type StudentClubsUncheckedUpdateManyWithoutClubAssistantLeaderNestedInput = {
    create?: XOR<StudentClubsCreateWithoutClubAssistantLeaderInput, StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput> | StudentClubsCreateWithoutClubAssistantLeaderInput[] | StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput | StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput[]
    upsert?: StudentClubsUpsertWithWhereUniqueWithoutClubAssistantLeaderInput | StudentClubsUpsertWithWhereUniqueWithoutClubAssistantLeaderInput[]
    createMany?: StudentClubsCreateManyClubAssistantLeaderInputEnvelope
    set?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    disconnect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    delete?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    update?: StudentClubsUpdateWithWhereUniqueWithoutClubAssistantLeaderInput | StudentClubsUpdateWithWhereUniqueWithoutClubAssistantLeaderInput[]
    updateMany?: StudentClubsUpdateManyWithWhereWithoutClubAssistantLeaderInput | StudentClubsUpdateManyWithWhereWithoutClubAssistantLeaderInput[]
    deleteMany?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
  }

  export type StudentClubsUncheckedUpdateManyWithoutClubPrimaryLeaderNestedInput = {
    create?: XOR<StudentClubsCreateWithoutClubPrimaryLeaderInput, StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput> | StudentClubsCreateWithoutClubPrimaryLeaderInput[] | StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput | StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput[]
    upsert?: StudentClubsUpsertWithWhereUniqueWithoutClubPrimaryLeaderInput | StudentClubsUpsertWithWhereUniqueWithoutClubPrimaryLeaderInput[]
    createMany?: StudentClubsCreateManyClubPrimaryLeaderInputEnvelope
    set?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    disconnect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    delete?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    update?: StudentClubsUpdateWithWhereUniqueWithoutClubPrimaryLeaderInput | StudentClubsUpdateWithWhereUniqueWithoutClubPrimaryLeaderInput[]
    updateMany?: StudentClubsUpdateManyWithWhereWithoutClubPrimaryLeaderInput | StudentClubsUpdateManyWithWhereWithoutClubPrimaryLeaderInput[]
    deleteMany?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutAuth_userNestedInput = {
    create?: XOR<StudentCreateWithoutAuth_userInput, StudentUncheckedCreateWithoutAuth_userInput> | StudentCreateWithoutAuth_userInput[] | StudentUncheckedCreateWithoutAuth_userInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutAuth_userInput | StudentCreateOrConnectWithoutAuth_userInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutAuth_userInput | StudentUpsertWithWhereUniqueWithoutAuth_userInput[]
    createMany?: StudentCreateManyAuth_userInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutAuth_userInput | StudentUpdateWithWhereUniqueWithoutAuth_userInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutAuth_userInput | StudentUpdateManyWithWhereWithoutAuth_userInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ClassroomsCreateNestedOneWithoutTeacherScheduleInput = {
    create?: XOR<ClassroomsCreateWithoutTeacherScheduleInput, ClassroomsUncheckedCreateWithoutTeacherScheduleInput>
    connectOrCreate?: ClassroomsCreateOrConnectWithoutTeacherScheduleInput
    connect?: ClassroomsWhereUniqueInput
  }

  export type CoursesCreateNestedOneWithoutTeacherScheduleInput = {
    create?: XOR<CoursesCreateWithoutTeacherScheduleInput, CoursesUncheckedCreateWithoutTeacherScheduleInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutTeacherScheduleInput
    connect?: CoursesWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutTeacherSchedulesInput = {
    create?: XOR<DepartmentCreateWithoutTeacherSchedulesInput, DepartmentUncheckedCreateWithoutTeacherSchedulesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeacherSchedulesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutTeacherScheduleInput = {
    create?: XOR<TeacherCreateWithoutTeacherScheduleInput, TeacherUncheckedCreateWithoutTeacherScheduleInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeacherScheduleInput
    connect?: TeacherWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ClassroomsUpdateOneRequiredWithoutTeacherScheduleNestedInput = {
    create?: XOR<ClassroomsCreateWithoutTeacherScheduleInput, ClassroomsUncheckedCreateWithoutTeacherScheduleInput>
    connectOrCreate?: ClassroomsCreateOrConnectWithoutTeacherScheduleInput
    upsert?: ClassroomsUpsertWithoutTeacherScheduleInput
    connect?: ClassroomsWhereUniqueInput
    update?: XOR<XOR<ClassroomsUpdateToOneWithWhereWithoutTeacherScheduleInput, ClassroomsUpdateWithoutTeacherScheduleInput>, ClassroomsUncheckedUpdateWithoutTeacherScheduleInput>
  }

  export type CoursesUpdateOneRequiredWithoutTeacherScheduleNestedInput = {
    create?: XOR<CoursesCreateWithoutTeacherScheduleInput, CoursesUncheckedCreateWithoutTeacherScheduleInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutTeacherScheduleInput
    upsert?: CoursesUpsertWithoutTeacherScheduleInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutTeacherScheduleInput, CoursesUpdateWithoutTeacherScheduleInput>, CoursesUncheckedUpdateWithoutTeacherScheduleInput>
  }

  export type DepartmentUpdateOneRequiredWithoutTeacherSchedulesNestedInput = {
    create?: XOR<DepartmentCreateWithoutTeacherSchedulesInput, DepartmentUncheckedCreateWithoutTeacherSchedulesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeacherSchedulesInput
    upsert?: DepartmentUpsertWithoutTeacherSchedulesInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutTeacherSchedulesInput, DepartmentUpdateWithoutTeacherSchedulesInput>, DepartmentUncheckedUpdateWithoutTeacherSchedulesInput>
  }

  export type TeacherUpdateOneRequiredWithoutTeacherScheduleNestedInput = {
    create?: XOR<TeacherCreateWithoutTeacherScheduleInput, TeacherUncheckedCreateWithoutTeacherScheduleInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeacherScheduleInput
    upsert?: TeacherUpsertWithoutTeacherScheduleInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutTeacherScheduleInput, TeacherUpdateWithoutTeacherScheduleInput>, TeacherUncheckedUpdateWithoutTeacherScheduleInput>
  }

  export type CoursesCreateNestedOneWithoutTeachersCoursePlanningInput = {
    create?: XOR<CoursesCreateWithoutTeachersCoursePlanningInput, CoursesUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutTeachersCoursePlanningInput
    connect?: CoursesWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutTeachersCoursePlanningInput = {
    create?: XOR<DepartmentCreateWithoutTeachersCoursePlanningInput, DepartmentUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersCoursePlanningInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentsOfEducationCreateNestedOneWithoutTeachersCoursePlanningInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutTeachersCoursePlanningInput, DepartmentsOfEducationUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutTeachersCoursePlanningInput
    connect?: DepartmentsOfEducationWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutTeachersCoursePlanningInput = {
    create?: XOR<TeacherCreateWithoutTeachersCoursePlanningInput, TeacherUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeachersCoursePlanningInput
    connect?: TeacherWhereUniqueInput
  }

  export type TeachersMajorPlanningCreateNestedOneWithoutTeachersCoursePlanningInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutTeachersCoursePlanningInput, TeachersMajorPlanningUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutTeachersCoursePlanningInput
    connect?: TeachersMajorPlanningWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type CoursesUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput = {
    create?: XOR<CoursesCreateWithoutTeachersCoursePlanningInput, CoursesUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutTeachersCoursePlanningInput
    upsert?: CoursesUpsertWithoutTeachersCoursePlanningInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutTeachersCoursePlanningInput, CoursesUpdateWithoutTeachersCoursePlanningInput>, CoursesUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type DepartmentUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput = {
    create?: XOR<DepartmentCreateWithoutTeachersCoursePlanningInput, DepartmentUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersCoursePlanningInput
    upsert?: DepartmentUpsertWithoutTeachersCoursePlanningInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutTeachersCoursePlanningInput, DepartmentUpdateWithoutTeachersCoursePlanningInput>, DepartmentUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type DepartmentsOfEducationUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutTeachersCoursePlanningInput, DepartmentsOfEducationUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutTeachersCoursePlanningInput
    upsert?: DepartmentsOfEducationUpsertWithoutTeachersCoursePlanningInput
    connect?: DepartmentsOfEducationWhereUniqueInput
    update?: XOR<XOR<DepartmentsOfEducationUpdateToOneWithWhereWithoutTeachersCoursePlanningInput, DepartmentsOfEducationUpdateWithoutTeachersCoursePlanningInput>, DepartmentsOfEducationUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type TeacherUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput = {
    create?: XOR<TeacherCreateWithoutTeachersCoursePlanningInput, TeacherUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeachersCoursePlanningInput
    upsert?: TeacherUpsertWithoutTeachersCoursePlanningInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutTeachersCoursePlanningInput, TeacherUpdateWithoutTeachersCoursePlanningInput>, TeacherUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type TeachersMajorPlanningUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutTeachersCoursePlanningInput, TeachersMajorPlanningUncheckedCreateWithoutTeachersCoursePlanningInput>
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutTeachersCoursePlanningInput
    upsert?: TeachersMajorPlanningUpsertWithoutTeachersCoursePlanningInput
    connect?: TeachersMajorPlanningWhereUniqueInput
    update?: XOR<XOR<TeachersMajorPlanningUpdateToOneWithWhereWithoutTeachersCoursePlanningInput, TeachersMajorPlanningUpdateWithoutTeachersCoursePlanningInput>, TeachersMajorPlanningUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type DepartmentsOfEducationCreateNestedOneWithoutClassroomsInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutClassroomsInput, DepartmentsOfEducationUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutClassroomsInput
    connect?: DepartmentsOfEducationWhereUniqueInput
  }

  export type TeacherScheduleCreateNestedManyWithoutClassroomInput = {
    create?: XOR<TeacherScheduleCreateWithoutClassroomInput, TeacherScheduleUncheckedCreateWithoutClassroomInput> | TeacherScheduleCreateWithoutClassroomInput[] | TeacherScheduleUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutClassroomInput | TeacherScheduleCreateOrConnectWithoutClassroomInput[]
    createMany?: TeacherScheduleCreateManyClassroomInputEnvelope
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutClassroomsInput = {
    create?: XOR<DepartmentCreateWithoutClassroomsInput, DepartmentUncheckedCreateWithoutClassroomsInput> | DepartmentCreateWithoutClassroomsInput[] | DepartmentUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutClassroomsInput | DepartmentCreateOrConnectWithoutClassroomsInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type TeacherScheduleUncheckedCreateNestedManyWithoutClassroomInput = {
    create?: XOR<TeacherScheduleCreateWithoutClassroomInput, TeacherScheduleUncheckedCreateWithoutClassroomInput> | TeacherScheduleCreateWithoutClassroomInput[] | TeacherScheduleUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutClassroomInput | TeacherScheduleCreateOrConnectWithoutClassroomInput[]
    createMany?: TeacherScheduleCreateManyClassroomInputEnvelope
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutClassroomsInput = {
    create?: XOR<DepartmentCreateWithoutClassroomsInput, DepartmentUncheckedCreateWithoutClassroomsInput> | DepartmentCreateWithoutClassroomsInput[] | DepartmentUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutClassroomsInput | DepartmentCreateOrConnectWithoutClassroomsInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type EnumClassroomTypeEnumFieldUpdateOperationsInput = {
    set?: $Enums.ClassroomTypeEnum
  }

  export type EnumProjectorEnumFieldUpdateOperationsInput = {
    set?: $Enums.ProjectorEnum
  }

  export type EnumTvEnumFieldUpdateOperationsInput = {
    set?: $Enums.TvEnum
  }

  export type DepartmentsOfEducationUpdateOneWithoutClassroomsNestedInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutClassroomsInput, DepartmentsOfEducationUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutClassroomsInput
    upsert?: DepartmentsOfEducationUpsertWithoutClassroomsInput
    disconnect?: DepartmentsOfEducationWhereInput | boolean
    delete?: DepartmentsOfEducationWhereInput | boolean
    connect?: DepartmentsOfEducationWhereUniqueInput
    update?: XOR<XOR<DepartmentsOfEducationUpdateToOneWithWhereWithoutClassroomsInput, DepartmentsOfEducationUpdateWithoutClassroomsInput>, DepartmentsOfEducationUncheckedUpdateWithoutClassroomsInput>
  }

  export type TeacherScheduleUpdateManyWithoutClassroomNestedInput = {
    create?: XOR<TeacherScheduleCreateWithoutClassroomInput, TeacherScheduleUncheckedCreateWithoutClassroomInput> | TeacherScheduleCreateWithoutClassroomInput[] | TeacherScheduleUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutClassroomInput | TeacherScheduleCreateOrConnectWithoutClassroomInput[]
    upsert?: TeacherScheduleUpsertWithWhereUniqueWithoutClassroomInput | TeacherScheduleUpsertWithWhereUniqueWithoutClassroomInput[]
    createMany?: TeacherScheduleCreateManyClassroomInputEnvelope
    set?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    disconnect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    delete?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    update?: TeacherScheduleUpdateWithWhereUniqueWithoutClassroomInput | TeacherScheduleUpdateWithWhereUniqueWithoutClassroomInput[]
    updateMany?: TeacherScheduleUpdateManyWithWhereWithoutClassroomInput | TeacherScheduleUpdateManyWithWhereWithoutClassroomInput[]
    deleteMany?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutClassroomsNestedInput = {
    create?: XOR<DepartmentCreateWithoutClassroomsInput, DepartmentUncheckedCreateWithoutClassroomsInput> | DepartmentCreateWithoutClassroomsInput[] | DepartmentUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutClassroomsInput | DepartmentCreateOrConnectWithoutClassroomsInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutClassroomsInput | DepartmentUpsertWithWhereUniqueWithoutClassroomsInput[]
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutClassroomsInput | DepartmentUpdateWithWhereUniqueWithoutClassroomsInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutClassroomsInput | DepartmentUpdateManyWithWhereWithoutClassroomsInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeacherScheduleUncheckedUpdateManyWithoutClassroomNestedInput = {
    create?: XOR<TeacherScheduleCreateWithoutClassroomInput, TeacherScheduleUncheckedCreateWithoutClassroomInput> | TeacherScheduleCreateWithoutClassroomInput[] | TeacherScheduleUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutClassroomInput | TeacherScheduleCreateOrConnectWithoutClassroomInput[]
    upsert?: TeacherScheduleUpsertWithWhereUniqueWithoutClassroomInput | TeacherScheduleUpsertWithWhereUniqueWithoutClassroomInput[]
    createMany?: TeacherScheduleCreateManyClassroomInputEnvelope
    set?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    disconnect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    delete?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    update?: TeacherScheduleUpdateWithWhereUniqueWithoutClassroomInput | TeacherScheduleUpdateWithWhereUniqueWithoutClassroomInput[]
    updateMany?: TeacherScheduleUpdateManyWithWhereWithoutClassroomInput | TeacherScheduleUpdateManyWithWhereWithoutClassroomInput[]
    deleteMany?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutClassroomsNestedInput = {
    create?: XOR<DepartmentCreateWithoutClassroomsInput, DepartmentUncheckedCreateWithoutClassroomsInput> | DepartmentCreateWithoutClassroomsInput[] | DepartmentUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutClassroomsInput | DepartmentCreateOrConnectWithoutClassroomsInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutClassroomsInput | DepartmentUpsertWithWhereUniqueWithoutClassroomsInput[]
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutClassroomsInput | DepartmentUpdateWithWhereUniqueWithoutClassroomsInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutClassroomsInput | DepartmentUpdateManyWithWhereWithoutClassroomsInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type MajorCreateNestedOneWithoutCoursesInput = {
    create?: XOR<MajorCreateWithoutCoursesInput, MajorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCoursesInput
    connect?: MajorWhereUniqueInput
  }

  export type TeacherScheduleCreateNestedManyWithoutCourseInput = {
    create?: XOR<TeacherScheduleCreateWithoutCourseInput, TeacherScheduleUncheckedCreateWithoutCourseInput> | TeacherScheduleCreateWithoutCourseInput[] | TeacherScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutCourseInput | TeacherScheduleCreateOrConnectWithoutCourseInput[]
    createMany?: TeacherScheduleCreateManyCourseInputEnvelope
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
  }

  export type TeachersCoursePlanningCreateNestedManyWithoutCourseInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutCourseInput, TeachersCoursePlanningUncheckedCreateWithoutCourseInput> | TeachersCoursePlanningCreateWithoutCourseInput[] | TeachersCoursePlanningUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutCourseInput | TeachersCoursePlanningCreateOrConnectWithoutCourseInput[]
    createMany?: TeachersCoursePlanningCreateManyCourseInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type DepartmentCreateNestedOneWithoutCoursesInput = {
    create?: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type StudentCurriculumCreateNestedManyWithoutCourseInput = {
    create?: XOR<StudentCurriculumCreateWithoutCourseInput, StudentCurriculumUncheckedCreateWithoutCourseInput> | StudentCurriculumCreateWithoutCourseInput[] | StudentCurriculumUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentCurriculumCreateOrConnectWithoutCourseInput | StudentCurriculumCreateOrConnectWithoutCourseInput[]
    createMany?: StudentCurriculumCreateManyCourseInputEnvelope
    connect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
  }

  export type TeacherScheduleUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<TeacherScheduleCreateWithoutCourseInput, TeacherScheduleUncheckedCreateWithoutCourseInput> | TeacherScheduleCreateWithoutCourseInput[] | TeacherScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutCourseInput | TeacherScheduleCreateOrConnectWithoutCourseInput[]
    createMany?: TeacherScheduleCreateManyCourseInputEnvelope
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
  }

  export type TeachersCoursePlanningUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutCourseInput, TeachersCoursePlanningUncheckedCreateWithoutCourseInput> | TeachersCoursePlanningCreateWithoutCourseInput[] | TeachersCoursePlanningUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutCourseInput | TeachersCoursePlanningCreateOrConnectWithoutCourseInput[]
    createMany?: TeachersCoursePlanningCreateManyCourseInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type StudentCurriculumUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<StudentCurriculumCreateWithoutCourseInput, StudentCurriculumUncheckedCreateWithoutCourseInput> | StudentCurriculumCreateWithoutCourseInput[] | StudentCurriculumUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentCurriculumCreateOrConnectWithoutCourseInput | StudentCurriculumCreateOrConnectWithoutCourseInput[]
    createMany?: StudentCurriculumCreateManyCourseInputEnvelope
    connect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
  }

  export type EnumCourseTypeEnumFieldUpdateOperationsInput = {
    set?: $Enums.CourseTypeEnum
  }

  export type EnumCourseSeasonTypeEnumFieldUpdateOperationsInput = {
    set?: $Enums.CourseSeasonTypeEnum
  }

  export type MajorUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<MajorCreateWithoutCoursesInput, MajorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCoursesInput
    upsert?: MajorUpsertWithoutCoursesInput
    connect?: MajorWhereUniqueInput
    update?: XOR<XOR<MajorUpdateToOneWithWhereWithoutCoursesInput, MajorUpdateWithoutCoursesInput>, MajorUncheckedUpdateWithoutCoursesInput>
  }

  export type TeacherScheduleUpdateManyWithoutCourseNestedInput = {
    create?: XOR<TeacherScheduleCreateWithoutCourseInput, TeacherScheduleUncheckedCreateWithoutCourseInput> | TeacherScheduleCreateWithoutCourseInput[] | TeacherScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutCourseInput | TeacherScheduleCreateOrConnectWithoutCourseInput[]
    upsert?: TeacherScheduleUpsertWithWhereUniqueWithoutCourseInput | TeacherScheduleUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: TeacherScheduleCreateManyCourseInputEnvelope
    set?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    disconnect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    delete?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    update?: TeacherScheduleUpdateWithWhereUniqueWithoutCourseInput | TeacherScheduleUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: TeacherScheduleUpdateManyWithWhereWithoutCourseInput | TeacherScheduleUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
  }

  export type TeachersCoursePlanningUpdateManyWithoutCourseNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutCourseInput, TeachersCoursePlanningUncheckedCreateWithoutCourseInput> | TeachersCoursePlanningCreateWithoutCourseInput[] | TeachersCoursePlanningUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutCourseInput | TeachersCoursePlanningCreateOrConnectWithoutCourseInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutCourseInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: TeachersCoursePlanningCreateManyCourseInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutCourseInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutCourseInput | TeachersCoursePlanningUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type DepartmentUpdateOneWithoutCoursesNestedInput = {
    create?: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesInput
    upsert?: DepartmentUpsertWithoutCoursesInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutCoursesInput, DepartmentUpdateWithoutCoursesInput>, DepartmentUncheckedUpdateWithoutCoursesInput>
  }

  export type StudentCurriculumUpdateManyWithoutCourseNestedInput = {
    create?: XOR<StudentCurriculumCreateWithoutCourseInput, StudentCurriculumUncheckedCreateWithoutCourseInput> | StudentCurriculumCreateWithoutCourseInput[] | StudentCurriculumUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentCurriculumCreateOrConnectWithoutCourseInput | StudentCurriculumCreateOrConnectWithoutCourseInput[]
    upsert?: StudentCurriculumUpsertWithWhereUniqueWithoutCourseInput | StudentCurriculumUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: StudentCurriculumCreateManyCourseInputEnvelope
    set?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    disconnect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    delete?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    connect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    update?: StudentCurriculumUpdateWithWhereUniqueWithoutCourseInput | StudentCurriculumUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: StudentCurriculumUpdateManyWithWhereWithoutCourseInput | StudentCurriculumUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: StudentCurriculumScalarWhereInput | StudentCurriculumScalarWhereInput[]
  }

  export type TeacherScheduleUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<TeacherScheduleCreateWithoutCourseInput, TeacherScheduleUncheckedCreateWithoutCourseInput> | TeacherScheduleCreateWithoutCourseInput[] | TeacherScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutCourseInput | TeacherScheduleCreateOrConnectWithoutCourseInput[]
    upsert?: TeacherScheduleUpsertWithWhereUniqueWithoutCourseInput | TeacherScheduleUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: TeacherScheduleCreateManyCourseInputEnvelope
    set?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    disconnect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    delete?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    update?: TeacherScheduleUpdateWithWhereUniqueWithoutCourseInput | TeacherScheduleUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: TeacherScheduleUpdateManyWithWhereWithoutCourseInput | TeacherScheduleUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutCourseInput, TeachersCoursePlanningUncheckedCreateWithoutCourseInput> | TeachersCoursePlanningCreateWithoutCourseInput[] | TeachersCoursePlanningUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutCourseInput | TeachersCoursePlanningCreateOrConnectWithoutCourseInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutCourseInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: TeachersCoursePlanningCreateManyCourseInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutCourseInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutCourseInput | TeachersCoursePlanningUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type StudentCurriculumUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<StudentCurriculumCreateWithoutCourseInput, StudentCurriculumUncheckedCreateWithoutCourseInput> | StudentCurriculumCreateWithoutCourseInput[] | StudentCurriculumUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentCurriculumCreateOrConnectWithoutCourseInput | StudentCurriculumCreateOrConnectWithoutCourseInput[]
    upsert?: StudentCurriculumUpsertWithWhereUniqueWithoutCourseInput | StudentCurriculumUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: StudentCurriculumCreateManyCourseInputEnvelope
    set?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    disconnect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    delete?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    connect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    update?: StudentCurriculumUpdateWithWhereUniqueWithoutCourseInput | StudentCurriculumUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: StudentCurriculumUpdateManyWithWhereWithoutCourseInput | StudentCurriculumUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: StudentCurriculumScalarWhereInput | StudentCurriculumScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutTeachersMajorPlanningInput = {
    create?: XOR<DepartmentCreateWithoutTeachersMajorPlanningInput, DepartmentUncheckedCreateWithoutTeachersMajorPlanningInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersMajorPlanningInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentsOfEducationCreateNestedOneWithoutTeachersMajorPlanningInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutTeachersMajorPlanningInput, DepartmentsOfEducationUncheckedCreateWithoutTeachersMajorPlanningInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutTeachersMajorPlanningInput
    connect?: DepartmentsOfEducationWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutTeachersMajorPlanningInput = {
    create?: XOR<TeacherCreateWithoutTeachersMajorPlanningInput, TeacherUncheckedCreateWithoutTeachersMajorPlanningInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeachersMajorPlanningInput
    connect?: TeacherWhereUniqueInput
  }

  export type TeachersCoursePlanningCreateNestedManyWithoutTeachersMajorPlanningInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput, TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput> | TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput[] | TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput | TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput[]
    createMany?: TeachersCoursePlanningCreateManyTeachersMajorPlanningInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeachersMajorPlanningInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput, TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput> | TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput[] | TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput | TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput[]
    createMany?: TeachersCoursePlanningCreateManyTeachersMajorPlanningInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type DepartmentUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput = {
    create?: XOR<DepartmentCreateWithoutTeachersMajorPlanningInput, DepartmentUncheckedCreateWithoutTeachersMajorPlanningInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersMajorPlanningInput
    upsert?: DepartmentUpsertWithoutTeachersMajorPlanningInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutTeachersMajorPlanningInput, DepartmentUpdateWithoutTeachersMajorPlanningInput>, DepartmentUncheckedUpdateWithoutTeachersMajorPlanningInput>
  }

  export type DepartmentsOfEducationUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutTeachersMajorPlanningInput, DepartmentsOfEducationUncheckedCreateWithoutTeachersMajorPlanningInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutTeachersMajorPlanningInput
    upsert?: DepartmentsOfEducationUpsertWithoutTeachersMajorPlanningInput
    connect?: DepartmentsOfEducationWhereUniqueInput
    update?: XOR<XOR<DepartmentsOfEducationUpdateToOneWithWhereWithoutTeachersMajorPlanningInput, DepartmentsOfEducationUpdateWithoutTeachersMajorPlanningInput>, DepartmentsOfEducationUncheckedUpdateWithoutTeachersMajorPlanningInput>
  }

  export type TeacherUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput = {
    create?: XOR<TeacherCreateWithoutTeachersMajorPlanningInput, TeacherUncheckedCreateWithoutTeachersMajorPlanningInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeachersMajorPlanningInput
    upsert?: TeacherUpsertWithoutTeachersMajorPlanningInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutTeachersMajorPlanningInput, TeacherUpdateWithoutTeachersMajorPlanningInput>, TeacherUncheckedUpdateWithoutTeachersMajorPlanningInput>
  }

  export type TeachersCoursePlanningUpdateManyWithoutTeachersMajorPlanningNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput, TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput> | TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput[] | TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput | TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeachersMajorPlanningInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeachersMajorPlanningInput[]
    createMany?: TeachersCoursePlanningCreateManyTeachersMajorPlanningInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeachersMajorPlanningInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeachersMajorPlanningInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutTeachersMajorPlanningInput | TeachersCoursePlanningUpdateManyWithWhereWithoutTeachersMajorPlanningInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutTeachersMajorPlanningNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput, TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput> | TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput[] | TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput | TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeachersMajorPlanningInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeachersMajorPlanningInput[]
    createMany?: TeachersCoursePlanningCreateManyTeachersMajorPlanningInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeachersMajorPlanningInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeachersMajorPlanningInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutTeachersMajorPlanningInput | TeachersCoursePlanningUpdateManyWithWhereWithoutTeachersMajorPlanningInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type auth_userCreateNestedOneWithoutTeacherInput = {
    create?: XOR<auth_userCreateWithoutTeacherInput, auth_userUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: auth_userCreateOrConnectWithoutTeacherInput
    connect?: auth_userWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutTeacherInput = {
    create?: XOR<DepartmentCreateWithoutTeacherInput, DepartmentUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeacherInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentsOfEducationCreateNestedOneWithoutTeacherInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutTeacherInput, DepartmentsOfEducationUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutTeacherInput
    connect?: DepartmentsOfEducationWhereUniqueInput
  }

  export type TeacherScheduleCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherScheduleCreateWithoutTeacherInput, TeacherScheduleUncheckedCreateWithoutTeacherInput> | TeacherScheduleCreateWithoutTeacherInput[] | TeacherScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutTeacherInput | TeacherScheduleCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherScheduleCreateManyTeacherInputEnvelope
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
  }

  export type TeachersCoursePlanningCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutTeacherInput, TeachersCoursePlanningUncheckedCreateWithoutTeacherInput> | TeachersCoursePlanningCreateWithoutTeacherInput[] | TeachersCoursePlanningUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutTeacherInput | TeachersCoursePlanningCreateOrConnectWithoutTeacherInput[]
    createMany?: TeachersCoursePlanningCreateManyTeacherInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type TeachersMajorPlanningCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutTeacherInput, TeachersMajorPlanningUncheckedCreateWithoutTeacherInput> | TeachersMajorPlanningCreateWithoutTeacherInput[] | TeachersMajorPlanningUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutTeacherInput | TeachersMajorPlanningCreateOrConnectWithoutTeacherInput[]
    createMany?: TeachersMajorPlanningCreateManyTeacherInputEnvelope
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
  }

  export type StudentClubsCreateNestedManyWithoutClub_advisor_teacherInput = {
    create?: XOR<StudentClubsCreateWithoutClub_advisor_teacherInput, StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput> | StudentClubsCreateWithoutClub_advisor_teacherInput[] | StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput | StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput[]
    createMany?: StudentClubsCreateManyClub_advisor_teacherInputEnvelope
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
  }

  export type TeacherScheduleUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherScheduleCreateWithoutTeacherInput, TeacherScheduleUncheckedCreateWithoutTeacherInput> | TeacherScheduleCreateWithoutTeacherInput[] | TeacherScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutTeacherInput | TeacherScheduleCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherScheduleCreateManyTeacherInputEnvelope
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
  }

  export type TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutTeacherInput, TeachersCoursePlanningUncheckedCreateWithoutTeacherInput> | TeachersCoursePlanningCreateWithoutTeacherInput[] | TeachersCoursePlanningUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutTeacherInput | TeachersCoursePlanningCreateOrConnectWithoutTeacherInput[]
    createMany?: TeachersCoursePlanningCreateManyTeacherInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type TeachersMajorPlanningUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutTeacherInput, TeachersMajorPlanningUncheckedCreateWithoutTeacherInput> | TeachersMajorPlanningCreateWithoutTeacherInput[] | TeachersMajorPlanningUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutTeacherInput | TeachersMajorPlanningCreateOrConnectWithoutTeacherInput[]
    createMany?: TeachersMajorPlanningCreateManyTeacherInputEnvelope
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
  }

  export type StudentClubsUncheckedCreateNestedManyWithoutClub_advisor_teacherInput = {
    create?: XOR<StudentClubsCreateWithoutClub_advisor_teacherInput, StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput> | StudentClubsCreateWithoutClub_advisor_teacherInput[] | StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput | StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput[]
    createMany?: StudentClubsCreateManyClub_advisor_teacherInputEnvelope
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
  }

  export type EnumIsActiveEnumFieldUpdateOperationsInput = {
    set?: $Enums.IsActiveEnum
  }

  export type auth_userUpdateOneWithoutTeacherNestedInput = {
    create?: XOR<auth_userCreateWithoutTeacherInput, auth_userUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: auth_userCreateOrConnectWithoutTeacherInput
    upsert?: auth_userUpsertWithoutTeacherInput
    disconnect?: auth_userWhereInput | boolean
    delete?: auth_userWhereInput | boolean
    connect?: auth_userWhereUniqueInput
    update?: XOR<XOR<auth_userUpdateToOneWithWhereWithoutTeacherInput, auth_userUpdateWithoutTeacherInput>, auth_userUncheckedUpdateWithoutTeacherInput>
  }

  export type DepartmentUpdateOneWithoutTeacherNestedInput = {
    create?: XOR<DepartmentCreateWithoutTeacherInput, DepartmentUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeacherInput
    upsert?: DepartmentUpsertWithoutTeacherInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutTeacherInput, DepartmentUpdateWithoutTeacherInput>, DepartmentUncheckedUpdateWithoutTeacherInput>
  }

  export type DepartmentsOfEducationUpdateOneRequiredWithoutTeacherNestedInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutTeacherInput, DepartmentsOfEducationUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutTeacherInput
    upsert?: DepartmentsOfEducationUpsertWithoutTeacherInput
    connect?: DepartmentsOfEducationWhereUniqueInput
    update?: XOR<XOR<DepartmentsOfEducationUpdateToOneWithWhereWithoutTeacherInput, DepartmentsOfEducationUpdateWithoutTeacherInput>, DepartmentsOfEducationUncheckedUpdateWithoutTeacherInput>
  }

  export type TeacherScheduleUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherScheduleCreateWithoutTeacherInput, TeacherScheduleUncheckedCreateWithoutTeacherInput> | TeacherScheduleCreateWithoutTeacherInput[] | TeacherScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutTeacherInput | TeacherScheduleCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherScheduleUpsertWithWhereUniqueWithoutTeacherInput | TeacherScheduleUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherScheduleCreateManyTeacherInputEnvelope
    set?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    disconnect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    delete?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    update?: TeacherScheduleUpdateWithWhereUniqueWithoutTeacherInput | TeacherScheduleUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherScheduleUpdateManyWithWhereWithoutTeacherInput | TeacherScheduleUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
  }

  export type TeachersCoursePlanningUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutTeacherInput, TeachersCoursePlanningUncheckedCreateWithoutTeacherInput> | TeachersCoursePlanningCreateWithoutTeacherInput[] | TeachersCoursePlanningUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutTeacherInput | TeachersCoursePlanningCreateOrConnectWithoutTeacherInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeacherInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeachersCoursePlanningCreateManyTeacherInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeacherInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutTeacherInput | TeachersCoursePlanningUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type TeachersMajorPlanningUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutTeacherInput, TeachersMajorPlanningUncheckedCreateWithoutTeacherInput> | TeachersMajorPlanningCreateWithoutTeacherInput[] | TeachersMajorPlanningUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutTeacherInput | TeachersMajorPlanningCreateOrConnectWithoutTeacherInput[]
    upsert?: TeachersMajorPlanningUpsertWithWhereUniqueWithoutTeacherInput | TeachersMajorPlanningUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeachersMajorPlanningCreateManyTeacherInputEnvelope
    set?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    disconnect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    delete?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    update?: TeachersMajorPlanningUpdateWithWhereUniqueWithoutTeacherInput | TeachersMajorPlanningUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeachersMajorPlanningUpdateManyWithWhereWithoutTeacherInput | TeachersMajorPlanningUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeachersMajorPlanningScalarWhereInput | TeachersMajorPlanningScalarWhereInput[]
  }

  export type StudentClubsUpdateManyWithoutClub_advisor_teacherNestedInput = {
    create?: XOR<StudentClubsCreateWithoutClub_advisor_teacherInput, StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput> | StudentClubsCreateWithoutClub_advisor_teacherInput[] | StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput | StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput[]
    upsert?: StudentClubsUpsertWithWhereUniqueWithoutClub_advisor_teacherInput | StudentClubsUpsertWithWhereUniqueWithoutClub_advisor_teacherInput[]
    createMany?: StudentClubsCreateManyClub_advisor_teacherInputEnvelope
    set?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    disconnect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    delete?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    update?: StudentClubsUpdateWithWhereUniqueWithoutClub_advisor_teacherInput | StudentClubsUpdateWithWhereUniqueWithoutClub_advisor_teacherInput[]
    updateMany?: StudentClubsUpdateManyWithWhereWithoutClub_advisor_teacherInput | StudentClubsUpdateManyWithWhereWithoutClub_advisor_teacherInput[]
    deleteMany?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
  }

  export type TeacherScheduleUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherScheduleCreateWithoutTeacherInput, TeacherScheduleUncheckedCreateWithoutTeacherInput> | TeacherScheduleCreateWithoutTeacherInput[] | TeacherScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutTeacherInput | TeacherScheduleCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherScheduleUpsertWithWhereUniqueWithoutTeacherInput | TeacherScheduleUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherScheduleCreateManyTeacherInputEnvelope
    set?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    disconnect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    delete?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    update?: TeacherScheduleUpdateWithWhereUniqueWithoutTeacherInput | TeacherScheduleUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherScheduleUpdateManyWithWhereWithoutTeacherInput | TeacherScheduleUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutTeacherInput, TeachersCoursePlanningUncheckedCreateWithoutTeacherInput> | TeachersCoursePlanningCreateWithoutTeacherInput[] | TeachersCoursePlanningUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutTeacherInput | TeachersCoursePlanningCreateOrConnectWithoutTeacherInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeacherInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeachersCoursePlanningCreateManyTeacherInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeacherInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutTeacherInput | TeachersCoursePlanningUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutTeacherInput, TeachersMajorPlanningUncheckedCreateWithoutTeacherInput> | TeachersMajorPlanningCreateWithoutTeacherInput[] | TeachersMajorPlanningUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutTeacherInput | TeachersMajorPlanningCreateOrConnectWithoutTeacherInput[]
    upsert?: TeachersMajorPlanningUpsertWithWhereUniqueWithoutTeacherInput | TeachersMajorPlanningUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeachersMajorPlanningCreateManyTeacherInputEnvelope
    set?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    disconnect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    delete?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    update?: TeachersMajorPlanningUpdateWithWhereUniqueWithoutTeacherInput | TeachersMajorPlanningUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeachersMajorPlanningUpdateManyWithWhereWithoutTeacherInput | TeachersMajorPlanningUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeachersMajorPlanningScalarWhereInput | TeachersMajorPlanningScalarWhereInput[]
  }

  export type StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherNestedInput = {
    create?: XOR<StudentClubsCreateWithoutClub_advisor_teacherInput, StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput> | StudentClubsCreateWithoutClub_advisor_teacherInput[] | StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput | StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput[]
    upsert?: StudentClubsUpsertWithWhereUniqueWithoutClub_advisor_teacherInput | StudentClubsUpsertWithWhereUniqueWithoutClub_advisor_teacherInput[]
    createMany?: StudentClubsCreateManyClub_advisor_teacherInputEnvelope
    set?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    disconnect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    delete?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    update?: StudentClubsUpdateWithWhereUniqueWithoutClub_advisor_teacherInput | StudentClubsUpdateWithWhereUniqueWithoutClub_advisor_teacherInput[]
    updateMany?: StudentClubsUpdateManyWithWhereWithoutClub_advisor_teacherInput | StudentClubsUpdateManyWithWhereWithoutClub_advisor_teacherInput[]
    deleteMany?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
  }

  export type TeacherCreateNestedOneWithoutStudentClubsInput = {
    create?: XOR<TeacherCreateWithoutStudentClubsInput, TeacherUncheckedCreateWithoutStudentClubsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutStudentClubsInput
    connect?: TeacherWhereUniqueInput
  }

  export type auth_userCreateNestedOneWithoutAssistantLeaderInInput = {
    create?: XOR<auth_userCreateWithoutAssistantLeaderInInput, auth_userUncheckedCreateWithoutAssistantLeaderInInput>
    connectOrCreate?: auth_userCreateOrConnectWithoutAssistantLeaderInInput
    connect?: auth_userWhereUniqueInput
  }

  export type MajorCreateNestedOneWithoutStudentClubsInput = {
    create?: XOR<MajorCreateWithoutStudentClubsInput, MajorUncheckedCreateWithoutStudentClubsInput>
    connectOrCreate?: MajorCreateOrConnectWithoutStudentClubsInput
    connect?: MajorWhereUniqueInput
  }

  export type auth_userCreateNestedOneWithoutPrimaryLeaderInInput = {
    create?: XOR<auth_userCreateWithoutPrimaryLeaderInInput, auth_userUncheckedCreateWithoutPrimaryLeaderInInput>
    connectOrCreate?: auth_userCreateOrConnectWithoutPrimaryLeaderInInput
    connect?: auth_userWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutStudent_clubsInput = {
    create?: XOR<StudentCreateWithoutStudent_clubsInput, StudentUncheckedCreateWithoutStudent_clubsInput> | StudentCreateWithoutStudent_clubsInput[] | StudentUncheckedCreateWithoutStudent_clubsInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_clubsInput | StudentCreateOrConnectWithoutStudent_clubsInput[]
    createMany?: StudentCreateManyStudent_clubsInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutStudent_clubsInput = {
    create?: XOR<StudentCreateWithoutStudent_clubsInput, StudentUncheckedCreateWithoutStudent_clubsInput> | StudentCreateWithoutStudent_clubsInput[] | StudentUncheckedCreateWithoutStudent_clubsInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_clubsInput | StudentCreateOrConnectWithoutStudent_clubsInput[]
    createMany?: StudentCreateManyStudent_clubsInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type EnumClubTypeEnumFieldUpdateOperationsInput = {
    set?: $Enums.ClubTypeEnum
  }

  export type TeacherUpdateOneRequiredWithoutStudentClubsNestedInput = {
    create?: XOR<TeacherCreateWithoutStudentClubsInput, TeacherUncheckedCreateWithoutStudentClubsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutStudentClubsInput
    upsert?: TeacherUpsertWithoutStudentClubsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutStudentClubsInput, TeacherUpdateWithoutStudentClubsInput>, TeacherUncheckedUpdateWithoutStudentClubsInput>
  }

  export type auth_userUpdateOneRequiredWithoutAssistantLeaderInNestedInput = {
    create?: XOR<auth_userCreateWithoutAssistantLeaderInInput, auth_userUncheckedCreateWithoutAssistantLeaderInInput>
    connectOrCreate?: auth_userCreateOrConnectWithoutAssistantLeaderInInput
    upsert?: auth_userUpsertWithoutAssistantLeaderInInput
    connect?: auth_userWhereUniqueInput
    update?: XOR<XOR<auth_userUpdateToOneWithWhereWithoutAssistantLeaderInInput, auth_userUpdateWithoutAssistantLeaderInInput>, auth_userUncheckedUpdateWithoutAssistantLeaderInInput>
  }

  export type MajorUpdateOneRequiredWithoutStudentClubsNestedInput = {
    create?: XOR<MajorCreateWithoutStudentClubsInput, MajorUncheckedCreateWithoutStudentClubsInput>
    connectOrCreate?: MajorCreateOrConnectWithoutStudentClubsInput
    upsert?: MajorUpsertWithoutStudentClubsInput
    connect?: MajorWhereUniqueInput
    update?: XOR<XOR<MajorUpdateToOneWithWhereWithoutStudentClubsInput, MajorUpdateWithoutStudentClubsInput>, MajorUncheckedUpdateWithoutStudentClubsInput>
  }

  export type auth_userUpdateOneRequiredWithoutPrimaryLeaderInNestedInput = {
    create?: XOR<auth_userCreateWithoutPrimaryLeaderInInput, auth_userUncheckedCreateWithoutPrimaryLeaderInInput>
    connectOrCreate?: auth_userCreateOrConnectWithoutPrimaryLeaderInInput
    upsert?: auth_userUpsertWithoutPrimaryLeaderInInput
    connect?: auth_userWhereUniqueInput
    update?: XOR<XOR<auth_userUpdateToOneWithWhereWithoutPrimaryLeaderInInput, auth_userUpdateWithoutPrimaryLeaderInInput>, auth_userUncheckedUpdateWithoutPrimaryLeaderInInput>
  }

  export type StudentUpdateManyWithoutStudent_clubsNestedInput = {
    create?: XOR<StudentCreateWithoutStudent_clubsInput, StudentUncheckedCreateWithoutStudent_clubsInput> | StudentCreateWithoutStudent_clubsInput[] | StudentUncheckedCreateWithoutStudent_clubsInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_clubsInput | StudentCreateOrConnectWithoutStudent_clubsInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutStudent_clubsInput | StudentUpsertWithWhereUniqueWithoutStudent_clubsInput[]
    createMany?: StudentCreateManyStudent_clubsInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutStudent_clubsInput | StudentUpdateWithWhereUniqueWithoutStudent_clubsInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutStudent_clubsInput | StudentUpdateManyWithWhereWithoutStudent_clubsInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutStudent_clubsNestedInput = {
    create?: XOR<StudentCreateWithoutStudent_clubsInput, StudentUncheckedCreateWithoutStudent_clubsInput> | StudentCreateWithoutStudent_clubsInput[] | StudentUncheckedCreateWithoutStudent_clubsInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_clubsInput | StudentCreateOrConnectWithoutStudent_clubsInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutStudent_clubsInput | StudentUpsertWithWhereUniqueWithoutStudent_clubsInput[]
    createMany?: StudentCreateManyStudent_clubsInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutStudent_clubsInput | StudentUpdateWithWhereUniqueWithoutStudent_clubsInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutStudent_clubsInput | StudentUpdateManyWithWhereWithoutStudent_clubsInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type auth_userCreateNestedOneWithoutStudentInput = {
    create?: XOR<auth_userCreateWithoutStudentInput, auth_userUncheckedCreateWithoutStudentInput>
    connectOrCreate?: auth_userCreateOrConnectWithoutStudentInput
    connect?: auth_userWhereUniqueInput
  }

  export type MajorCreateNestedOneWithoutStudentInput = {
    create?: XOR<MajorCreateWithoutStudentInput, MajorUncheckedCreateWithoutStudentInput>
    connectOrCreate?: MajorCreateOrConnectWithoutStudentInput
    connect?: MajorWhereUniqueInput
  }

  export type StudentClubsCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentClubsCreateWithoutStudentInput, StudentClubsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentClubsCreateOrConnectWithoutStudentInput
    connect?: StudentClubsWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutStudentInput = {
    create?: XOR<DepartmentCreateWithoutStudentInput, DepartmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutStudentInput
    connect?: DepartmentWhereUniqueInput
  }

  export type StudentCurriculumCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentCurriculumCreateWithoutStudentInput, StudentCurriculumUncheckedCreateWithoutStudentInput> | StudentCurriculumCreateWithoutStudentInput[] | StudentCurriculumUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentCurriculumCreateOrConnectWithoutStudentInput | StudentCurriculumCreateOrConnectWithoutStudentInput[]
    createMany?: StudentCurriculumCreateManyStudentInputEnvelope
    connect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
  }

  export type StudentCurriculumUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentCurriculumCreateWithoutStudentInput, StudentCurriculumUncheckedCreateWithoutStudentInput> | StudentCurriculumCreateWithoutStudentInput[] | StudentCurriculumUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentCurriculumCreateOrConnectWithoutStudentInput | StudentCurriculumCreateOrConnectWithoutStudentInput[]
    createMany?: StudentCurriculumCreateManyStudentInputEnvelope
    connect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
  }

  export type EnumAdditionalRolesEnumFieldUpdateOperationsInput = {
    set?: $Enums.AdditionalRolesEnum
  }

  export type EnumYearClassificationEnumFieldUpdateOperationsInput = {
    set?: $Enums.YearClassificationEnum
  }

  export type NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput = {
    set?: $Enums.StudentIsActiveEnum | null
  }

  export type auth_userUpdateOneWithoutStudentNestedInput = {
    create?: XOR<auth_userCreateWithoutStudentInput, auth_userUncheckedCreateWithoutStudentInput>
    connectOrCreate?: auth_userCreateOrConnectWithoutStudentInput
    upsert?: auth_userUpsertWithoutStudentInput
    disconnect?: auth_userWhereInput | boolean
    delete?: auth_userWhereInput | boolean
    connect?: auth_userWhereUniqueInput
    update?: XOR<XOR<auth_userUpdateToOneWithWhereWithoutStudentInput, auth_userUpdateWithoutStudentInput>, auth_userUncheckedUpdateWithoutStudentInput>
  }

  export type MajorUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<MajorCreateWithoutStudentInput, MajorUncheckedCreateWithoutStudentInput>
    connectOrCreate?: MajorCreateOrConnectWithoutStudentInput
    upsert?: MajorUpsertWithoutStudentInput
    connect?: MajorWhereUniqueInput
    update?: XOR<XOR<MajorUpdateToOneWithWhereWithoutStudentInput, MajorUpdateWithoutStudentInput>, MajorUncheckedUpdateWithoutStudentInput>
  }

  export type StudentClubsUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentClubsCreateWithoutStudentInput, StudentClubsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentClubsCreateOrConnectWithoutStudentInput
    upsert?: StudentClubsUpsertWithoutStudentInput
    disconnect?: StudentClubsWhereInput | boolean
    delete?: StudentClubsWhereInput | boolean
    connect?: StudentClubsWhereUniqueInput
    update?: XOR<XOR<StudentClubsUpdateToOneWithWhereWithoutStudentInput, StudentClubsUpdateWithoutStudentInput>, StudentClubsUncheckedUpdateWithoutStudentInput>
  }

  export type DepartmentUpdateOneWithoutStudentNestedInput = {
    create?: XOR<DepartmentCreateWithoutStudentInput, DepartmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutStudentInput
    upsert?: DepartmentUpsertWithoutStudentInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutStudentInput, DepartmentUpdateWithoutStudentInput>, DepartmentUncheckedUpdateWithoutStudentInput>
  }

  export type StudentCurriculumUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentCurriculumCreateWithoutStudentInput, StudentCurriculumUncheckedCreateWithoutStudentInput> | StudentCurriculumCreateWithoutStudentInput[] | StudentCurriculumUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentCurriculumCreateOrConnectWithoutStudentInput | StudentCurriculumCreateOrConnectWithoutStudentInput[]
    upsert?: StudentCurriculumUpsertWithWhereUniqueWithoutStudentInput | StudentCurriculumUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentCurriculumCreateManyStudentInputEnvelope
    set?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    disconnect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    delete?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    connect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    update?: StudentCurriculumUpdateWithWhereUniqueWithoutStudentInput | StudentCurriculumUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentCurriculumUpdateManyWithWhereWithoutStudentInput | StudentCurriculumUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentCurriculumScalarWhereInput | StudentCurriculumScalarWhereInput[]
  }

  export type StudentCurriculumUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentCurriculumCreateWithoutStudentInput, StudentCurriculumUncheckedCreateWithoutStudentInput> | StudentCurriculumCreateWithoutStudentInput[] | StudentCurriculumUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentCurriculumCreateOrConnectWithoutStudentInput | StudentCurriculumCreateOrConnectWithoutStudentInput[]
    upsert?: StudentCurriculumUpsertWithWhereUniqueWithoutStudentInput | StudentCurriculumUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentCurriculumCreateManyStudentInputEnvelope
    set?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    disconnect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    delete?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    connect?: StudentCurriculumWhereUniqueInput | StudentCurriculumWhereUniqueInput[]
    update?: StudentCurriculumUpdateWithWhereUniqueWithoutStudentInput | StudentCurriculumUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentCurriculumUpdateManyWithWhereWithoutStudentInput | StudentCurriculumUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentCurriculumScalarWhereInput | StudentCurriculumScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutMajorsInput = {
    create?: XOR<DepartmentCreateWithoutMajorsInput, DepartmentUncheckedCreateWithoutMajorsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMajorsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutMajorsOfEducationInput = {
    create?: XOR<DepartmentCreateWithoutMajorsOfEducationInput, DepartmentUncheckedCreateWithoutMajorsOfEducationInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMajorsOfEducationInput
    connect?: DepartmentWhereUniqueInput
  }

  export type CoursesCreateNestedManyWithoutMajorInput = {
    create?: XOR<CoursesCreateWithoutMajorInput, CoursesUncheckedCreateWithoutMajorInput> | CoursesCreateWithoutMajorInput[] | CoursesUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutMajorInput | CoursesCreateOrConnectWithoutMajorInput[]
    createMany?: CoursesCreateManyMajorInputEnvelope
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutMajorInput = {
    create?: XOR<StudentCreateWithoutMajorInput, StudentUncheckedCreateWithoutMajorInput> | StudentCreateWithoutMajorInput[] | StudentUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutMajorInput | StudentCreateOrConnectWithoutMajorInput[]
    createMany?: StudentCreateManyMajorInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentClubsCreateNestedManyWithoutClubMajorInput = {
    create?: XOR<StudentClubsCreateWithoutClubMajorInput, StudentClubsUncheckedCreateWithoutClubMajorInput> | StudentClubsCreateWithoutClubMajorInput[] | StudentClubsUncheckedCreateWithoutClubMajorInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubMajorInput | StudentClubsCreateOrConnectWithoutClubMajorInput[]
    createMany?: StudentClubsCreateManyClubMajorInputEnvelope
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
  }

  export type CoursesUncheckedCreateNestedManyWithoutMajorInput = {
    create?: XOR<CoursesCreateWithoutMajorInput, CoursesUncheckedCreateWithoutMajorInput> | CoursesCreateWithoutMajorInput[] | CoursesUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutMajorInput | CoursesCreateOrConnectWithoutMajorInput[]
    createMany?: CoursesCreateManyMajorInputEnvelope
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutMajorInput = {
    create?: XOR<StudentCreateWithoutMajorInput, StudentUncheckedCreateWithoutMajorInput> | StudentCreateWithoutMajorInput[] | StudentUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutMajorInput | StudentCreateOrConnectWithoutMajorInput[]
    createMany?: StudentCreateManyMajorInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentClubsUncheckedCreateNestedManyWithoutClubMajorInput = {
    create?: XOR<StudentClubsCreateWithoutClubMajorInput, StudentClubsUncheckedCreateWithoutClubMajorInput> | StudentClubsCreateWithoutClubMajorInput[] | StudentClubsUncheckedCreateWithoutClubMajorInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubMajorInput | StudentClubsCreateOrConnectWithoutClubMajorInput[]
    createMany?: StudentClubsCreateManyClubMajorInputEnvelope
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
  }

  export type EnumMajorTypeEnumFieldUpdateOperationsInput = {
    set?: $Enums.MajorTypeEnum
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumSignUpsEnumFieldUpdateOperationsInput = {
    set?: $Enums.SignUpsEnum
  }

  export type DepartmentUpdateOneRequiredWithoutMajorsNestedInput = {
    create?: XOR<DepartmentCreateWithoutMajorsInput, DepartmentUncheckedCreateWithoutMajorsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMajorsInput
    upsert?: DepartmentUpsertWithoutMajorsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutMajorsInput, DepartmentUpdateWithoutMajorsInput>, DepartmentUncheckedUpdateWithoutMajorsInput>
  }

  export type DepartmentUpdateOneRequiredWithoutMajorsOfEducationNestedInput = {
    create?: XOR<DepartmentCreateWithoutMajorsOfEducationInput, DepartmentUncheckedCreateWithoutMajorsOfEducationInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMajorsOfEducationInput
    upsert?: DepartmentUpsertWithoutMajorsOfEducationInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutMajorsOfEducationInput, DepartmentUpdateWithoutMajorsOfEducationInput>, DepartmentUncheckedUpdateWithoutMajorsOfEducationInput>
  }

  export type CoursesUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CoursesCreateWithoutMajorInput, CoursesUncheckedCreateWithoutMajorInput> | CoursesCreateWithoutMajorInput[] | CoursesUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutMajorInput | CoursesCreateOrConnectWithoutMajorInput[]
    upsert?: CoursesUpsertWithWhereUniqueWithoutMajorInput | CoursesUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CoursesCreateManyMajorInputEnvelope
    set?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    disconnect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    delete?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    update?: CoursesUpdateWithWhereUniqueWithoutMajorInput | CoursesUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CoursesUpdateManyWithWhereWithoutMajorInput | CoursesUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutMajorNestedInput = {
    create?: XOR<StudentCreateWithoutMajorInput, StudentUncheckedCreateWithoutMajorInput> | StudentCreateWithoutMajorInput[] | StudentUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutMajorInput | StudentCreateOrConnectWithoutMajorInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutMajorInput | StudentUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: StudentCreateManyMajorInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutMajorInput | StudentUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutMajorInput | StudentUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentClubsUpdateManyWithoutClubMajorNestedInput = {
    create?: XOR<StudentClubsCreateWithoutClubMajorInput, StudentClubsUncheckedCreateWithoutClubMajorInput> | StudentClubsCreateWithoutClubMajorInput[] | StudentClubsUncheckedCreateWithoutClubMajorInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubMajorInput | StudentClubsCreateOrConnectWithoutClubMajorInput[]
    upsert?: StudentClubsUpsertWithWhereUniqueWithoutClubMajorInput | StudentClubsUpsertWithWhereUniqueWithoutClubMajorInput[]
    createMany?: StudentClubsCreateManyClubMajorInputEnvelope
    set?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    disconnect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    delete?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    update?: StudentClubsUpdateWithWhereUniqueWithoutClubMajorInput | StudentClubsUpdateWithWhereUniqueWithoutClubMajorInput[]
    updateMany?: StudentClubsUpdateManyWithWhereWithoutClubMajorInput | StudentClubsUpdateManyWithWhereWithoutClubMajorInput[]
    deleteMany?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
  }

  export type CoursesUncheckedUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CoursesCreateWithoutMajorInput, CoursesUncheckedCreateWithoutMajorInput> | CoursesCreateWithoutMajorInput[] | CoursesUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutMajorInput | CoursesCreateOrConnectWithoutMajorInput[]
    upsert?: CoursesUpsertWithWhereUniqueWithoutMajorInput | CoursesUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CoursesCreateManyMajorInputEnvelope
    set?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    disconnect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    delete?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    update?: CoursesUpdateWithWhereUniqueWithoutMajorInput | CoursesUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CoursesUpdateManyWithWhereWithoutMajorInput | CoursesUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutMajorNestedInput = {
    create?: XOR<StudentCreateWithoutMajorInput, StudentUncheckedCreateWithoutMajorInput> | StudentCreateWithoutMajorInput[] | StudentUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutMajorInput | StudentCreateOrConnectWithoutMajorInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutMajorInput | StudentUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: StudentCreateManyMajorInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutMajorInput | StudentUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutMajorInput | StudentUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentClubsUncheckedUpdateManyWithoutClubMajorNestedInput = {
    create?: XOR<StudentClubsCreateWithoutClubMajorInput, StudentClubsUncheckedCreateWithoutClubMajorInput> | StudentClubsCreateWithoutClubMajorInput[] | StudentClubsUncheckedCreateWithoutClubMajorInput[]
    connectOrCreate?: StudentClubsCreateOrConnectWithoutClubMajorInput | StudentClubsCreateOrConnectWithoutClubMajorInput[]
    upsert?: StudentClubsUpsertWithWhereUniqueWithoutClubMajorInput | StudentClubsUpsertWithWhereUniqueWithoutClubMajorInput[]
    createMany?: StudentClubsCreateManyClubMajorInputEnvelope
    set?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    disconnect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    delete?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    connect?: StudentClubsWhereUniqueInput | StudentClubsWhereUniqueInput[]
    update?: StudentClubsUpdateWithWhereUniqueWithoutClubMajorInput | StudentClubsUpdateWithWhereUniqueWithoutClubMajorInput[]
    updateMany?: StudentClubsUpdateManyWithWhereWithoutClubMajorInput | StudentClubsUpdateManyWithWhereWithoutClubMajorInput[]
    deleteMany?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
  }

  export type ClassroomsCreateNestedManyWithoutDepartmentOfEducationInput = {
    create?: XOR<ClassroomsCreateWithoutDepartmentOfEducationInput, ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput> | ClassroomsCreateWithoutDepartmentOfEducationInput[] | ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput | ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput[]
    createMany?: ClassroomsCreateManyDepartmentOfEducationInputEnvelope
    connect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
  }

  export type TeacherCreateNestedManyWithoutDepartmentsOfEducationInput = {
    create?: XOR<TeacherCreateWithoutDepartmentsOfEducationInput, TeacherUncheckedCreateWithoutDepartmentsOfEducationInput> | TeacherCreateWithoutDepartmentsOfEducationInput[] | TeacherUncheckedCreateWithoutDepartmentsOfEducationInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentsOfEducationInput | TeacherCreateOrConnectWithoutDepartmentsOfEducationInput[]
    createMany?: TeacherCreateManyDepartmentsOfEducationInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type TeachersCoursePlanningCreateNestedManyWithoutDepartmentOfEducationInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput> | TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput[] | TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput | TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput[]
    createMany?: TeachersCoursePlanningCreateManyDepartmentOfEducationInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type TeachersMajorPlanningCreateNestedManyWithoutDepartmentOfEducationInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput> | TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput[] | TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput | TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput[]
    createMany?: TeachersMajorPlanningCreateManyDepartmentOfEducationInputEnvelope
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutDepartmentOfEducationInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentOfEducationInput, DepartmentUncheckedCreateWithoutDepartmentOfEducationInput> | DepartmentCreateWithoutDepartmentOfEducationInput[] | DepartmentUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentOfEducationInput | DepartmentCreateOrConnectWithoutDepartmentOfEducationInput[]
    createMany?: DepartmentCreateManyDepartmentOfEducationInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type ClassroomsUncheckedCreateNestedManyWithoutDepartmentOfEducationInput = {
    create?: XOR<ClassroomsCreateWithoutDepartmentOfEducationInput, ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput> | ClassroomsCreateWithoutDepartmentOfEducationInput[] | ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput | ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput[]
    createMany?: ClassroomsCreateManyDepartmentOfEducationInputEnvelope
    connect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutDepartmentsOfEducationInput = {
    create?: XOR<TeacherCreateWithoutDepartmentsOfEducationInput, TeacherUncheckedCreateWithoutDepartmentsOfEducationInput> | TeacherCreateWithoutDepartmentsOfEducationInput[] | TeacherUncheckedCreateWithoutDepartmentsOfEducationInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentsOfEducationInput | TeacherCreateOrConnectWithoutDepartmentsOfEducationInput[]
    createMany?: TeacherCreateManyDepartmentsOfEducationInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput> | TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput[] | TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput | TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput[]
    createMany?: TeachersCoursePlanningCreateManyDepartmentOfEducationInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput> | TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput[] | TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput | TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput[]
    createMany?: TeachersMajorPlanningCreateManyDepartmentOfEducationInputEnvelope
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutDepartmentOfEducationInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentOfEducationInput, DepartmentUncheckedCreateWithoutDepartmentOfEducationInput> | DepartmentCreateWithoutDepartmentOfEducationInput[] | DepartmentUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentOfEducationInput | DepartmentCreateOrConnectWithoutDepartmentOfEducationInput[]
    createMany?: DepartmentCreateManyDepartmentOfEducationInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type ClassroomsUpdateManyWithoutDepartmentOfEducationNestedInput = {
    create?: XOR<ClassroomsCreateWithoutDepartmentOfEducationInput, ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput> | ClassroomsCreateWithoutDepartmentOfEducationInput[] | ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput | ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput[]
    upsert?: ClassroomsUpsertWithWhereUniqueWithoutDepartmentOfEducationInput | ClassroomsUpsertWithWhereUniqueWithoutDepartmentOfEducationInput[]
    createMany?: ClassroomsCreateManyDepartmentOfEducationInputEnvelope
    set?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    disconnect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    delete?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    connect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    update?: ClassroomsUpdateWithWhereUniqueWithoutDepartmentOfEducationInput | ClassroomsUpdateWithWhereUniqueWithoutDepartmentOfEducationInput[]
    updateMany?: ClassroomsUpdateManyWithWhereWithoutDepartmentOfEducationInput | ClassroomsUpdateManyWithWhereWithoutDepartmentOfEducationInput[]
    deleteMany?: ClassroomsScalarWhereInput | ClassroomsScalarWhereInput[]
  }

  export type TeacherUpdateManyWithoutDepartmentsOfEducationNestedInput = {
    create?: XOR<TeacherCreateWithoutDepartmentsOfEducationInput, TeacherUncheckedCreateWithoutDepartmentsOfEducationInput> | TeacherCreateWithoutDepartmentsOfEducationInput[] | TeacherUncheckedCreateWithoutDepartmentsOfEducationInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentsOfEducationInput | TeacherCreateOrConnectWithoutDepartmentsOfEducationInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutDepartmentsOfEducationInput | TeacherUpsertWithWhereUniqueWithoutDepartmentsOfEducationInput[]
    createMany?: TeacherCreateManyDepartmentsOfEducationInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutDepartmentsOfEducationInput | TeacherUpdateWithWhereUniqueWithoutDepartmentsOfEducationInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutDepartmentsOfEducationInput | TeacherUpdateManyWithWhereWithoutDepartmentsOfEducationInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type TeachersCoursePlanningUpdateManyWithoutDepartmentOfEducationNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput> | TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput[] | TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput | TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput[]
    createMany?: TeachersCoursePlanningCreateManyDepartmentOfEducationInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput | TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type TeachersMajorPlanningUpdateManyWithoutDepartmentOfEducationNestedInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput> | TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput[] | TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput | TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput[]
    upsert?: TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput | TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput[]
    createMany?: TeachersMajorPlanningCreateManyDepartmentOfEducationInputEnvelope
    set?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    disconnect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    delete?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    update?: TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput | TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput[]
    updateMany?: TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput | TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput[]
    deleteMany?: TeachersMajorPlanningScalarWhereInput | TeachersMajorPlanningScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutDepartmentOfEducationNestedInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentOfEducationInput, DepartmentUncheckedCreateWithoutDepartmentOfEducationInput> | DepartmentCreateWithoutDepartmentOfEducationInput[] | DepartmentUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentOfEducationInput | DepartmentCreateOrConnectWithoutDepartmentOfEducationInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutDepartmentOfEducationInput | DepartmentUpsertWithWhereUniqueWithoutDepartmentOfEducationInput[]
    createMany?: DepartmentCreateManyDepartmentOfEducationInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutDepartmentOfEducationInput | DepartmentUpdateWithWhereUniqueWithoutDepartmentOfEducationInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutDepartmentOfEducationInput | DepartmentUpdateManyWithWhereWithoutDepartmentOfEducationInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type ClassroomsUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput = {
    create?: XOR<ClassroomsCreateWithoutDepartmentOfEducationInput, ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput> | ClassroomsCreateWithoutDepartmentOfEducationInput[] | ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput | ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput[]
    upsert?: ClassroomsUpsertWithWhereUniqueWithoutDepartmentOfEducationInput | ClassroomsUpsertWithWhereUniqueWithoutDepartmentOfEducationInput[]
    createMany?: ClassroomsCreateManyDepartmentOfEducationInputEnvelope
    set?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    disconnect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    delete?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    connect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    update?: ClassroomsUpdateWithWhereUniqueWithoutDepartmentOfEducationInput | ClassroomsUpdateWithWhereUniqueWithoutDepartmentOfEducationInput[]
    updateMany?: ClassroomsUpdateManyWithWhereWithoutDepartmentOfEducationInput | ClassroomsUpdateManyWithWhereWithoutDepartmentOfEducationInput[]
    deleteMany?: ClassroomsScalarWhereInput | ClassroomsScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutDepartmentsOfEducationNestedInput = {
    create?: XOR<TeacherCreateWithoutDepartmentsOfEducationInput, TeacherUncheckedCreateWithoutDepartmentsOfEducationInput> | TeacherCreateWithoutDepartmentsOfEducationInput[] | TeacherUncheckedCreateWithoutDepartmentsOfEducationInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentsOfEducationInput | TeacherCreateOrConnectWithoutDepartmentsOfEducationInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutDepartmentsOfEducationInput | TeacherUpsertWithWhereUniqueWithoutDepartmentsOfEducationInput[]
    createMany?: TeacherCreateManyDepartmentsOfEducationInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutDepartmentsOfEducationInput | TeacherUpdateWithWhereUniqueWithoutDepartmentsOfEducationInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutDepartmentsOfEducationInput | TeacherUpdateManyWithWhereWithoutDepartmentsOfEducationInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput> | TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput[] | TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput | TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput[]
    createMany?: TeachersCoursePlanningCreateManyDepartmentOfEducationInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput | TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput> | TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput[] | TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput | TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput[]
    upsert?: TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput | TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput[]
    createMany?: TeachersMajorPlanningCreateManyDepartmentOfEducationInputEnvelope
    set?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    disconnect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    delete?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    update?: TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput | TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput[]
    updateMany?: TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput | TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput[]
    deleteMany?: TeachersMajorPlanningScalarWhereInput | TeachersMajorPlanningScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentOfEducationInput, DepartmentUncheckedCreateWithoutDepartmentOfEducationInput> | DepartmentCreateWithoutDepartmentOfEducationInput[] | DepartmentUncheckedCreateWithoutDepartmentOfEducationInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentOfEducationInput | DepartmentCreateOrConnectWithoutDepartmentOfEducationInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutDepartmentOfEducationInput | DepartmentUpsertWithWhereUniqueWithoutDepartmentOfEducationInput[]
    createMany?: DepartmentCreateManyDepartmentOfEducationInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutDepartmentOfEducationInput | DepartmentUpdateWithWhereUniqueWithoutDepartmentOfEducationInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutDepartmentOfEducationInput | DepartmentUpdateManyWithWhereWithoutDepartmentOfEducationInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutDepartmentInput, DepartmentsOfEducationUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutDepartmentInput
    connect?: DepartmentsOfEducationWhereUniqueInput
  }

  export type ClassroomsCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<ClassroomsCreateWithoutDepartmentInput, ClassroomsUncheckedCreateWithoutDepartmentInput> | ClassroomsCreateWithoutDepartmentInput[] | ClassroomsUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ClassroomsCreateOrConnectWithoutDepartmentInput | ClassroomsCreateOrConnectWithoutDepartmentInput[]
    connect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
  }

  export type CoursesCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CoursesCreateWithoutDepartmentInput, CoursesUncheckedCreateWithoutDepartmentInput> | CoursesCreateWithoutDepartmentInput[] | CoursesUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutDepartmentInput | CoursesCreateOrConnectWithoutDepartmentInput[]
    createMany?: CoursesCreateManyDepartmentInputEnvelope
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
  }

  export type MajorCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<MajorCreateWithoutDepartmentInput, MajorUncheckedCreateWithoutDepartmentInput> | MajorCreateWithoutDepartmentInput[] | MajorUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: MajorCreateOrConnectWithoutDepartmentInput | MajorCreateOrConnectWithoutDepartmentInput[]
    createMany?: MajorCreateManyDepartmentInputEnvelope
    connect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
  }

  export type MajorCreateNestedManyWithoutDepartmentOfEduInput = {
    create?: XOR<MajorCreateWithoutDepartmentOfEduInput, MajorUncheckedCreateWithoutDepartmentOfEduInput> | MajorCreateWithoutDepartmentOfEduInput[] | MajorUncheckedCreateWithoutDepartmentOfEduInput[]
    connectOrCreate?: MajorCreateOrConnectWithoutDepartmentOfEduInput | MajorCreateOrConnectWithoutDepartmentOfEduInput[]
    createMany?: MajorCreateManyDepartmentOfEduInputEnvelope
    connect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type TeacherCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutDepartmentInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput> | TeachersCoursePlanningCreateWithoutDepartmentInput[] | TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput | TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeachersCoursePlanningCreateManyDepartmentInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutDepartmentInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput> | TeachersMajorPlanningCreateWithoutDepartmentInput[] | TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput | TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeachersMajorPlanningCreateManyDepartmentInputEnvelope
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
  }

  export type TeacherScheduleCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeacherScheduleCreateWithoutDepartmentInput, TeacherScheduleUncheckedCreateWithoutDepartmentInput> | TeacherScheduleCreateWithoutDepartmentInput[] | TeacherScheduleUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutDepartmentInput | TeacherScheduleCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeacherScheduleCreateManyDepartmentInputEnvelope
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
  }

  export type ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<ClassroomsCreateWithoutDepartmentInput, ClassroomsUncheckedCreateWithoutDepartmentInput> | ClassroomsCreateWithoutDepartmentInput[] | ClassroomsUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ClassroomsCreateOrConnectWithoutDepartmentInput | ClassroomsCreateOrConnectWithoutDepartmentInput[]
    connect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
  }

  export type CoursesUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CoursesCreateWithoutDepartmentInput, CoursesUncheckedCreateWithoutDepartmentInput> | CoursesCreateWithoutDepartmentInput[] | CoursesUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutDepartmentInput | CoursesCreateOrConnectWithoutDepartmentInput[]
    createMany?: CoursesCreateManyDepartmentInputEnvelope
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
  }

  export type MajorUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<MajorCreateWithoutDepartmentInput, MajorUncheckedCreateWithoutDepartmentInput> | MajorCreateWithoutDepartmentInput[] | MajorUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: MajorCreateOrConnectWithoutDepartmentInput | MajorCreateOrConnectWithoutDepartmentInput[]
    createMany?: MajorCreateManyDepartmentInputEnvelope
    connect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
  }

  export type MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput = {
    create?: XOR<MajorCreateWithoutDepartmentOfEduInput, MajorUncheckedCreateWithoutDepartmentOfEduInput> | MajorCreateWithoutDepartmentOfEduInput[] | MajorUncheckedCreateWithoutDepartmentOfEduInput[]
    connectOrCreate?: MajorCreateOrConnectWithoutDepartmentOfEduInput | MajorCreateOrConnectWithoutDepartmentOfEduInput[]
    createMany?: MajorCreateManyDepartmentOfEduInputEnvelope
    connect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutDepartmentInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput> | TeachersCoursePlanningCreateWithoutDepartmentInput[] | TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput | TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeachersCoursePlanningCreateManyDepartmentInputEnvelope
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
  }

  export type TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutDepartmentInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput> | TeachersMajorPlanningCreateWithoutDepartmentInput[] | TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput | TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeachersMajorPlanningCreateManyDepartmentInputEnvelope
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
  }

  export type TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeacherScheduleCreateWithoutDepartmentInput, TeacherScheduleUncheckedCreateWithoutDepartmentInput> | TeacherScheduleCreateWithoutDepartmentInput[] | TeacherScheduleUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutDepartmentInput | TeacherScheduleCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeacherScheduleCreateManyDepartmentInputEnvelope
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
  }

  export type DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput = {
    create?: XOR<DepartmentsOfEducationCreateWithoutDepartmentInput, DepartmentsOfEducationUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: DepartmentsOfEducationCreateOrConnectWithoutDepartmentInput
    upsert?: DepartmentsOfEducationUpsertWithoutDepartmentInput
    connect?: DepartmentsOfEducationWhereUniqueInput
    update?: XOR<XOR<DepartmentsOfEducationUpdateToOneWithWhereWithoutDepartmentInput, DepartmentsOfEducationUpdateWithoutDepartmentInput>, DepartmentsOfEducationUncheckedUpdateWithoutDepartmentInput>
  }

  export type ClassroomsUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<ClassroomsCreateWithoutDepartmentInput, ClassroomsUncheckedCreateWithoutDepartmentInput> | ClassroomsCreateWithoutDepartmentInput[] | ClassroomsUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ClassroomsCreateOrConnectWithoutDepartmentInput | ClassroomsCreateOrConnectWithoutDepartmentInput[]
    upsert?: ClassroomsUpsertWithWhereUniqueWithoutDepartmentInput | ClassroomsUpsertWithWhereUniqueWithoutDepartmentInput[]
    set?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    disconnect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    delete?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    connect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    update?: ClassroomsUpdateWithWhereUniqueWithoutDepartmentInput | ClassroomsUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: ClassroomsUpdateManyWithWhereWithoutDepartmentInput | ClassroomsUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: ClassroomsScalarWhereInput | ClassroomsScalarWhereInput[]
  }

  export type CoursesUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CoursesCreateWithoutDepartmentInput, CoursesUncheckedCreateWithoutDepartmentInput> | CoursesCreateWithoutDepartmentInput[] | CoursesUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutDepartmentInput | CoursesCreateOrConnectWithoutDepartmentInput[]
    upsert?: CoursesUpsertWithWhereUniqueWithoutDepartmentInput | CoursesUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CoursesCreateManyDepartmentInputEnvelope
    set?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    disconnect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    delete?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    update?: CoursesUpdateWithWhereUniqueWithoutDepartmentInput | CoursesUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CoursesUpdateManyWithWhereWithoutDepartmentInput | CoursesUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
  }

  export type MajorUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<MajorCreateWithoutDepartmentInput, MajorUncheckedCreateWithoutDepartmentInput> | MajorCreateWithoutDepartmentInput[] | MajorUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: MajorCreateOrConnectWithoutDepartmentInput | MajorCreateOrConnectWithoutDepartmentInput[]
    upsert?: MajorUpsertWithWhereUniqueWithoutDepartmentInput | MajorUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: MajorCreateManyDepartmentInputEnvelope
    set?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    disconnect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    delete?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    connect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    update?: MajorUpdateWithWhereUniqueWithoutDepartmentInput | MajorUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: MajorUpdateManyWithWhereWithoutDepartmentInput | MajorUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: MajorScalarWhereInput | MajorScalarWhereInput[]
  }

  export type MajorUpdateManyWithoutDepartmentOfEduNestedInput = {
    create?: XOR<MajorCreateWithoutDepartmentOfEduInput, MajorUncheckedCreateWithoutDepartmentOfEduInput> | MajorCreateWithoutDepartmentOfEduInput[] | MajorUncheckedCreateWithoutDepartmentOfEduInput[]
    connectOrCreate?: MajorCreateOrConnectWithoutDepartmentOfEduInput | MajorCreateOrConnectWithoutDepartmentOfEduInput[]
    upsert?: MajorUpsertWithWhereUniqueWithoutDepartmentOfEduInput | MajorUpsertWithWhereUniqueWithoutDepartmentOfEduInput[]
    createMany?: MajorCreateManyDepartmentOfEduInputEnvelope
    set?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    disconnect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    delete?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    connect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    update?: MajorUpdateWithWhereUniqueWithoutDepartmentOfEduInput | MajorUpdateWithWhereUniqueWithoutDepartmentOfEduInput[]
    updateMany?: MajorUpdateManyWithWhereWithoutDepartmentOfEduInput | MajorUpdateManyWithWhereWithoutDepartmentOfEduInput[]
    deleteMany?: MajorScalarWhereInput | MajorScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutDepartmentInput | StudentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutDepartmentInput | StudentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutDepartmentInput | StudentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TeacherUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutDepartmentInput | TeacherUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutDepartmentInput | TeacherUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutDepartmentInput | TeacherUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutDepartmentInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput> | TeachersCoursePlanningCreateWithoutDepartmentInput[] | TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput | TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeachersCoursePlanningCreateManyDepartmentInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentInput | TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutDepartmentInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput> | TeachersMajorPlanningCreateWithoutDepartmentInput[] | TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput | TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentInput | TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeachersMajorPlanningCreateManyDepartmentInputEnvelope
    set?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    disconnect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    delete?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    update?: TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentInput | TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentInput | TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeachersMajorPlanningScalarWhereInput | TeachersMajorPlanningScalarWhereInput[]
  }

  export type TeacherScheduleUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeacherScheduleCreateWithoutDepartmentInput, TeacherScheduleUncheckedCreateWithoutDepartmentInput> | TeacherScheduleCreateWithoutDepartmentInput[] | TeacherScheduleUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutDepartmentInput | TeacherScheduleCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeacherScheduleUpsertWithWhereUniqueWithoutDepartmentInput | TeacherScheduleUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeacherScheduleCreateManyDepartmentInputEnvelope
    set?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    disconnect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    delete?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    update?: TeacherScheduleUpdateWithWhereUniqueWithoutDepartmentInput | TeacherScheduleUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeacherScheduleUpdateManyWithWhereWithoutDepartmentInput | TeacherScheduleUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
  }

  export type ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<ClassroomsCreateWithoutDepartmentInput, ClassroomsUncheckedCreateWithoutDepartmentInput> | ClassroomsCreateWithoutDepartmentInput[] | ClassroomsUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ClassroomsCreateOrConnectWithoutDepartmentInput | ClassroomsCreateOrConnectWithoutDepartmentInput[]
    upsert?: ClassroomsUpsertWithWhereUniqueWithoutDepartmentInput | ClassroomsUpsertWithWhereUniqueWithoutDepartmentInput[]
    set?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    disconnect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    delete?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    connect?: ClassroomsWhereUniqueInput | ClassroomsWhereUniqueInput[]
    update?: ClassroomsUpdateWithWhereUniqueWithoutDepartmentInput | ClassroomsUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: ClassroomsUpdateManyWithWhereWithoutDepartmentInput | ClassroomsUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: ClassroomsScalarWhereInput | ClassroomsScalarWhereInput[]
  }

  export type CoursesUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CoursesCreateWithoutDepartmentInput, CoursesUncheckedCreateWithoutDepartmentInput> | CoursesCreateWithoutDepartmentInput[] | CoursesUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutDepartmentInput | CoursesCreateOrConnectWithoutDepartmentInput[]
    upsert?: CoursesUpsertWithWhereUniqueWithoutDepartmentInput | CoursesUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CoursesCreateManyDepartmentInputEnvelope
    set?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    disconnect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    delete?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    update?: CoursesUpdateWithWhereUniqueWithoutDepartmentInput | CoursesUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CoursesUpdateManyWithWhereWithoutDepartmentInput | CoursesUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
  }

  export type MajorUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<MajorCreateWithoutDepartmentInput, MajorUncheckedCreateWithoutDepartmentInput> | MajorCreateWithoutDepartmentInput[] | MajorUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: MajorCreateOrConnectWithoutDepartmentInput | MajorCreateOrConnectWithoutDepartmentInput[]
    upsert?: MajorUpsertWithWhereUniqueWithoutDepartmentInput | MajorUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: MajorCreateManyDepartmentInputEnvelope
    set?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    disconnect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    delete?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    connect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    update?: MajorUpdateWithWhereUniqueWithoutDepartmentInput | MajorUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: MajorUpdateManyWithWhereWithoutDepartmentInput | MajorUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: MajorScalarWhereInput | MajorScalarWhereInput[]
  }

  export type MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput = {
    create?: XOR<MajorCreateWithoutDepartmentOfEduInput, MajorUncheckedCreateWithoutDepartmentOfEduInput> | MajorCreateWithoutDepartmentOfEduInput[] | MajorUncheckedCreateWithoutDepartmentOfEduInput[]
    connectOrCreate?: MajorCreateOrConnectWithoutDepartmentOfEduInput | MajorCreateOrConnectWithoutDepartmentOfEduInput[]
    upsert?: MajorUpsertWithWhereUniqueWithoutDepartmentOfEduInput | MajorUpsertWithWhereUniqueWithoutDepartmentOfEduInput[]
    createMany?: MajorCreateManyDepartmentOfEduInputEnvelope
    set?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    disconnect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    delete?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    connect?: MajorWhereUniqueInput | MajorWhereUniqueInput[]
    update?: MajorUpdateWithWhereUniqueWithoutDepartmentOfEduInput | MajorUpdateWithWhereUniqueWithoutDepartmentOfEduInput[]
    updateMany?: MajorUpdateManyWithWhereWithoutDepartmentOfEduInput | MajorUpdateManyWithWhereWithoutDepartmentOfEduInput[]
    deleteMany?: MajorScalarWhereInput | MajorScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutDepartmentInput | StudentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutDepartmentInput | StudentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutDepartmentInput | StudentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutDepartmentInput | TeacherUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutDepartmentInput | TeacherUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutDepartmentInput | TeacherUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeachersCoursePlanningCreateWithoutDepartmentInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput> | TeachersCoursePlanningCreateWithoutDepartmentInput[] | TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput | TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentInput | TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeachersCoursePlanningCreateManyDepartmentInputEnvelope
    set?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    disconnect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    delete?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    connect?: TeachersCoursePlanningWhereUniqueInput | TeachersCoursePlanningWhereUniqueInput[]
    update?: TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentInput | TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentInput | TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
  }

  export type TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeachersMajorPlanningCreateWithoutDepartmentInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput> | TeachersMajorPlanningCreateWithoutDepartmentInput[] | TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput | TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentInput | TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeachersMajorPlanningCreateManyDepartmentInputEnvelope
    set?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    disconnect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    delete?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    connect?: TeachersMajorPlanningWhereUniqueInput | TeachersMajorPlanningWhereUniqueInput[]
    update?: TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentInput | TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentInput | TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeachersMajorPlanningScalarWhereInput | TeachersMajorPlanningScalarWhereInput[]
  }

  export type TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeacherScheduleCreateWithoutDepartmentInput, TeacherScheduleUncheckedCreateWithoutDepartmentInput> | TeacherScheduleCreateWithoutDepartmentInput[] | TeacherScheduleUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherScheduleCreateOrConnectWithoutDepartmentInput | TeacherScheduleCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeacherScheduleUpsertWithWhereUniqueWithoutDepartmentInput | TeacherScheduleUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeacherScheduleCreateManyDepartmentInputEnvelope
    set?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    disconnect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    delete?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    connect?: TeacherScheduleWhereUniqueInput | TeacherScheduleWhereUniqueInput[]
    update?: TeacherScheduleUpdateWithWhereUniqueWithoutDepartmentInput | TeacherScheduleUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeacherScheduleUpdateManyWithWhereWithoutDepartmentInput | TeacherScheduleUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutStudentCurriculumInput = {
    create?: XOR<StudentCreateWithoutStudentCurriculumInput, StudentUncheckedCreateWithoutStudentCurriculumInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentCurriculumInput
    connect?: StudentWhereUniqueInput
  }

  export type CoursesCreateNestedOneWithoutStudentCurriculumInput = {
    create?: XOR<CoursesCreateWithoutStudentCurriculumInput, CoursesUncheckedCreateWithoutStudentCurriculumInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutStudentCurriculumInput
    connect?: CoursesWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutStudentCurriculumNestedInput = {
    create?: XOR<StudentCreateWithoutStudentCurriculumInput, StudentUncheckedCreateWithoutStudentCurriculumInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentCurriculumInput
    upsert?: StudentUpsertWithoutStudentCurriculumInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentCurriculumInput, StudentUpdateWithoutStudentCurriculumInput>, StudentUncheckedUpdateWithoutStudentCurriculumInput>
  }

  export type CoursesUpdateOneRequiredWithoutStudentCurriculumNestedInput = {
    create?: XOR<CoursesCreateWithoutStudentCurriculumInput, CoursesUncheckedCreateWithoutStudentCurriculumInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutStudentCurriculumInput
    upsert?: CoursesUpsertWithoutStudentCurriculumInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutStudentCurriculumInput, CoursesUpdateWithoutStudentCurriculumInput>, CoursesUncheckedUpdateWithoutStudentCurriculumInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumFilter<$PrismaModel> | $Enums.UserRoleEnum
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumGenderEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderEnum | EnumGenderEnumFieldRefInput<$PrismaModel>
    in?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderEnumFilter<$PrismaModel> | $Enums.GenderEnum
  }

  export type NestedEnumMarriedEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.MarriedEnum | EnumMarriedEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MarriedEnum[] | ListEnumMarriedEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MarriedEnum[] | ListEnumMarriedEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMarriedEnumFilter<$PrismaModel> | $Enums.MarriedEnum
  }

  export type NestedEnumMilitaryServiceEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.MilitaryServiceEnum | EnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MilitaryServiceEnum[] | ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MilitaryServiceEnum[] | ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMilitaryServiceEnumFilter<$PrismaModel> | $Enums.MilitaryServiceEnum
  }

  export type NestedEnumDisabledEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.DisabledEnum | EnumDisabledEnumFieldRefInput<$PrismaModel>
    in?: $Enums.DisabledEnum[] | ListEnumDisabledEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.DisabledEnum[] | ListEnumDisabledEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumDisabledEnumFilter<$PrismaModel> | $Enums.DisabledEnum
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel> | $Enums.UserRoleEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleEnumFilter<$PrismaModel>
    _max?: NestedEnumUserRoleEnumFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGenderEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderEnum | EnumGenderEnumFieldRefInput<$PrismaModel>
    in?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderEnumWithAggregatesFilter<$PrismaModel> | $Enums.GenderEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderEnumFilter<$PrismaModel>
    _max?: NestedEnumGenderEnumFilter<$PrismaModel>
  }

  export type NestedEnumMarriedEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MarriedEnum | EnumMarriedEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MarriedEnum[] | ListEnumMarriedEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MarriedEnum[] | ListEnumMarriedEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMarriedEnumWithAggregatesFilter<$PrismaModel> | $Enums.MarriedEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMarriedEnumFilter<$PrismaModel>
    _max?: NestedEnumMarriedEnumFilter<$PrismaModel>
  }

  export type NestedEnumMilitaryServiceEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MilitaryServiceEnum | EnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MilitaryServiceEnum[] | ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MilitaryServiceEnum[] | ListEnumMilitaryServiceEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMilitaryServiceEnumWithAggregatesFilter<$PrismaModel> | $Enums.MilitaryServiceEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMilitaryServiceEnumFilter<$PrismaModel>
    _max?: NestedEnumMilitaryServiceEnumFilter<$PrismaModel>
  }

  export type NestedEnumDisabledEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DisabledEnum | EnumDisabledEnumFieldRefInput<$PrismaModel>
    in?: $Enums.DisabledEnum[] | ListEnumDisabledEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.DisabledEnum[] | ListEnumDisabledEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumDisabledEnumWithAggregatesFilter<$PrismaModel> | $Enums.DisabledEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDisabledEnumFilter<$PrismaModel>
    _max?: NestedEnumDisabledEnumFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumClassroomTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassroomTypeEnum | EnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ClassroomTypeEnum[] | ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassroomTypeEnum[] | ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumClassroomTypeEnumFilter<$PrismaModel> | $Enums.ClassroomTypeEnum
  }

  export type NestedEnumProjectorEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectorEnum | EnumProjectorEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectorEnum[] | ListEnumProjectorEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectorEnum[] | ListEnumProjectorEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectorEnumFilter<$PrismaModel> | $Enums.ProjectorEnum
  }

  export type NestedEnumTvEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.TvEnum | EnumTvEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TvEnum[] | ListEnumTvEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.TvEnum[] | ListEnumTvEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumTvEnumFilter<$PrismaModel> | $Enums.TvEnum
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumClassroomTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassroomTypeEnum | EnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ClassroomTypeEnum[] | ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassroomTypeEnum[] | ListEnumClassroomTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumClassroomTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.ClassroomTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClassroomTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumClassroomTypeEnumFilter<$PrismaModel>
  }

  export type NestedEnumProjectorEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectorEnum | EnumProjectorEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectorEnum[] | ListEnumProjectorEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectorEnum[] | ListEnumProjectorEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectorEnumWithAggregatesFilter<$PrismaModel> | $Enums.ProjectorEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectorEnumFilter<$PrismaModel>
    _max?: NestedEnumProjectorEnumFilter<$PrismaModel>
  }

  export type NestedEnumTvEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TvEnum | EnumTvEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TvEnum[] | ListEnumTvEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.TvEnum[] | ListEnumTvEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumTvEnumWithAggregatesFilter<$PrismaModel> | $Enums.TvEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTvEnumFilter<$PrismaModel>
    _max?: NestedEnumTvEnumFilter<$PrismaModel>
  }

  export type NestedEnumCourseTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseTypeEnum | EnumCourseTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CourseTypeEnum[] | ListEnumCourseTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseTypeEnum[] | ListEnumCourseTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseTypeEnumFilter<$PrismaModel> | $Enums.CourseTypeEnum
  }

  export type NestedEnumCourseSeasonTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseSeasonTypeEnum | EnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CourseSeasonTypeEnum[] | ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseSeasonTypeEnum[] | ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseSeasonTypeEnumFilter<$PrismaModel> | $Enums.CourseSeasonTypeEnum
  }

  export type NestedEnumCourseTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseTypeEnum | EnumCourseTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CourseTypeEnum[] | ListEnumCourseTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseTypeEnum[] | ListEnumCourseTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.CourseTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumCourseTypeEnumFilter<$PrismaModel>
  }

  export type NestedEnumCourseSeasonTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseSeasonTypeEnum | EnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CourseSeasonTypeEnum[] | ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseSeasonTypeEnum[] | ListEnumCourseSeasonTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseSeasonTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.CourseSeasonTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseSeasonTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumCourseSeasonTypeEnumFilter<$PrismaModel>
  }

  export type NestedEnumIsActiveEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.IsActiveEnum | EnumIsActiveEnumFieldRefInput<$PrismaModel>
    in?: $Enums.IsActiveEnum[] | ListEnumIsActiveEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.IsActiveEnum[] | ListEnumIsActiveEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumIsActiveEnumFilter<$PrismaModel> | $Enums.IsActiveEnum
  }

  export type NestedEnumIsActiveEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IsActiveEnum | EnumIsActiveEnumFieldRefInput<$PrismaModel>
    in?: $Enums.IsActiveEnum[] | ListEnumIsActiveEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.IsActiveEnum[] | ListEnumIsActiveEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumIsActiveEnumWithAggregatesFilter<$PrismaModel> | $Enums.IsActiveEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIsActiveEnumFilter<$PrismaModel>
    _max?: NestedEnumIsActiveEnumFilter<$PrismaModel>
  }

  export type NestedEnumClubTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubTypeEnum | EnumClubTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ClubTypeEnum[] | ListEnumClubTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubTypeEnum[] | ListEnumClubTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumClubTypeEnumFilter<$PrismaModel> | $Enums.ClubTypeEnum
  }

  export type NestedEnumClubTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubTypeEnum | EnumClubTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ClubTypeEnum[] | ListEnumClubTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubTypeEnum[] | ListEnumClubTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumClubTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.ClubTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumClubTypeEnumFilter<$PrismaModel>
  }

  export type NestedEnumAdditionalRolesEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.AdditionalRolesEnum | EnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    in?: $Enums.AdditionalRolesEnum[] | ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdditionalRolesEnum[] | ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumAdditionalRolesEnumFilter<$PrismaModel> | $Enums.AdditionalRolesEnum
  }

  export type NestedEnumYearClassificationEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.YearClassificationEnum | EnumYearClassificationEnumFieldRefInput<$PrismaModel>
    in?: $Enums.YearClassificationEnum[] | ListEnumYearClassificationEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.YearClassificationEnum[] | ListEnumYearClassificationEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumYearClassificationEnumFilter<$PrismaModel> | $Enums.YearClassificationEnum
  }

  export type NestedEnumStudentIsActiveEnumNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentIsActiveEnum | EnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    in?: $Enums.StudentIsActiveEnum[] | ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StudentIsActiveEnum[] | ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStudentIsActiveEnumNullableFilter<$PrismaModel> | $Enums.StudentIsActiveEnum | null
  }

  export type NestedEnumAdditionalRolesEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdditionalRolesEnum | EnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    in?: $Enums.AdditionalRolesEnum[] | ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdditionalRolesEnum[] | ListEnumAdditionalRolesEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumAdditionalRolesEnumWithAggregatesFilter<$PrismaModel> | $Enums.AdditionalRolesEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdditionalRolesEnumFilter<$PrismaModel>
    _max?: NestedEnumAdditionalRolesEnumFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumYearClassificationEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YearClassificationEnum | EnumYearClassificationEnumFieldRefInput<$PrismaModel>
    in?: $Enums.YearClassificationEnum[] | ListEnumYearClassificationEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.YearClassificationEnum[] | ListEnumYearClassificationEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumYearClassificationEnumWithAggregatesFilter<$PrismaModel> | $Enums.YearClassificationEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYearClassificationEnumFilter<$PrismaModel>
    _max?: NestedEnumYearClassificationEnumFilter<$PrismaModel>
  }

  export type NestedEnumStudentIsActiveEnumNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentIsActiveEnum | EnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    in?: $Enums.StudentIsActiveEnum[] | ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StudentIsActiveEnum[] | ListEnumStudentIsActiveEnumFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStudentIsActiveEnumNullableWithAggregatesFilter<$PrismaModel> | $Enums.StudentIsActiveEnum | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStudentIsActiveEnumNullableFilter<$PrismaModel>
    _max?: NestedEnumStudentIsActiveEnumNullableFilter<$PrismaModel>
  }

  export type NestedEnumMajorTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.MajorTypeEnum | EnumMajorTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MajorTypeEnum[] | ListEnumMajorTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MajorTypeEnum[] | ListEnumMajorTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMajorTypeEnumFilter<$PrismaModel> | $Enums.MajorTypeEnum
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumSignUpsEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.SignUpsEnum | EnumSignUpsEnumFieldRefInput<$PrismaModel>
    in?: $Enums.SignUpsEnum[] | ListEnumSignUpsEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignUpsEnum[] | ListEnumSignUpsEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumSignUpsEnumFilter<$PrismaModel> | $Enums.SignUpsEnum
  }

  export type NestedEnumMajorTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MajorTypeEnum | EnumMajorTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.MajorTypeEnum[] | ListEnumMajorTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.MajorTypeEnum[] | ListEnumMajorTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumMajorTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.MajorTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMajorTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumMajorTypeEnumFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumSignUpsEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignUpsEnum | EnumSignUpsEnumFieldRefInput<$PrismaModel>
    in?: $Enums.SignUpsEnum[] | ListEnumSignUpsEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignUpsEnum[] | ListEnumSignUpsEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumSignUpsEnumWithAggregatesFilter<$PrismaModel> | $Enums.SignUpsEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignUpsEnumFilter<$PrismaModel>
    _max?: NestedEnumSignUpsEnumFilter<$PrismaModel>
  }

  export type TeacherCreateWithoutAuth_userInput = {
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    department?: DepartmentCreateNestedOneWithoutTeacherInput
    departmentsOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeacherInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherUncheckedCreateWithoutAuth_userInput = {
    teacherId?: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherCreateOrConnectWithoutAuth_userInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutAuth_userInput, TeacherUncheckedCreateWithoutAuth_userInput>
  }

  export type TeacherCreateManyAuth_userInputEnvelope = {
    data: TeacherCreateManyAuth_userInput | TeacherCreateManyAuth_userInput[]
    skipDuplicates?: boolean
  }

  export type StudentClubsCreateWithoutClubAssistantLeaderInput = {
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    club_advisor_teacher: TeacherCreateNestedOneWithoutStudentClubsInput
    clubMajor: MajorCreateNestedOneWithoutStudentClubsInput
    clubPrimaryLeader: auth_userCreateNestedOneWithoutPrimaryLeaderInInput
    Student?: StudentCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    Student?: StudentUncheckedCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsCreateOrConnectWithoutClubAssistantLeaderInput = {
    where: StudentClubsWhereUniqueInput
    create: XOR<StudentClubsCreateWithoutClubAssistantLeaderInput, StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput>
  }

  export type StudentClubsCreateManyClubAssistantLeaderInputEnvelope = {
    data: StudentClubsCreateManyClubAssistantLeaderInput | StudentClubsCreateManyClubAssistantLeaderInput[]
    skipDuplicates?: boolean
  }

  export type StudentClubsCreateWithoutClubPrimaryLeaderInput = {
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    club_advisor_teacher: TeacherCreateNestedOneWithoutStudentClubsInput
    clubAssistantLeader: auth_userCreateNestedOneWithoutAssistantLeaderInInput
    clubMajor: MajorCreateNestedOneWithoutStudentClubsInput
    Student?: StudentCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    Student?: StudentUncheckedCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsCreateOrConnectWithoutClubPrimaryLeaderInput = {
    where: StudentClubsWhereUniqueInput
    create: XOR<StudentClubsCreateWithoutClubPrimaryLeaderInput, StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput>
  }

  export type StudentClubsCreateManyClubPrimaryLeaderInputEnvelope = {
    data: StudentClubsCreateManyClubPrimaryLeaderInput | StudentClubsCreateManyClubPrimaryLeaderInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutAuth_userInput = {
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    major: MajorCreateNestedOneWithoutStudentInput
    student_clubs?: StudentClubsCreateNestedOneWithoutStudentInput
    department?: DepartmentCreateNestedOneWithoutStudentInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAuth_userInput = {
    student_id?: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAuth_userInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAuth_userInput, StudentUncheckedCreateWithoutAuth_userInput>
  }

  export type StudentCreateManyAuth_userInputEnvelope = {
    data: StudentCreateManyAuth_userInput | StudentCreateManyAuth_userInput[]
    skipDuplicates?: boolean
  }

  export type TeacherUpsertWithWhereUniqueWithoutAuth_userInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutAuth_userInput, TeacherUncheckedUpdateWithoutAuth_userInput>
    create: XOR<TeacherCreateWithoutAuth_userInput, TeacherUncheckedCreateWithoutAuth_userInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutAuth_userInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutAuth_userInput, TeacherUncheckedUpdateWithoutAuth_userInput>
  }

  export type TeacherUpdateManyWithWhereWithoutAuth_userInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutAuth_userInput>
  }

  export type TeacherScalarWhereInput = {
    AND?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    OR?: TeacherScalarWhereInput[]
    NOT?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    teacherId?: IntFilter<"Teacher"> | number
    userId?: IntFilter<"Teacher"> | number
    teacherCode?: StringFilter<"Teacher"> | string
    teacherEmail?: StringFilter<"Teacher"> | string
    certificate?: StringNullableFilter<"Teacher"> | string | null
    profession?: StringFilter<"Teacher"> | string
    academicDegree?: StringFilter<"Teacher"> | string
    jobTitle?: StringNullableFilter<"Teacher"> | string | null
    isActive?: EnumIsActiveEnumFilter<"Teacher"> | $Enums.IsActiveEnum
    jobDescription?: StringFilter<"Teacher"> | string
    departmentsOfEducationId?: IntFilter<"Teacher"> | number
    departmentId?: IntNullableFilter<"Teacher"> | number | null
  }

  export type StudentClubsUpsertWithWhereUniqueWithoutClubAssistantLeaderInput = {
    where: StudentClubsWhereUniqueInput
    update: XOR<StudentClubsUpdateWithoutClubAssistantLeaderInput, StudentClubsUncheckedUpdateWithoutClubAssistantLeaderInput>
    create: XOR<StudentClubsCreateWithoutClubAssistantLeaderInput, StudentClubsUncheckedCreateWithoutClubAssistantLeaderInput>
  }

  export type StudentClubsUpdateWithWhereUniqueWithoutClubAssistantLeaderInput = {
    where: StudentClubsWhereUniqueInput
    data: XOR<StudentClubsUpdateWithoutClubAssistantLeaderInput, StudentClubsUncheckedUpdateWithoutClubAssistantLeaderInput>
  }

  export type StudentClubsUpdateManyWithWhereWithoutClubAssistantLeaderInput = {
    where: StudentClubsScalarWhereInput
    data: XOR<StudentClubsUpdateManyMutationInput, StudentClubsUncheckedUpdateManyWithoutClubAssistantLeaderInput>
  }

  export type StudentClubsScalarWhereInput = {
    AND?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
    OR?: StudentClubsScalarWhereInput[]
    NOT?: StudentClubsScalarWhereInput | StudentClubsScalarWhereInput[]
    studentClubId?: IntFilter<"StudentClubs"> | number
    clubCode?: StringFilter<"StudentClubs"> | string
    clubName?: StringFilter<"StudentClubs"> | string
    clubMembers?: IntFilter<"StudentClubs"> | number
    clubType?: EnumClubTypeEnumFilter<"StudentClubs"> | $Enums.ClubTypeEnum
    clubMajorId?: IntFilter<"StudentClubs"> | number
    clubPrimaryLeaderId?: IntFilter<"StudentClubs"> | number
    clubAssistantLeaderId?: IntFilter<"StudentClubs"> | number
    clubAdvisorTeacherId?: IntFilter<"StudentClubs"> | number
    clubLogo?: StringFilter<"StudentClubs"> | string
    clubMoto?: StringFilter<"StudentClubs"> | string
    createdAt?: DateTimeNullableFilter<"StudentClubs"> | Date | string | null
  }

  export type StudentClubsUpsertWithWhereUniqueWithoutClubPrimaryLeaderInput = {
    where: StudentClubsWhereUniqueInput
    update: XOR<StudentClubsUpdateWithoutClubPrimaryLeaderInput, StudentClubsUncheckedUpdateWithoutClubPrimaryLeaderInput>
    create: XOR<StudentClubsCreateWithoutClubPrimaryLeaderInput, StudentClubsUncheckedCreateWithoutClubPrimaryLeaderInput>
  }

  export type StudentClubsUpdateWithWhereUniqueWithoutClubPrimaryLeaderInput = {
    where: StudentClubsWhereUniqueInput
    data: XOR<StudentClubsUpdateWithoutClubPrimaryLeaderInput, StudentClubsUncheckedUpdateWithoutClubPrimaryLeaderInput>
  }

  export type StudentClubsUpdateManyWithWhereWithoutClubPrimaryLeaderInput = {
    where: StudentClubsScalarWhereInput
    data: XOR<StudentClubsUpdateManyMutationInput, StudentClubsUncheckedUpdateManyWithoutClubPrimaryLeaderInput>
  }

  export type StudentUpsertWithWhereUniqueWithoutAuth_userInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutAuth_userInput, StudentUncheckedUpdateWithoutAuth_userInput>
    create: XOR<StudentCreateWithoutAuth_userInput, StudentUncheckedCreateWithoutAuth_userInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutAuth_userInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutAuth_userInput, StudentUncheckedUpdateWithoutAuth_userInput>
  }

  export type StudentUpdateManyWithWhereWithoutAuth_userInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutAuth_userInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    student_id?: IntFilter<"Student"> | number
    user_id?: IntFilter<"Student"> | number
    student_club_id?: IntNullableFilter<"Student"> | number | null
    additional_roles?: EnumAdditionalRolesEnumFilter<"Student"> | $Enums.AdditionalRolesEnum
    student_code?: StringFilter<"Student"> | string
    student_email?: StringFilter<"Student"> | string
    student_file?: JsonNullableFilter<"Student">
    enrollment_number?: IntFilter<"Student"> | number
    enrollment_year?: IntFilter<"Student"> | number
    year_classification?: EnumYearClassificationEnumFilter<"Student"> | $Enums.YearClassificationEnum
    is_active?: EnumStudentIsActiveEnumNullableFilter<"Student"> | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFilter<"Student"> | string
    academic_degree_file?: StringNullableFilter<"Student"> | string | null
    major_id?: IntFilter<"Student"> | number
    created_at?: DateTimeNullableFilter<"Student"> | Date | string | null
    contracts?: JsonNullableFilter<"Student">
    department_id?: IntNullableFilter<"Student"> | number | null
  }

  export type ClassroomsCreateWithoutTeacherScheduleInput = {
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
    departmentOfEducation?: DepartmentsOfEducationCreateNestedOneWithoutClassroomsInput
    Department?: DepartmentCreateNestedManyWithoutClassroomsInput
  }

  export type ClassroomsUncheckedCreateWithoutTeacherScheduleInput = {
    classroom_id?: number
    department_id?: number | null
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
    Department?: DepartmentUncheckedCreateNestedManyWithoutClassroomsInput
  }

  export type ClassroomsCreateOrConnectWithoutTeacherScheduleInput = {
    where: ClassroomsWhereUniqueInput
    create: XOR<ClassroomsCreateWithoutTeacherScheduleInput, ClassroomsUncheckedCreateWithoutTeacherScheduleInput>
  }

  export type CoursesCreateWithoutTeacherScheduleInput = {
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    major: MajorCreateNestedOneWithoutCoursesInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutCourseInput
    department?: DepartmentCreateNestedOneWithoutCoursesInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutTeacherScheduleInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    majorId: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    departmentId?: number | null
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutCourseInput
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutTeacherScheduleInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutTeacherScheduleInput, CoursesUncheckedCreateWithoutTeacherScheduleInput>
  }

  export type DepartmentCreateWithoutTeacherSchedulesInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTeacherSchedulesInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTeacherSchedulesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTeacherSchedulesInput, DepartmentUncheckedCreateWithoutTeacherSchedulesInput>
  }

  export type TeacherCreateWithoutTeacherScheduleInput = {
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    auth_user?: auth_userCreateNestedOneWithoutTeacherInput
    department?: DepartmentCreateNestedOneWithoutTeacherInput
    departmentsOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherUncheckedCreateWithoutTeacherScheduleInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    departmentId?: number | null
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherCreateOrConnectWithoutTeacherScheduleInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutTeacherScheduleInput, TeacherUncheckedCreateWithoutTeacherScheduleInput>
  }

  export type ClassroomsUpsertWithoutTeacherScheduleInput = {
    update: XOR<ClassroomsUpdateWithoutTeacherScheduleInput, ClassroomsUncheckedUpdateWithoutTeacherScheduleInput>
    create: XOR<ClassroomsCreateWithoutTeacherScheduleInput, ClassroomsUncheckedCreateWithoutTeacherScheduleInput>
    where?: ClassroomsWhereInput
  }

  export type ClassroomsUpdateToOneWithWhereWithoutTeacherScheduleInput = {
    where?: ClassroomsWhereInput
    data: XOR<ClassroomsUpdateWithoutTeacherScheduleInput, ClassroomsUncheckedUpdateWithoutTeacherScheduleInput>
  }

  export type ClassroomsUpdateWithoutTeacherScheduleInput = {
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    departmentOfEducation?: DepartmentsOfEducationUpdateOneWithoutClassroomsNestedInput
    Department?: DepartmentUpdateManyWithoutClassroomsNestedInput
  }

  export type ClassroomsUncheckedUpdateWithoutTeacherScheduleInput = {
    classroom_id?: IntFieldUpdateOperationsInput | number
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    Department?: DepartmentUncheckedUpdateManyWithoutClassroomsNestedInput
  }

  export type CoursesUpsertWithoutTeacherScheduleInput = {
    update: XOR<CoursesUpdateWithoutTeacherScheduleInput, CoursesUncheckedUpdateWithoutTeacherScheduleInput>
    create: XOR<CoursesCreateWithoutTeacherScheduleInput, CoursesUncheckedCreateWithoutTeacherScheduleInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutTeacherScheduleInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutTeacherScheduleInput, CoursesUncheckedUpdateWithoutTeacherScheduleInput>
  }

  export type CoursesUpdateWithoutTeacherScheduleInput = {
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    major?: MajorUpdateOneRequiredWithoutCoursesNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutCourseNestedInput
    department?: DepartmentUpdateOneWithoutCoursesNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutTeacherScheduleInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutCourseNestedInput
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type DepartmentUpsertWithoutTeacherSchedulesInput = {
    update: XOR<DepartmentUpdateWithoutTeacherSchedulesInput, DepartmentUncheckedUpdateWithoutTeacherSchedulesInput>
    create: XOR<DepartmentCreateWithoutTeacherSchedulesInput, DepartmentUncheckedCreateWithoutTeacherSchedulesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutTeacherSchedulesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutTeacherSchedulesInput, DepartmentUncheckedUpdateWithoutTeacherSchedulesInput>
  }

  export type DepartmentUpdateWithoutTeacherSchedulesInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTeacherSchedulesInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type TeacherUpsertWithoutTeacherScheduleInput = {
    update: XOR<TeacherUpdateWithoutTeacherScheduleInput, TeacherUncheckedUpdateWithoutTeacherScheduleInput>
    create: XOR<TeacherCreateWithoutTeacherScheduleInput, TeacherUncheckedCreateWithoutTeacherScheduleInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutTeacherScheduleInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutTeacherScheduleInput, TeacherUncheckedUpdateWithoutTeacherScheduleInput>
  }

  export type TeacherUpdateWithoutTeacherScheduleInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    auth_user?: auth_userUpdateOneWithoutTeacherNestedInput
    department?: DepartmentUpdateOneWithoutTeacherNestedInput
    departmentsOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutTeacherScheduleInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type CoursesCreateWithoutTeachersCoursePlanningInput = {
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    major: MajorCreateNestedOneWithoutCoursesInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutCourseInput
    department?: DepartmentCreateNestedOneWithoutCoursesInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutTeachersCoursePlanningInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    majorId: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutCourseInput
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutTeachersCoursePlanningInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutTeachersCoursePlanningInput, CoursesUncheckedCreateWithoutTeachersCoursePlanningInput>
  }

  export type DepartmentCreateWithoutTeachersCoursePlanningInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTeachersCoursePlanningInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTeachersCoursePlanningInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTeachersCoursePlanningInput, DepartmentUncheckedCreateWithoutTeachersCoursePlanningInput>
  }

  export type DepartmentsOfEducationCreateWithoutTeachersCoursePlanningInput = {
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentOfEducationInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationUncheckedCreateWithoutTeachersCoursePlanningInput = {
    departmentsOfEducationId?: number
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationCreateOrConnectWithoutTeachersCoursePlanningInput = {
    where: DepartmentsOfEducationWhereUniqueInput
    create: XOR<DepartmentsOfEducationCreateWithoutTeachersCoursePlanningInput, DepartmentsOfEducationUncheckedCreateWithoutTeachersCoursePlanningInput>
  }

  export type TeacherCreateWithoutTeachersCoursePlanningInput = {
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    auth_user?: auth_userCreateNestedOneWithoutTeacherInput
    department?: DepartmentCreateNestedOneWithoutTeacherInput
    departmentsOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeacherInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherUncheckedCreateWithoutTeachersCoursePlanningInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherCreateOrConnectWithoutTeachersCoursePlanningInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutTeachersCoursePlanningInput, TeacherUncheckedCreateWithoutTeachersCoursePlanningInput>
  }

  export type TeachersMajorPlanningCreateWithoutTeachersCoursePlanningInput = {
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    createdAt?: Date | string | null
    department: DepartmentCreateNestedOneWithoutTeachersMajorPlanningInput
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersMajorPlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningUncheckedCreateWithoutTeachersCoursePlanningInput = {
    teacherMajorId?: number
    teacherId: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEducationsId: number
  }

  export type TeachersMajorPlanningCreateOrConnectWithoutTeachersCoursePlanningInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    create: XOR<TeachersMajorPlanningCreateWithoutTeachersCoursePlanningInput, TeachersMajorPlanningUncheckedCreateWithoutTeachersCoursePlanningInput>
  }

  export type CoursesUpsertWithoutTeachersCoursePlanningInput = {
    update: XOR<CoursesUpdateWithoutTeachersCoursePlanningInput, CoursesUncheckedUpdateWithoutTeachersCoursePlanningInput>
    create: XOR<CoursesCreateWithoutTeachersCoursePlanningInput, CoursesUncheckedCreateWithoutTeachersCoursePlanningInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutTeachersCoursePlanningInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutTeachersCoursePlanningInput, CoursesUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type CoursesUpdateWithoutTeachersCoursePlanningInput = {
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    major?: MajorUpdateOneRequiredWithoutCoursesNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutCourseNestedInput
    department?: DepartmentUpdateOneWithoutCoursesNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutTeachersCoursePlanningInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutCourseNestedInput
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type DepartmentUpsertWithoutTeachersCoursePlanningInput = {
    update: XOR<DepartmentUpdateWithoutTeachersCoursePlanningInput, DepartmentUncheckedUpdateWithoutTeachersCoursePlanningInput>
    create: XOR<DepartmentCreateWithoutTeachersCoursePlanningInput, DepartmentUncheckedCreateWithoutTeachersCoursePlanningInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutTeachersCoursePlanningInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutTeachersCoursePlanningInput, DepartmentUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type DepartmentUpdateWithoutTeachersCoursePlanningInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTeachersCoursePlanningInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentsOfEducationUpsertWithoutTeachersCoursePlanningInput = {
    update: XOR<DepartmentsOfEducationUpdateWithoutTeachersCoursePlanningInput, DepartmentsOfEducationUncheckedUpdateWithoutTeachersCoursePlanningInput>
    create: XOR<DepartmentsOfEducationCreateWithoutTeachersCoursePlanningInput, DepartmentsOfEducationUncheckedCreateWithoutTeachersCoursePlanningInput>
    where?: DepartmentsOfEducationWhereInput
  }

  export type DepartmentsOfEducationUpdateToOneWithWhereWithoutTeachersCoursePlanningInput = {
    where?: DepartmentsOfEducationWhereInput
    data: XOR<DepartmentsOfEducationUpdateWithoutTeachersCoursePlanningInput, DepartmentsOfEducationUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type DepartmentsOfEducationUpdateWithoutTeachersCoursePlanningInput = {
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentOfEducationNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type DepartmentsOfEducationUncheckedUpdateWithoutTeachersCoursePlanningInput = {
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type TeacherUpsertWithoutTeachersCoursePlanningInput = {
    update: XOR<TeacherUpdateWithoutTeachersCoursePlanningInput, TeacherUncheckedUpdateWithoutTeachersCoursePlanningInput>
    create: XOR<TeacherCreateWithoutTeachersCoursePlanningInput, TeacherUncheckedCreateWithoutTeachersCoursePlanningInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutTeachersCoursePlanningInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutTeachersCoursePlanningInput, TeacherUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type TeacherUpdateWithoutTeachersCoursePlanningInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    auth_user?: auth_userUpdateOneWithoutTeacherNestedInput
    department?: DepartmentUpdateOneWithoutTeacherNestedInput
    departmentsOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeacherNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutTeachersCoursePlanningInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeachersMajorPlanningUpsertWithoutTeachersCoursePlanningInput = {
    update: XOR<TeachersMajorPlanningUpdateWithoutTeachersCoursePlanningInput, TeachersMajorPlanningUncheckedUpdateWithoutTeachersCoursePlanningInput>
    create: XOR<TeachersMajorPlanningCreateWithoutTeachersCoursePlanningInput, TeachersMajorPlanningUncheckedCreateWithoutTeachersCoursePlanningInput>
    where?: TeachersMajorPlanningWhereInput
  }

  export type TeachersMajorPlanningUpdateToOneWithWhereWithoutTeachersCoursePlanningInput = {
    where?: TeachersMajorPlanningWhereInput
    data: XOR<TeachersMajorPlanningUpdateWithoutTeachersCoursePlanningInput, TeachersMajorPlanningUncheckedUpdateWithoutTeachersCoursePlanningInput>
  }

  export type TeachersMajorPlanningUpdateWithoutTeachersCoursePlanningInput = {
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningUncheckedUpdateWithoutTeachersCoursePlanningInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducationsId?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentsOfEducationCreateWithoutClassroomsInput = {
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Teacher?: TeacherCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationUncheckedCreateWithoutClassroomsInput = {
    departmentsOfEducationId?: number
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationCreateOrConnectWithoutClassroomsInput = {
    where: DepartmentsOfEducationWhereUniqueInput
    create: XOR<DepartmentsOfEducationCreateWithoutClassroomsInput, DepartmentsOfEducationUncheckedCreateWithoutClassroomsInput>
  }

  export type TeacherScheduleCreateWithoutClassroomInput = {
    weekDay: string
    periodOfClass: string
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    createdAt?: Date | string | null
    course: CoursesCreateNestedOneWithoutTeacherScheduleInput
    department: DepartmentCreateNestedOneWithoutTeacherSchedulesInput
    teacher: TeacherCreateNestedOneWithoutTeacherScheduleInput
  }

  export type TeacherScheduleUncheckedCreateWithoutClassroomInput = {
    teacherScheduleId?: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type TeacherScheduleCreateOrConnectWithoutClassroomInput = {
    where: TeacherScheduleWhereUniqueInput
    create: XOR<TeacherScheduleCreateWithoutClassroomInput, TeacherScheduleUncheckedCreateWithoutClassroomInput>
  }

  export type TeacherScheduleCreateManyClassroomInputEnvelope = {
    data: TeacherScheduleCreateManyClassroomInput | TeacherScheduleCreateManyClassroomInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutClassroomsInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutClassroomsInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutClassroomsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutClassroomsInput, DepartmentUncheckedCreateWithoutClassroomsInput>
  }

  export type DepartmentsOfEducationUpsertWithoutClassroomsInput = {
    update: XOR<DepartmentsOfEducationUpdateWithoutClassroomsInput, DepartmentsOfEducationUncheckedUpdateWithoutClassroomsInput>
    create: XOR<DepartmentsOfEducationCreateWithoutClassroomsInput, DepartmentsOfEducationUncheckedCreateWithoutClassroomsInput>
    where?: DepartmentsOfEducationWhereInput
  }

  export type DepartmentsOfEducationUpdateToOneWithWhereWithoutClassroomsInput = {
    where?: DepartmentsOfEducationWhereInput
    data: XOR<DepartmentsOfEducationUpdateWithoutClassroomsInput, DepartmentsOfEducationUncheckedUpdateWithoutClassroomsInput>
  }

  export type DepartmentsOfEducationUpdateWithoutClassroomsInput = {
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Teacher?: TeacherUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type DepartmentsOfEducationUncheckedUpdateWithoutClassroomsInput = {
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type TeacherScheduleUpsertWithWhereUniqueWithoutClassroomInput = {
    where: TeacherScheduleWhereUniqueInput
    update: XOR<TeacherScheduleUpdateWithoutClassroomInput, TeacherScheduleUncheckedUpdateWithoutClassroomInput>
    create: XOR<TeacherScheduleCreateWithoutClassroomInput, TeacherScheduleUncheckedCreateWithoutClassroomInput>
  }

  export type TeacherScheduleUpdateWithWhereUniqueWithoutClassroomInput = {
    where: TeacherScheduleWhereUniqueInput
    data: XOR<TeacherScheduleUpdateWithoutClassroomInput, TeacherScheduleUncheckedUpdateWithoutClassroomInput>
  }

  export type TeacherScheduleUpdateManyWithWhereWithoutClassroomInput = {
    where: TeacherScheduleScalarWhereInput
    data: XOR<TeacherScheduleUpdateManyMutationInput, TeacherScheduleUncheckedUpdateManyWithoutClassroomInput>
  }

  export type TeacherScheduleScalarWhereInput = {
    AND?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
    OR?: TeacherScheduleScalarWhereInput[]
    NOT?: TeacherScheduleScalarWhereInput | TeacherScheduleScalarWhereInput[]
    teacherScheduleId?: IntFilter<"TeacherSchedule"> | number
    teacherId?: IntFilter<"TeacherSchedule"> | number
    weekDay?: StringFilter<"TeacherSchedule"> | string
    periodOfClass?: StringFilter<"TeacherSchedule"> | string
    classroomId?: IntFilter<"TeacherSchedule"> | number
    classGroup?: StringFilter<"TeacherSchedule"> | string
    courseName?: StringFilter<"TeacherSchedule"> | string
    credit?: IntFilter<"TeacherSchedule"> | number
    numberOfStudents?: IntFilter<"TeacherSchedule"> | number
    courseId?: IntFilter<"TeacherSchedule"> | number
    departmentId?: IntFilter<"TeacherSchedule"> | number
    createdAt?: DateTimeNullableFilter<"TeacherSchedule"> | Date | string | null
  }

  export type DepartmentUpsertWithWhereUniqueWithoutClassroomsInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutClassroomsInput, DepartmentUncheckedUpdateWithoutClassroomsInput>
    create: XOR<DepartmentCreateWithoutClassroomsInput, DepartmentUncheckedCreateWithoutClassroomsInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutClassroomsInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutClassroomsInput, DepartmentUncheckedUpdateWithoutClassroomsInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutClassroomsInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutClassroomsInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    department_id?: IntFilter<"Department"> | number
    department_name?: StringFilter<"Department"> | string
    department_code?: StringFilter<"Department"> | string
    department_email?: StringFilter<"Department"> | string
    number_of_staff?: IntNullableFilter<"Department"> | number | null
    logo?: StringFilter<"Department"> | string
    created_at?: DateTimeNullableFilter<"Department"> | Date | string | null
    department_of_edu_id?: IntFilter<"Department"> | number
  }

  export type MajorCreateWithoutCoursesInput = {
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department?: DepartmentCreateNestedOneWithoutMajorsInput
    departmentOfEdu: DepartmentCreateNestedOneWithoutMajorsOfEducationInput
    Student?: StudentCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClubMajorInput
  }

  export type MajorUncheckedCreateWithoutCoursesInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department_id?: number
    Student?: StudentUncheckedCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClubMajorInput
  }

  export type MajorCreateOrConnectWithoutCoursesInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutCoursesInput, MajorUncheckedCreateWithoutCoursesInput>
  }

  export type TeacherScheduleCreateWithoutCourseInput = {
    weekDay: string
    periodOfClass: string
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    createdAt?: Date | string | null
    classroom: ClassroomsCreateNestedOneWithoutTeacherScheduleInput
    department: DepartmentCreateNestedOneWithoutTeacherSchedulesInput
    teacher: TeacherCreateNestedOneWithoutTeacherScheduleInput
  }

  export type TeacherScheduleUncheckedCreateWithoutCourseInput = {
    teacherScheduleId?: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type TeacherScheduleCreateOrConnectWithoutCourseInput = {
    where: TeacherScheduleWhereUniqueInput
    create: XOR<TeacherScheduleCreateWithoutCourseInput, TeacherScheduleUncheckedCreateWithoutCourseInput>
  }

  export type TeacherScheduleCreateManyCourseInputEnvelope = {
    data: TeacherScheduleCreateManyCourseInput | TeacherScheduleCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type TeachersCoursePlanningCreateWithoutCourseInput = {
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    createdAt?: Date | string | null
    courseCode: string
    department: DepartmentCreateNestedOneWithoutTeachersCoursePlanningInput
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersCoursePlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersCoursePlanningInput
    teachersMajorPlanning: TeachersMajorPlanningCreateNestedOneWithoutTeachersCoursePlanningInput
  }

  export type TeachersCoursePlanningUncheckedCreateWithoutCourseInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersCoursePlanningCreateOrConnectWithoutCourseInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    create: XOR<TeachersCoursePlanningCreateWithoutCourseInput, TeachersCoursePlanningUncheckedCreateWithoutCourseInput>
  }

  export type TeachersCoursePlanningCreateManyCourseInputEnvelope = {
    data: TeachersCoursePlanningCreateManyCourseInput | TeachersCoursePlanningCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutCoursesInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCoursesInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCoursesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
  }

  export type StudentCurriculumCreateWithoutCourseInput = {
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
    student: StudentCreateNestedOneWithoutStudentCurriculumInput
  }

  export type StudentCurriculumUncheckedCreateWithoutCourseInput = {
    studentCurriculumId?: number
    studentId: number
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
  }

  export type StudentCurriculumCreateOrConnectWithoutCourseInput = {
    where: StudentCurriculumWhereUniqueInput
    create: XOR<StudentCurriculumCreateWithoutCourseInput, StudentCurriculumUncheckedCreateWithoutCourseInput>
  }

  export type StudentCurriculumCreateManyCourseInputEnvelope = {
    data: StudentCurriculumCreateManyCourseInput | StudentCurriculumCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type MajorUpsertWithoutCoursesInput = {
    update: XOR<MajorUpdateWithoutCoursesInput, MajorUncheckedUpdateWithoutCoursesInput>
    create: XOR<MajorCreateWithoutCoursesInput, MajorUncheckedCreateWithoutCoursesInput>
    where?: MajorWhereInput
  }

  export type MajorUpdateToOneWithWhereWithoutCoursesInput = {
    where?: MajorWhereInput
    data: XOR<MajorUpdateWithoutCoursesInput, MajorUncheckedUpdateWithoutCoursesInput>
  }

  export type MajorUpdateWithoutCoursesInput = {
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department?: DepartmentUpdateOneRequiredWithoutMajorsNestedInput
    departmentOfEdu?: DepartmentUpdateOneRequiredWithoutMajorsOfEducationNestedInput
    Student?: StudentUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClubMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutCoursesInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department_id?: IntFieldUpdateOperationsInput | number
    Student?: StudentUncheckedUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClubMajorNestedInput
  }

  export type TeacherScheduleUpsertWithWhereUniqueWithoutCourseInput = {
    where: TeacherScheduleWhereUniqueInput
    update: XOR<TeacherScheduleUpdateWithoutCourseInput, TeacherScheduleUncheckedUpdateWithoutCourseInput>
    create: XOR<TeacherScheduleCreateWithoutCourseInput, TeacherScheduleUncheckedCreateWithoutCourseInput>
  }

  export type TeacherScheduleUpdateWithWhereUniqueWithoutCourseInput = {
    where: TeacherScheduleWhereUniqueInput
    data: XOR<TeacherScheduleUpdateWithoutCourseInput, TeacherScheduleUncheckedUpdateWithoutCourseInput>
  }

  export type TeacherScheduleUpdateManyWithWhereWithoutCourseInput = {
    where: TeacherScheduleScalarWhereInput
    data: XOR<TeacherScheduleUpdateManyMutationInput, TeacherScheduleUncheckedUpdateManyWithoutCourseInput>
  }

  export type TeachersCoursePlanningUpsertWithWhereUniqueWithoutCourseInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    update: XOR<TeachersCoursePlanningUpdateWithoutCourseInput, TeachersCoursePlanningUncheckedUpdateWithoutCourseInput>
    create: XOR<TeachersCoursePlanningCreateWithoutCourseInput, TeachersCoursePlanningUncheckedCreateWithoutCourseInput>
  }

  export type TeachersCoursePlanningUpdateWithWhereUniqueWithoutCourseInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    data: XOR<TeachersCoursePlanningUpdateWithoutCourseInput, TeachersCoursePlanningUncheckedUpdateWithoutCourseInput>
  }

  export type TeachersCoursePlanningUpdateManyWithWhereWithoutCourseInput = {
    where: TeachersCoursePlanningScalarWhereInput
    data: XOR<TeachersCoursePlanningUpdateManyMutationInput, TeachersCoursePlanningUncheckedUpdateManyWithoutCourseInput>
  }

  export type TeachersCoursePlanningScalarWhereInput = {
    AND?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
    OR?: TeachersCoursePlanningScalarWhereInput[]
    NOT?: TeachersCoursePlanningScalarWhereInput | TeachersCoursePlanningScalarWhereInput[]
    teacherCoursePlanningId?: IntFilter<"TeachersCoursePlanning"> | number
    teacherId?: IntFilter<"TeachersCoursePlanning"> | number
    majorName?: StringFilter<"TeachersCoursePlanning"> | string
    majorId?: DecimalNullableFilter<"TeachersCoursePlanning"> | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFilter<"TeachersCoursePlanning"> | string
    credit?: IntFilter<"TeachersCoursePlanning"> | number
    courseId?: IntFilter<"TeachersCoursePlanning"> | number
    departmentId?: IntFilter<"TeachersCoursePlanning"> | number
    createdAt?: DateTimeNullableFilter<"TeachersCoursePlanning"> | Date | string | null
    departmentOfEduId?: IntFilter<"TeachersCoursePlanning"> | number
    courseCode?: StringFilter<"TeachersCoursePlanning"> | string
    teacherMajorId?: IntFilter<"TeachersCoursePlanning"> | number
  }

  export type DepartmentUpsertWithoutCoursesInput = {
    update: XOR<DepartmentUpdateWithoutCoursesInput, DepartmentUncheckedUpdateWithoutCoursesInput>
    create: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutCoursesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutCoursesInput, DepartmentUncheckedUpdateWithoutCoursesInput>
  }

  export type DepartmentUpdateWithoutCoursesInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCoursesInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type StudentCurriculumUpsertWithWhereUniqueWithoutCourseInput = {
    where: StudentCurriculumWhereUniqueInput
    update: XOR<StudentCurriculumUpdateWithoutCourseInput, StudentCurriculumUncheckedUpdateWithoutCourseInput>
    create: XOR<StudentCurriculumCreateWithoutCourseInput, StudentCurriculumUncheckedCreateWithoutCourseInput>
  }

  export type StudentCurriculumUpdateWithWhereUniqueWithoutCourseInput = {
    where: StudentCurriculumWhereUniqueInput
    data: XOR<StudentCurriculumUpdateWithoutCourseInput, StudentCurriculumUncheckedUpdateWithoutCourseInput>
  }

  export type StudentCurriculumUpdateManyWithWhereWithoutCourseInput = {
    where: StudentCurriculumScalarWhereInput
    data: XOR<StudentCurriculumUpdateManyMutationInput, StudentCurriculumUncheckedUpdateManyWithoutCourseInput>
  }

  export type StudentCurriculumScalarWhereInput = {
    AND?: StudentCurriculumScalarWhereInput | StudentCurriculumScalarWhereInput[]
    OR?: StudentCurriculumScalarWhereInput[]
    NOT?: StudentCurriculumScalarWhereInput | StudentCurriculumScalarWhereInput[]
    studentCurriculumId?: IntFilter<"StudentCurriculum"> | number
    studentId?: IntFilter<"StudentCurriculum"> | number
    courseId?: IntFilter<"StudentCurriculum"> | number
    credit?: IntFilter<"StudentCurriculum"> | number
    studentYear?: DateTimeFilter<"StudentCurriculum"> | Date | string
    semesterYear?: StringFilter<"StudentCurriculum"> | string
    modifiedAt?: DateTimeNullableFilter<"StudentCurriculum"> | Date | string | null
    courseCode?: StringFilter<"StudentCurriculum"> | string
  }

  export type DepartmentCreateWithoutTeachersMajorPlanningInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTeachersMajorPlanningInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTeachersMajorPlanningInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTeachersMajorPlanningInput, DepartmentUncheckedCreateWithoutTeachersMajorPlanningInput>
  }

  export type DepartmentsOfEducationCreateWithoutTeachersMajorPlanningInput = {
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentOfEducationInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationUncheckedCreateWithoutTeachersMajorPlanningInput = {
    departmentsOfEducationId?: number
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationCreateOrConnectWithoutTeachersMajorPlanningInput = {
    where: DepartmentsOfEducationWhereUniqueInput
    create: XOR<DepartmentsOfEducationCreateWithoutTeachersMajorPlanningInput, DepartmentsOfEducationUncheckedCreateWithoutTeachersMajorPlanningInput>
  }

  export type TeacherCreateWithoutTeachersMajorPlanningInput = {
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    auth_user?: auth_userCreateNestedOneWithoutTeacherInput
    department?: DepartmentCreateNestedOneWithoutTeacherInput
    departmentsOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeacherInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherUncheckedCreateWithoutTeachersMajorPlanningInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherCreateOrConnectWithoutTeachersMajorPlanningInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutTeachersMajorPlanningInput, TeacherUncheckedCreateWithoutTeachersMajorPlanningInput>
  }

  export type TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput = {
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    createdAt?: Date | string | null
    courseCode: string
    course: CoursesCreateNestedOneWithoutTeachersCoursePlanningInput
    department: DepartmentCreateNestedOneWithoutTeachersCoursePlanningInput
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersCoursePlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersCoursePlanningInput
  }

  export type TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
  }

  export type TeachersCoursePlanningCreateOrConnectWithoutTeachersMajorPlanningInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    create: XOR<TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput, TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput>
  }

  export type TeachersCoursePlanningCreateManyTeachersMajorPlanningInputEnvelope = {
    data: TeachersCoursePlanningCreateManyTeachersMajorPlanningInput | TeachersCoursePlanningCreateManyTeachersMajorPlanningInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutTeachersMajorPlanningInput = {
    update: XOR<DepartmentUpdateWithoutTeachersMajorPlanningInput, DepartmentUncheckedUpdateWithoutTeachersMajorPlanningInput>
    create: XOR<DepartmentCreateWithoutTeachersMajorPlanningInput, DepartmentUncheckedCreateWithoutTeachersMajorPlanningInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutTeachersMajorPlanningInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutTeachersMajorPlanningInput, DepartmentUncheckedUpdateWithoutTeachersMajorPlanningInput>
  }

  export type DepartmentUpdateWithoutTeachersMajorPlanningInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTeachersMajorPlanningInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentsOfEducationUpsertWithoutTeachersMajorPlanningInput = {
    update: XOR<DepartmentsOfEducationUpdateWithoutTeachersMajorPlanningInput, DepartmentsOfEducationUncheckedUpdateWithoutTeachersMajorPlanningInput>
    create: XOR<DepartmentsOfEducationCreateWithoutTeachersMajorPlanningInput, DepartmentsOfEducationUncheckedCreateWithoutTeachersMajorPlanningInput>
    where?: DepartmentsOfEducationWhereInput
  }

  export type DepartmentsOfEducationUpdateToOneWithWhereWithoutTeachersMajorPlanningInput = {
    where?: DepartmentsOfEducationWhereInput
    data: XOR<DepartmentsOfEducationUpdateWithoutTeachersMajorPlanningInput, DepartmentsOfEducationUncheckedUpdateWithoutTeachersMajorPlanningInput>
  }

  export type DepartmentsOfEducationUpdateWithoutTeachersMajorPlanningInput = {
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentOfEducationNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type DepartmentsOfEducationUncheckedUpdateWithoutTeachersMajorPlanningInput = {
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type TeacherUpsertWithoutTeachersMajorPlanningInput = {
    update: XOR<TeacherUpdateWithoutTeachersMajorPlanningInput, TeacherUncheckedUpdateWithoutTeachersMajorPlanningInput>
    create: XOR<TeacherCreateWithoutTeachersMajorPlanningInput, TeacherUncheckedCreateWithoutTeachersMajorPlanningInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutTeachersMajorPlanningInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutTeachersMajorPlanningInput, TeacherUncheckedUpdateWithoutTeachersMajorPlanningInput>
  }

  export type TeacherUpdateWithoutTeachersMajorPlanningInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    auth_user?: auth_userUpdateOneWithoutTeacherNestedInput
    department?: DepartmentUpdateOneWithoutTeacherNestedInput
    departmentsOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeacherNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutTeachersMajorPlanningInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeachersMajorPlanningInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    update: XOR<TeachersCoursePlanningUpdateWithoutTeachersMajorPlanningInput, TeachersCoursePlanningUncheckedUpdateWithoutTeachersMajorPlanningInput>
    create: XOR<TeachersCoursePlanningCreateWithoutTeachersMajorPlanningInput, TeachersCoursePlanningUncheckedCreateWithoutTeachersMajorPlanningInput>
  }

  export type TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeachersMajorPlanningInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    data: XOR<TeachersCoursePlanningUpdateWithoutTeachersMajorPlanningInput, TeachersCoursePlanningUncheckedUpdateWithoutTeachersMajorPlanningInput>
  }

  export type TeachersCoursePlanningUpdateManyWithWhereWithoutTeachersMajorPlanningInput = {
    where: TeachersCoursePlanningScalarWhereInput
    data: XOR<TeachersCoursePlanningUpdateManyMutationInput, TeachersCoursePlanningUncheckedUpdateManyWithoutTeachersMajorPlanningInput>
  }

  export type auth_userCreateWithoutTeacherInput = {
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    assistantLeaderIn?: StudentClubsCreateNestedManyWithoutClubAssistantLeaderInput
    primaryLeaderIn?: StudentClubsCreateNestedManyWithoutClubPrimaryLeaderInput
    Student?: StudentCreateNestedManyWithoutAuth_userInput
  }

  export type auth_userUncheckedCreateWithoutTeacherInput = {
    user_id?: number
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    assistantLeaderIn?: StudentClubsUncheckedCreateNestedManyWithoutClubAssistantLeaderInput
    primaryLeaderIn?: StudentClubsUncheckedCreateNestedManyWithoutClubPrimaryLeaderInput
    Student?: StudentUncheckedCreateNestedManyWithoutAuth_userInput
  }

  export type auth_userCreateOrConnectWithoutTeacherInput = {
    where: auth_userWhereUniqueInput
    create: XOR<auth_userCreateWithoutTeacherInput, auth_userUncheckedCreateWithoutTeacherInput>
  }

  export type DepartmentCreateWithoutTeacherInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTeacherInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTeacherInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTeacherInput, DepartmentUncheckedCreateWithoutTeacherInput>
  }

  export type DepartmentsOfEducationCreateWithoutTeacherInput = {
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationUncheckedCreateWithoutTeacherInput = {
    departmentsOfEducationId?: number
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Department?: DepartmentUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationCreateOrConnectWithoutTeacherInput = {
    where: DepartmentsOfEducationWhereUniqueInput
    create: XOR<DepartmentsOfEducationCreateWithoutTeacherInput, DepartmentsOfEducationUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherScheduleCreateWithoutTeacherInput = {
    weekDay: string
    periodOfClass: string
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    createdAt?: Date | string | null
    classroom: ClassroomsCreateNestedOneWithoutTeacherScheduleInput
    course: CoursesCreateNestedOneWithoutTeacherScheduleInput
    department: DepartmentCreateNestedOneWithoutTeacherSchedulesInput
  }

  export type TeacherScheduleUncheckedCreateWithoutTeacherInput = {
    teacherScheduleId?: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type TeacherScheduleCreateOrConnectWithoutTeacherInput = {
    where: TeacherScheduleWhereUniqueInput
    create: XOR<TeacherScheduleCreateWithoutTeacherInput, TeacherScheduleUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherScheduleCreateManyTeacherInputEnvelope = {
    data: TeacherScheduleCreateManyTeacherInput | TeacherScheduleCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type TeachersCoursePlanningCreateWithoutTeacherInput = {
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    createdAt?: Date | string | null
    courseCode: string
    course: CoursesCreateNestedOneWithoutTeachersCoursePlanningInput
    department: DepartmentCreateNestedOneWithoutTeachersCoursePlanningInput
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersCoursePlanningInput
    teachersMajorPlanning: TeachersMajorPlanningCreateNestedOneWithoutTeachersCoursePlanningInput
  }

  export type TeachersCoursePlanningUncheckedCreateWithoutTeacherInput = {
    teacherCoursePlanningId?: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersCoursePlanningCreateOrConnectWithoutTeacherInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    create: XOR<TeachersCoursePlanningCreateWithoutTeacherInput, TeachersCoursePlanningUncheckedCreateWithoutTeacherInput>
  }

  export type TeachersCoursePlanningCreateManyTeacherInputEnvelope = {
    data: TeachersCoursePlanningCreateManyTeacherInput | TeachersCoursePlanningCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type TeachersMajorPlanningCreateWithoutTeacherInput = {
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    createdAt?: Date | string | null
    department: DepartmentCreateNestedOneWithoutTeachersMajorPlanningInput
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersMajorPlanningInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningUncheckedCreateWithoutTeacherInput = {
    teacherMajorId?: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEducationsId: number
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningCreateOrConnectWithoutTeacherInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    create: XOR<TeachersMajorPlanningCreateWithoutTeacherInput, TeachersMajorPlanningUncheckedCreateWithoutTeacherInput>
  }

  export type TeachersMajorPlanningCreateManyTeacherInputEnvelope = {
    data: TeachersMajorPlanningCreateManyTeacherInput | TeachersMajorPlanningCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type StudentClubsCreateWithoutClub_advisor_teacherInput = {
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    clubAssistantLeader: auth_userCreateNestedOneWithoutAssistantLeaderInInput
    clubMajor: MajorCreateNestedOneWithoutStudentClubsInput
    clubPrimaryLeader: auth_userCreateNestedOneWithoutPrimaryLeaderInInput
    Student?: StudentCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    Student?: StudentUncheckedCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsCreateOrConnectWithoutClub_advisor_teacherInput = {
    where: StudentClubsWhereUniqueInput
    create: XOR<StudentClubsCreateWithoutClub_advisor_teacherInput, StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput>
  }

  export type StudentClubsCreateManyClub_advisor_teacherInputEnvelope = {
    data: StudentClubsCreateManyClub_advisor_teacherInput | StudentClubsCreateManyClub_advisor_teacherInput[]
    skipDuplicates?: boolean
  }

  export type auth_userUpsertWithoutTeacherInput = {
    update: XOR<auth_userUpdateWithoutTeacherInput, auth_userUncheckedUpdateWithoutTeacherInput>
    create: XOR<auth_userCreateWithoutTeacherInput, auth_userUncheckedCreateWithoutTeacherInput>
    where?: auth_userWhereInput
  }

  export type auth_userUpdateToOneWithWhereWithoutTeacherInput = {
    where?: auth_userWhereInput
    data: XOR<auth_userUpdateWithoutTeacherInput, auth_userUncheckedUpdateWithoutTeacherInput>
  }

  export type auth_userUpdateWithoutTeacherInput = {
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    assistantLeaderIn?: StudentClubsUpdateManyWithoutClubAssistantLeaderNestedInput
    primaryLeaderIn?: StudentClubsUpdateManyWithoutClubPrimaryLeaderNestedInput
    Student?: StudentUpdateManyWithoutAuth_userNestedInput
  }

  export type auth_userUncheckedUpdateWithoutTeacherInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    assistantLeaderIn?: StudentClubsUncheckedUpdateManyWithoutClubAssistantLeaderNestedInput
    primaryLeaderIn?: StudentClubsUncheckedUpdateManyWithoutClubPrimaryLeaderNestedInput
    Student?: StudentUncheckedUpdateManyWithoutAuth_userNestedInput
  }

  export type DepartmentUpsertWithoutTeacherInput = {
    update: XOR<DepartmentUpdateWithoutTeacherInput, DepartmentUncheckedUpdateWithoutTeacherInput>
    create: XOR<DepartmentCreateWithoutTeacherInput, DepartmentUncheckedCreateWithoutTeacherInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutTeacherInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutTeacherInput, DepartmentUncheckedUpdateWithoutTeacherInput>
  }

  export type DepartmentUpdateWithoutTeacherInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTeacherInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentsOfEducationUpsertWithoutTeacherInput = {
    update: XOR<DepartmentsOfEducationUpdateWithoutTeacherInput, DepartmentsOfEducationUncheckedUpdateWithoutTeacherInput>
    create: XOR<DepartmentsOfEducationCreateWithoutTeacherInput, DepartmentsOfEducationUncheckedCreateWithoutTeacherInput>
    where?: DepartmentsOfEducationWhereInput
  }

  export type DepartmentsOfEducationUpdateToOneWithWhereWithoutTeacherInput = {
    where?: DepartmentsOfEducationWhereInput
    data: XOR<DepartmentsOfEducationUpdateWithoutTeacherInput, DepartmentsOfEducationUncheckedUpdateWithoutTeacherInput>
  }

  export type DepartmentsOfEducationUpdateWithoutTeacherInput = {
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type DepartmentsOfEducationUncheckedUpdateWithoutTeacherInput = {
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Department?: DepartmentUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type TeacherScheduleUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeacherScheduleWhereUniqueInput
    update: XOR<TeacherScheduleUpdateWithoutTeacherInput, TeacherScheduleUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeacherScheduleCreateWithoutTeacherInput, TeacherScheduleUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherScheduleUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeacherScheduleWhereUniqueInput
    data: XOR<TeacherScheduleUpdateWithoutTeacherInput, TeacherScheduleUncheckedUpdateWithoutTeacherInput>
  }

  export type TeacherScheduleUpdateManyWithWhereWithoutTeacherInput = {
    where: TeacherScheduleScalarWhereInput
    data: XOR<TeacherScheduleUpdateManyMutationInput, TeacherScheduleUncheckedUpdateManyWithoutTeacherInput>
  }

  export type TeachersCoursePlanningUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    update: XOR<TeachersCoursePlanningUpdateWithoutTeacherInput, TeachersCoursePlanningUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeachersCoursePlanningCreateWithoutTeacherInput, TeachersCoursePlanningUncheckedCreateWithoutTeacherInput>
  }

  export type TeachersCoursePlanningUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    data: XOR<TeachersCoursePlanningUpdateWithoutTeacherInput, TeachersCoursePlanningUncheckedUpdateWithoutTeacherInput>
  }

  export type TeachersCoursePlanningUpdateManyWithWhereWithoutTeacherInput = {
    where: TeachersCoursePlanningScalarWhereInput
    data: XOR<TeachersCoursePlanningUpdateManyMutationInput, TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherInput>
  }

  export type TeachersMajorPlanningUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    update: XOR<TeachersMajorPlanningUpdateWithoutTeacherInput, TeachersMajorPlanningUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeachersMajorPlanningCreateWithoutTeacherInput, TeachersMajorPlanningUncheckedCreateWithoutTeacherInput>
  }

  export type TeachersMajorPlanningUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    data: XOR<TeachersMajorPlanningUpdateWithoutTeacherInput, TeachersMajorPlanningUncheckedUpdateWithoutTeacherInput>
  }

  export type TeachersMajorPlanningUpdateManyWithWhereWithoutTeacherInput = {
    where: TeachersMajorPlanningScalarWhereInput
    data: XOR<TeachersMajorPlanningUpdateManyMutationInput, TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherInput>
  }

  export type TeachersMajorPlanningScalarWhereInput = {
    AND?: TeachersMajorPlanningScalarWhereInput | TeachersMajorPlanningScalarWhereInput[]
    OR?: TeachersMajorPlanningScalarWhereInput[]
    NOT?: TeachersMajorPlanningScalarWhereInput | TeachersMajorPlanningScalarWhereInput[]
    teacherMajorId?: IntFilter<"TeachersMajorPlanning"> | number
    teacherId?: IntFilter<"TeachersMajorPlanning"> | number
    academicDegreeOfMajor?: StringFilter<"TeachersMajorPlanning"> | string
    majorName?: StringFilter<"TeachersMajorPlanning"> | string
    majorId?: DecimalNullableFilter<"TeachersMajorPlanning"> | Decimal | DecimalJsLike | number | string | null
    credit?: IntFilter<"TeachersMajorPlanning"> | number
    departmentId?: IntFilter<"TeachersMajorPlanning"> | number
    createdAt?: DateTimeNullableFilter<"TeachersMajorPlanning"> | Date | string | null
    departmentOfEducationsId?: IntFilter<"TeachersMajorPlanning"> | number
  }

  export type StudentClubsUpsertWithWhereUniqueWithoutClub_advisor_teacherInput = {
    where: StudentClubsWhereUniqueInput
    update: XOR<StudentClubsUpdateWithoutClub_advisor_teacherInput, StudentClubsUncheckedUpdateWithoutClub_advisor_teacherInput>
    create: XOR<StudentClubsCreateWithoutClub_advisor_teacherInput, StudentClubsUncheckedCreateWithoutClub_advisor_teacherInput>
  }

  export type StudentClubsUpdateWithWhereUniqueWithoutClub_advisor_teacherInput = {
    where: StudentClubsWhereUniqueInput
    data: XOR<StudentClubsUpdateWithoutClub_advisor_teacherInput, StudentClubsUncheckedUpdateWithoutClub_advisor_teacherInput>
  }

  export type StudentClubsUpdateManyWithWhereWithoutClub_advisor_teacherInput = {
    where: StudentClubsScalarWhereInput
    data: XOR<StudentClubsUpdateManyMutationInput, StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherInput>
  }

  export type TeacherCreateWithoutStudentClubsInput = {
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    auth_user?: auth_userCreateNestedOneWithoutTeacherInput
    department?: DepartmentCreateNestedOneWithoutTeacherInput
    departmentsOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeacherInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutStudentClubsInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutStudentClubsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutStudentClubsInput, TeacherUncheckedCreateWithoutStudentClubsInput>
  }

  export type auth_userCreateWithoutAssistantLeaderInInput = {
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    Teacher?: TeacherCreateNestedManyWithoutAuth_userInput
    primaryLeaderIn?: StudentClubsCreateNestedManyWithoutClubPrimaryLeaderInput
    Student?: StudentCreateNestedManyWithoutAuth_userInput
  }

  export type auth_userUncheckedCreateWithoutAssistantLeaderInInput = {
    user_id?: number
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    Teacher?: TeacherUncheckedCreateNestedManyWithoutAuth_userInput
    primaryLeaderIn?: StudentClubsUncheckedCreateNestedManyWithoutClubPrimaryLeaderInput
    Student?: StudentUncheckedCreateNestedManyWithoutAuth_userInput
  }

  export type auth_userCreateOrConnectWithoutAssistantLeaderInInput = {
    where: auth_userWhereUniqueInput
    create: XOR<auth_userCreateWithoutAssistantLeaderInInput, auth_userUncheckedCreateWithoutAssistantLeaderInInput>
  }

  export type MajorCreateWithoutStudentClubsInput = {
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department?: DepartmentCreateNestedOneWithoutMajorsInput
    departmentOfEdu: DepartmentCreateNestedOneWithoutMajorsOfEducationInput
    Courses?: CoursesCreateNestedManyWithoutMajorInput
    Student?: StudentCreateNestedManyWithoutMajorInput
  }

  export type MajorUncheckedCreateWithoutStudentClubsInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department_id?: number
    Courses?: CoursesUncheckedCreateNestedManyWithoutMajorInput
    Student?: StudentUncheckedCreateNestedManyWithoutMajorInput
  }

  export type MajorCreateOrConnectWithoutStudentClubsInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutStudentClubsInput, MajorUncheckedCreateWithoutStudentClubsInput>
  }

  export type auth_userCreateWithoutPrimaryLeaderInInput = {
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    Teacher?: TeacherCreateNestedManyWithoutAuth_userInput
    assistantLeaderIn?: StudentClubsCreateNestedManyWithoutClubAssistantLeaderInput
    Student?: StudentCreateNestedManyWithoutAuth_userInput
  }

  export type auth_userUncheckedCreateWithoutPrimaryLeaderInInput = {
    user_id?: number
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    Teacher?: TeacherUncheckedCreateNestedManyWithoutAuth_userInput
    assistantLeaderIn?: StudentClubsUncheckedCreateNestedManyWithoutClubAssistantLeaderInput
    Student?: StudentUncheckedCreateNestedManyWithoutAuth_userInput
  }

  export type auth_userCreateOrConnectWithoutPrimaryLeaderInInput = {
    where: auth_userWhereUniqueInput
    create: XOR<auth_userCreateWithoutPrimaryLeaderInInput, auth_userUncheckedCreateWithoutPrimaryLeaderInInput>
  }

  export type StudentCreateWithoutStudent_clubsInput = {
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userCreateNestedOneWithoutStudentInput
    major: MajorCreateNestedOneWithoutStudentInput
    department?: DepartmentCreateNestedOneWithoutStudentInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudent_clubsInput = {
    student_id?: number
    user_id: number
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudent_clubsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudent_clubsInput, StudentUncheckedCreateWithoutStudent_clubsInput>
  }

  export type StudentCreateManyStudent_clubsInputEnvelope = {
    data: StudentCreateManyStudent_clubsInput | StudentCreateManyStudent_clubsInput[]
    skipDuplicates?: boolean
  }

  export type TeacherUpsertWithoutStudentClubsInput = {
    update: XOR<TeacherUpdateWithoutStudentClubsInput, TeacherUncheckedUpdateWithoutStudentClubsInput>
    create: XOR<TeacherCreateWithoutStudentClubsInput, TeacherUncheckedCreateWithoutStudentClubsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutStudentClubsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutStudentClubsInput, TeacherUncheckedUpdateWithoutStudentClubsInput>
  }

  export type TeacherUpdateWithoutStudentClubsInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    auth_user?: auth_userUpdateOneWithoutTeacherNestedInput
    department?: DepartmentUpdateOneWithoutTeacherNestedInput
    departmentsOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeacherNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutStudentClubsInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type auth_userUpsertWithoutAssistantLeaderInInput = {
    update: XOR<auth_userUpdateWithoutAssistantLeaderInInput, auth_userUncheckedUpdateWithoutAssistantLeaderInInput>
    create: XOR<auth_userCreateWithoutAssistantLeaderInInput, auth_userUncheckedCreateWithoutAssistantLeaderInInput>
    where?: auth_userWhereInput
  }

  export type auth_userUpdateToOneWithWhereWithoutAssistantLeaderInInput = {
    where?: auth_userWhereInput
    data: XOR<auth_userUpdateWithoutAssistantLeaderInInput, auth_userUncheckedUpdateWithoutAssistantLeaderInInput>
  }

  export type auth_userUpdateWithoutAssistantLeaderInInput = {
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUpdateManyWithoutAuth_userNestedInput
    primaryLeaderIn?: StudentClubsUpdateManyWithoutClubPrimaryLeaderNestedInput
    Student?: StudentUpdateManyWithoutAuth_userNestedInput
  }

  export type auth_userUncheckedUpdateWithoutAssistantLeaderInInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUncheckedUpdateManyWithoutAuth_userNestedInput
    primaryLeaderIn?: StudentClubsUncheckedUpdateManyWithoutClubPrimaryLeaderNestedInput
    Student?: StudentUncheckedUpdateManyWithoutAuth_userNestedInput
  }

  export type MajorUpsertWithoutStudentClubsInput = {
    update: XOR<MajorUpdateWithoutStudentClubsInput, MajorUncheckedUpdateWithoutStudentClubsInput>
    create: XOR<MajorCreateWithoutStudentClubsInput, MajorUncheckedCreateWithoutStudentClubsInput>
    where?: MajorWhereInput
  }

  export type MajorUpdateToOneWithWhereWithoutStudentClubsInput = {
    where?: MajorWhereInput
    data: XOR<MajorUpdateWithoutStudentClubsInput, MajorUncheckedUpdateWithoutStudentClubsInput>
  }

  export type MajorUpdateWithoutStudentClubsInput = {
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department?: DepartmentUpdateOneRequiredWithoutMajorsNestedInput
    departmentOfEdu?: DepartmentUpdateOneRequiredWithoutMajorsOfEducationNestedInput
    Courses?: CoursesUpdateManyWithoutMajorNestedInput
    Student?: StudentUpdateManyWithoutMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutStudentClubsInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department_id?: IntFieldUpdateOperationsInput | number
    Courses?: CoursesUncheckedUpdateManyWithoutMajorNestedInput
    Student?: StudentUncheckedUpdateManyWithoutMajorNestedInput
  }

  export type auth_userUpsertWithoutPrimaryLeaderInInput = {
    update: XOR<auth_userUpdateWithoutPrimaryLeaderInInput, auth_userUncheckedUpdateWithoutPrimaryLeaderInInput>
    create: XOR<auth_userCreateWithoutPrimaryLeaderInInput, auth_userUncheckedCreateWithoutPrimaryLeaderInInput>
    where?: auth_userWhereInput
  }

  export type auth_userUpdateToOneWithWhereWithoutPrimaryLeaderInInput = {
    where?: auth_userWhereInput
    data: XOR<auth_userUpdateWithoutPrimaryLeaderInInput, auth_userUncheckedUpdateWithoutPrimaryLeaderInInput>
  }

  export type auth_userUpdateWithoutPrimaryLeaderInInput = {
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUpdateManyWithoutAuth_userNestedInput
    assistantLeaderIn?: StudentClubsUpdateManyWithoutClubAssistantLeaderNestedInput
    Student?: StudentUpdateManyWithoutAuth_userNestedInput
  }

  export type auth_userUncheckedUpdateWithoutPrimaryLeaderInInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUncheckedUpdateManyWithoutAuth_userNestedInput
    assistantLeaderIn?: StudentClubsUncheckedUpdateManyWithoutClubAssistantLeaderNestedInput
    Student?: StudentUncheckedUpdateManyWithoutAuth_userNestedInput
  }

  export type StudentUpsertWithWhereUniqueWithoutStudent_clubsInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutStudent_clubsInput, StudentUncheckedUpdateWithoutStudent_clubsInput>
    create: XOR<StudentCreateWithoutStudent_clubsInput, StudentUncheckedCreateWithoutStudent_clubsInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutStudent_clubsInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutStudent_clubsInput, StudentUncheckedUpdateWithoutStudent_clubsInput>
  }

  export type StudentUpdateManyWithWhereWithoutStudent_clubsInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutStudent_clubsInput>
  }

  export type auth_userCreateWithoutStudentInput = {
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    Teacher?: TeacherCreateNestedManyWithoutAuth_userInput
    assistantLeaderIn?: StudentClubsCreateNestedManyWithoutClubAssistantLeaderInput
    primaryLeaderIn?: StudentClubsCreateNestedManyWithoutClubPrimaryLeaderInput
  }

  export type auth_userUncheckedCreateWithoutStudentInput = {
    user_id?: number
    login_name: string
    password_hash: string
    profile_picture?: string | null
    registry_number: string
    user_role: $Enums.UserRoleEnum
    fname: string
    lname: string
    birthday: Date | string
    gender: $Enums.GenderEnum
    citizenship: string
    state_city: string
    town_district: string
    valid_address: string
    state_city_living: string
    town_district_living: string
    valid_address_living: string
    postal_address?: string | null
    home_phone_number?: string | null
    phone_number: string
    phone_number_emergency: string
    country: string
    ethnicity: string
    social_background: string
    state_city_of_birth: string
    town_district_of_birth: string
    place_of_birth: string
    education: string
    current_academic_degree: string
    profession?: string | null
    profession_certification?: string | null
    f_passport_number?: string | null
    married: $Enums.MarriedEnum
    military_service: $Enums.MilitaryServiceEnum
    pensions_established?: string | null
    additional_notes?: string | null
    blood_type?: string | null
    drivers_certificate?: string | null
    drivers_certificate_number?: string | null
    disabled: $Enums.DisabledEnum
    is_active?: boolean
    email?: string | null
    created_at?: Date | string
    family_tree_name?: string
    Teacher?: TeacherUncheckedCreateNestedManyWithoutAuth_userInput
    assistantLeaderIn?: StudentClubsUncheckedCreateNestedManyWithoutClubAssistantLeaderInput
    primaryLeaderIn?: StudentClubsUncheckedCreateNestedManyWithoutClubPrimaryLeaderInput
  }

  export type auth_userCreateOrConnectWithoutStudentInput = {
    where: auth_userWhereUniqueInput
    create: XOR<auth_userCreateWithoutStudentInput, auth_userUncheckedCreateWithoutStudentInput>
  }

  export type MajorCreateWithoutStudentInput = {
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department?: DepartmentCreateNestedOneWithoutMajorsInput
    departmentOfEdu: DepartmentCreateNestedOneWithoutMajorsOfEducationInput
    Courses?: CoursesCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClubMajorInput
  }

  export type MajorUncheckedCreateWithoutStudentInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department_id?: number
    Courses?: CoursesUncheckedCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClubMajorInput
  }

  export type MajorCreateOrConnectWithoutStudentInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutStudentInput, MajorUncheckedCreateWithoutStudentInput>
  }

  export type StudentClubsCreateWithoutStudentInput = {
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    club_advisor_teacher: TeacherCreateNestedOneWithoutStudentClubsInput
    clubAssistantLeader: auth_userCreateNestedOneWithoutAssistantLeaderInInput
    clubMajor: MajorCreateNestedOneWithoutStudentClubsInput
    clubPrimaryLeader: auth_userCreateNestedOneWithoutPrimaryLeaderInInput
  }

  export type StudentClubsUncheckedCreateWithoutStudentInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
  }

  export type StudentClubsCreateOrConnectWithoutStudentInput = {
    where: StudentClubsWhereUniqueInput
    create: XOR<StudentClubsCreateWithoutStudentInput, StudentClubsUncheckedCreateWithoutStudentInput>
  }

  export type DepartmentCreateWithoutStudentInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutStudentInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutStudentInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutStudentInput, DepartmentUncheckedCreateWithoutStudentInput>
  }

  export type StudentCurriculumCreateWithoutStudentInput = {
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
    course: CoursesCreateNestedOneWithoutStudentCurriculumInput
  }

  export type StudentCurriculumUncheckedCreateWithoutStudentInput = {
    studentCurriculumId?: number
    courseId: number
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
  }

  export type StudentCurriculumCreateOrConnectWithoutStudentInput = {
    where: StudentCurriculumWhereUniqueInput
    create: XOR<StudentCurriculumCreateWithoutStudentInput, StudentCurriculumUncheckedCreateWithoutStudentInput>
  }

  export type StudentCurriculumCreateManyStudentInputEnvelope = {
    data: StudentCurriculumCreateManyStudentInput | StudentCurriculumCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type auth_userUpsertWithoutStudentInput = {
    update: XOR<auth_userUpdateWithoutStudentInput, auth_userUncheckedUpdateWithoutStudentInput>
    create: XOR<auth_userCreateWithoutStudentInput, auth_userUncheckedCreateWithoutStudentInput>
    where?: auth_userWhereInput
  }

  export type auth_userUpdateToOneWithWhereWithoutStudentInput = {
    where?: auth_userWhereInput
    data: XOR<auth_userUpdateWithoutStudentInput, auth_userUncheckedUpdateWithoutStudentInput>
  }

  export type auth_userUpdateWithoutStudentInput = {
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUpdateManyWithoutAuth_userNestedInput
    assistantLeaderIn?: StudentClubsUpdateManyWithoutClubAssistantLeaderNestedInput
    primaryLeaderIn?: StudentClubsUpdateManyWithoutClubPrimaryLeaderNestedInput
  }

  export type auth_userUncheckedUpdateWithoutStudentInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    login_name?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    registry_number?: StringFieldUpdateOperationsInput | string
    user_role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    citizenship?: StringFieldUpdateOperationsInput | string
    state_city?: StringFieldUpdateOperationsInput | string
    town_district?: StringFieldUpdateOperationsInput | string
    valid_address?: StringFieldUpdateOperationsInput | string
    state_city_living?: StringFieldUpdateOperationsInput | string
    town_district_living?: StringFieldUpdateOperationsInput | string
    valid_address_living?: StringFieldUpdateOperationsInput | string
    postal_address?: NullableStringFieldUpdateOperationsInput | string | null
    home_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    phone_number_emergency?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    ethnicity?: StringFieldUpdateOperationsInput | string
    social_background?: StringFieldUpdateOperationsInput | string
    state_city_of_birth?: StringFieldUpdateOperationsInput | string
    town_district_of_birth?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    profession_certification?: NullableStringFieldUpdateOperationsInput | string | null
    f_passport_number?: NullableStringFieldUpdateOperationsInput | string | null
    married?: EnumMarriedEnumFieldUpdateOperationsInput | $Enums.MarriedEnum
    military_service?: EnumMilitaryServiceEnumFieldUpdateOperationsInput | $Enums.MilitaryServiceEnum
    pensions_established?: NullableStringFieldUpdateOperationsInput | string | null
    additional_notes?: NullableStringFieldUpdateOperationsInput | string | null
    blood_type?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate?: NullableStringFieldUpdateOperationsInput | string | null
    drivers_certificate_number?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: EnumDisabledEnumFieldUpdateOperationsInput | $Enums.DisabledEnum
    is_active?: BoolFieldUpdateOperationsInput | boolean
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    family_tree_name?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUncheckedUpdateManyWithoutAuth_userNestedInput
    assistantLeaderIn?: StudentClubsUncheckedUpdateManyWithoutClubAssistantLeaderNestedInput
    primaryLeaderIn?: StudentClubsUncheckedUpdateManyWithoutClubPrimaryLeaderNestedInput
  }

  export type MajorUpsertWithoutStudentInput = {
    update: XOR<MajorUpdateWithoutStudentInput, MajorUncheckedUpdateWithoutStudentInput>
    create: XOR<MajorCreateWithoutStudentInput, MajorUncheckedCreateWithoutStudentInput>
    where?: MajorWhereInput
  }

  export type MajorUpdateToOneWithWhereWithoutStudentInput = {
    where?: MajorWhereInput
    data: XOR<MajorUpdateWithoutStudentInput, MajorUncheckedUpdateWithoutStudentInput>
  }

  export type MajorUpdateWithoutStudentInput = {
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department?: DepartmentUpdateOneRequiredWithoutMajorsNestedInput
    departmentOfEdu?: DepartmentUpdateOneRequiredWithoutMajorsOfEducationNestedInput
    Courses?: CoursesUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClubMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutStudentInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department_id?: IntFieldUpdateOperationsInput | number
    Courses?: CoursesUncheckedUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClubMajorNestedInput
  }

  export type StudentClubsUpsertWithoutStudentInput = {
    update: XOR<StudentClubsUpdateWithoutStudentInput, StudentClubsUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentClubsCreateWithoutStudentInput, StudentClubsUncheckedCreateWithoutStudentInput>
    where?: StudentClubsWhereInput
  }

  export type StudentClubsUpdateToOneWithWhereWithoutStudentInput = {
    where?: StudentClubsWhereInput
    data: XOR<StudentClubsUpdateWithoutStudentInput, StudentClubsUncheckedUpdateWithoutStudentInput>
  }

  export type StudentClubsUpdateWithoutStudentInput = {
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_advisor_teacher?: TeacherUpdateOneRequiredWithoutStudentClubsNestedInput
    clubAssistantLeader?: auth_userUpdateOneRequiredWithoutAssistantLeaderInNestedInput
    clubMajor?: MajorUpdateOneRequiredWithoutStudentClubsNestedInput
    clubPrimaryLeader?: auth_userUpdateOneRequiredWithoutPrimaryLeaderInNestedInput
  }

  export type StudentClubsUncheckedUpdateWithoutStudentInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentUpsertWithoutStudentInput = {
    update: XOR<DepartmentUpdateWithoutStudentInput, DepartmentUncheckedUpdateWithoutStudentInput>
    create: XOR<DepartmentCreateWithoutStudentInput, DepartmentUncheckedCreateWithoutStudentInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutStudentInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutStudentInput, DepartmentUncheckedUpdateWithoutStudentInput>
  }

  export type DepartmentUpdateWithoutStudentInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutStudentInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type StudentCurriculumUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentCurriculumWhereUniqueInput
    update: XOR<StudentCurriculumUpdateWithoutStudentInput, StudentCurriculumUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentCurriculumCreateWithoutStudentInput, StudentCurriculumUncheckedCreateWithoutStudentInput>
  }

  export type StudentCurriculumUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentCurriculumWhereUniqueInput
    data: XOR<StudentCurriculumUpdateWithoutStudentInput, StudentCurriculumUncheckedUpdateWithoutStudentInput>
  }

  export type StudentCurriculumUpdateManyWithWhereWithoutStudentInput = {
    where: StudentCurriculumScalarWhereInput
    data: XOR<StudentCurriculumUpdateManyMutationInput, StudentCurriculumUncheckedUpdateManyWithoutStudentInput>
  }

  export type DepartmentCreateWithoutMajorsInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutMajorsInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutMajorsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutMajorsInput, DepartmentUncheckedCreateWithoutMajorsInput>
  }

  export type DepartmentCreateWithoutMajorsOfEducationInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutDepartmentInput
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutMajorsOfEducationInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    department_of_edu_id: number
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutMajorsOfEducationInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutMajorsOfEducationInput, DepartmentUncheckedCreateWithoutMajorsOfEducationInput>
  }

  export type CoursesCreateWithoutMajorInput = {
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutCourseInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutCourseInput
    department?: DepartmentCreateNestedOneWithoutCoursesInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutMajorInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutCourseInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutCourseInput
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutMajorInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutMajorInput, CoursesUncheckedCreateWithoutMajorInput>
  }

  export type CoursesCreateManyMajorInputEnvelope = {
    data: CoursesCreateManyMajorInput | CoursesCreateManyMajorInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutMajorInput = {
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userCreateNestedOneWithoutStudentInput
    student_clubs?: StudentClubsCreateNestedOneWithoutStudentInput
    department?: DepartmentCreateNestedOneWithoutStudentInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutMajorInput = {
    student_id?: number
    user_id: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutMajorInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutMajorInput, StudentUncheckedCreateWithoutMajorInput>
  }

  export type StudentCreateManyMajorInputEnvelope = {
    data: StudentCreateManyMajorInput | StudentCreateManyMajorInput[]
    skipDuplicates?: boolean
  }

  export type StudentClubsCreateWithoutClubMajorInput = {
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    club_advisor_teacher: TeacherCreateNestedOneWithoutStudentClubsInput
    clubAssistantLeader: auth_userCreateNestedOneWithoutAssistantLeaderInInput
    clubPrimaryLeader: auth_userCreateNestedOneWithoutPrimaryLeaderInInput
    Student?: StudentCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsUncheckedCreateWithoutClubMajorInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
    Student?: StudentUncheckedCreateNestedManyWithoutStudent_clubsInput
  }

  export type StudentClubsCreateOrConnectWithoutClubMajorInput = {
    where: StudentClubsWhereUniqueInput
    create: XOR<StudentClubsCreateWithoutClubMajorInput, StudentClubsUncheckedCreateWithoutClubMajorInput>
  }

  export type StudentClubsCreateManyClubMajorInputEnvelope = {
    data: StudentClubsCreateManyClubMajorInput | StudentClubsCreateManyClubMajorInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutMajorsInput = {
    update: XOR<DepartmentUpdateWithoutMajorsInput, DepartmentUncheckedUpdateWithoutMajorsInput>
    create: XOR<DepartmentCreateWithoutMajorsInput, DepartmentUncheckedCreateWithoutMajorsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutMajorsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutMajorsInput, DepartmentUncheckedUpdateWithoutMajorsInput>
  }

  export type DepartmentUpdateWithoutMajorsInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutMajorsInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUpsertWithoutMajorsOfEducationInput = {
    update: XOR<DepartmentUpdateWithoutMajorsOfEducationInput, DepartmentUncheckedUpdateWithoutMajorsOfEducationInput>
    create: XOR<DepartmentCreateWithoutMajorsOfEducationInput, DepartmentUncheckedCreateWithoutMajorsOfEducationInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutMajorsOfEducationInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutMajorsOfEducationInput, DepartmentUncheckedUpdateWithoutMajorsOfEducationInput>
  }

  export type DepartmentUpdateWithoutMajorsOfEducationInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutMajorsOfEducationInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type CoursesUpsertWithWhereUniqueWithoutMajorInput = {
    where: CoursesWhereUniqueInput
    update: XOR<CoursesUpdateWithoutMajorInput, CoursesUncheckedUpdateWithoutMajorInput>
    create: XOR<CoursesCreateWithoutMajorInput, CoursesUncheckedCreateWithoutMajorInput>
  }

  export type CoursesUpdateWithWhereUniqueWithoutMajorInput = {
    where: CoursesWhereUniqueInput
    data: XOR<CoursesUpdateWithoutMajorInput, CoursesUncheckedUpdateWithoutMajorInput>
  }

  export type CoursesUpdateManyWithWhereWithoutMajorInput = {
    where: CoursesScalarWhereInput
    data: XOR<CoursesUpdateManyMutationInput, CoursesUncheckedUpdateManyWithoutMajorInput>
  }

  export type CoursesScalarWhereInput = {
    AND?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
    OR?: CoursesScalarWhereInput[]
    NOT?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
    courseId?: IntFilter<"Courses"> | number
    courseName?: StringFilter<"Courses"> | string
    courseCode?: StringFilter<"Courses"> | string
    courseType?: EnumCourseTypeEnumFilter<"Courses"> | $Enums.CourseTypeEnum
    courseYear?: StringFilter<"Courses"> | string
    totalCredits?: IntFilter<"Courses"> | number
    majorId?: IntFilter<"Courses"> | number
    description?: StringFilter<"Courses"> | string
    courseSeason?: EnumCourseSeasonTypeEnumFilter<"Courses"> | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: IntNullableFilter<"Courses"> | number | null
    departmentId?: IntNullableFilter<"Courses"> | number | null
  }

  export type StudentUpsertWithWhereUniqueWithoutMajorInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutMajorInput, StudentUncheckedUpdateWithoutMajorInput>
    create: XOR<StudentCreateWithoutMajorInput, StudentUncheckedCreateWithoutMajorInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutMajorInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutMajorInput, StudentUncheckedUpdateWithoutMajorInput>
  }

  export type StudentUpdateManyWithWhereWithoutMajorInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutMajorInput>
  }

  export type StudentClubsUpsertWithWhereUniqueWithoutClubMajorInput = {
    where: StudentClubsWhereUniqueInput
    update: XOR<StudentClubsUpdateWithoutClubMajorInput, StudentClubsUncheckedUpdateWithoutClubMajorInput>
    create: XOR<StudentClubsCreateWithoutClubMajorInput, StudentClubsUncheckedCreateWithoutClubMajorInput>
  }

  export type StudentClubsUpdateWithWhereUniqueWithoutClubMajorInput = {
    where: StudentClubsWhereUniqueInput
    data: XOR<StudentClubsUpdateWithoutClubMajorInput, StudentClubsUncheckedUpdateWithoutClubMajorInput>
  }

  export type StudentClubsUpdateManyWithWhereWithoutClubMajorInput = {
    where: StudentClubsScalarWhereInput
    data: XOR<StudentClubsUpdateManyMutationInput, StudentClubsUncheckedUpdateManyWithoutClubMajorInput>
  }

  export type ClassroomsCreateWithoutDepartmentOfEducationInput = {
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutClassroomInput
    Department?: DepartmentCreateNestedManyWithoutClassroomsInput
  }

  export type ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput = {
    classroom_id?: number
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutClassroomInput
    Department?: DepartmentUncheckedCreateNestedManyWithoutClassroomsInput
  }

  export type ClassroomsCreateOrConnectWithoutDepartmentOfEducationInput = {
    where: ClassroomsWhereUniqueInput
    create: XOR<ClassroomsCreateWithoutDepartmentOfEducationInput, ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput>
  }

  export type ClassroomsCreateManyDepartmentOfEducationInputEnvelope = {
    data: ClassroomsCreateManyDepartmentOfEducationInput | ClassroomsCreateManyDepartmentOfEducationInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutDepartmentsOfEducationInput = {
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    auth_user?: auth_userCreateNestedOneWithoutTeacherInput
    department?: DepartmentCreateNestedOneWithoutTeacherInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherUncheckedCreateWithoutDepartmentsOfEducationInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherCreateOrConnectWithoutDepartmentsOfEducationInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutDepartmentsOfEducationInput, TeacherUncheckedCreateWithoutDepartmentsOfEducationInput>
  }

  export type TeacherCreateManyDepartmentsOfEducationInputEnvelope = {
    data: TeacherCreateManyDepartmentsOfEducationInput | TeacherCreateManyDepartmentsOfEducationInput[]
    skipDuplicates?: boolean
  }

  export type TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput = {
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    createdAt?: Date | string | null
    courseCode: string
    course: CoursesCreateNestedOneWithoutTeachersCoursePlanningInput
    department: DepartmentCreateNestedOneWithoutTeachersCoursePlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersCoursePlanningInput
    teachersMajorPlanning: TeachersMajorPlanningCreateNestedOneWithoutTeachersCoursePlanningInput
  }

  export type TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersCoursePlanningCreateOrConnectWithoutDepartmentOfEducationInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    create: XOR<TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput>
  }

  export type TeachersCoursePlanningCreateManyDepartmentOfEducationInputEnvelope = {
    data: TeachersCoursePlanningCreateManyDepartmentOfEducationInput | TeachersCoursePlanningCreateManyDepartmentOfEducationInput[]
    skipDuplicates?: boolean
  }

  export type TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput = {
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    createdAt?: Date | string | null
    department: DepartmentCreateNestedOneWithoutTeachersMajorPlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersMajorPlanningInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput = {
    teacherMajorId?: number
    teacherId: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    departmentId: number
    createdAt?: Date | string | null
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningCreateOrConnectWithoutDepartmentOfEducationInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    create: XOR<TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput>
  }

  export type TeachersMajorPlanningCreateManyDepartmentOfEducationInputEnvelope = {
    data: TeachersMajorPlanningCreateManyDepartmentOfEducationInput | TeachersMajorPlanningCreateManyDepartmentOfEducationInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutDepartmentOfEducationInput = {
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesCreateNestedManyWithoutDepartmentInput
    majors?: MajorCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutDepartmentOfEducationInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentInput
    Courses?: CoursesUncheckedCreateNestedManyWithoutDepartmentInput
    majors?: MajorUncheckedCreateNestedManyWithoutDepartmentInput
    majorsOfEducation?: MajorUncheckedCreateNestedManyWithoutDepartmentOfEduInput
    Student?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentInput
    teacherSchedules?: TeacherScheduleUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutDepartmentOfEducationInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutDepartmentOfEducationInput, DepartmentUncheckedCreateWithoutDepartmentOfEducationInput>
  }

  export type DepartmentCreateManyDepartmentOfEducationInputEnvelope = {
    data: DepartmentCreateManyDepartmentOfEducationInput | DepartmentCreateManyDepartmentOfEducationInput[]
    skipDuplicates?: boolean
  }

  export type ClassroomsUpsertWithWhereUniqueWithoutDepartmentOfEducationInput = {
    where: ClassroomsWhereUniqueInput
    update: XOR<ClassroomsUpdateWithoutDepartmentOfEducationInput, ClassroomsUncheckedUpdateWithoutDepartmentOfEducationInput>
    create: XOR<ClassroomsCreateWithoutDepartmentOfEducationInput, ClassroomsUncheckedCreateWithoutDepartmentOfEducationInput>
  }

  export type ClassroomsUpdateWithWhereUniqueWithoutDepartmentOfEducationInput = {
    where: ClassroomsWhereUniqueInput
    data: XOR<ClassroomsUpdateWithoutDepartmentOfEducationInput, ClassroomsUncheckedUpdateWithoutDepartmentOfEducationInput>
  }

  export type ClassroomsUpdateManyWithWhereWithoutDepartmentOfEducationInput = {
    where: ClassroomsScalarWhereInput
    data: XOR<ClassroomsUpdateManyMutationInput, ClassroomsUncheckedUpdateManyWithoutDepartmentOfEducationInput>
  }

  export type ClassroomsScalarWhereInput = {
    AND?: ClassroomsScalarWhereInput | ClassroomsScalarWhereInput[]
    OR?: ClassroomsScalarWhereInput[]
    NOT?: ClassroomsScalarWhereInput | ClassroomsScalarWhereInput[]
    classroom_id?: IntFilter<"Classrooms"> | number
    department_id?: IntNullableFilter<"Classrooms"> | number | null
    classroom_type?: EnumClassroomTypeEnumFilter<"Classrooms"> | $Enums.ClassroomTypeEnum
    classroom_number?: StringFilter<"Classrooms"> | string
    projector?: EnumProjectorEnumFilter<"Classrooms"> | $Enums.ProjectorEnum
    tv?: EnumTvEnumFilter<"Classrooms"> | $Enums.TvEnum
    createdAt?: DateTimeNullableFilter<"Classrooms"> | Date | string | null
    capacity?: IntFilter<"Classrooms"> | number
  }

  export type TeacherUpsertWithWhereUniqueWithoutDepartmentsOfEducationInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutDepartmentsOfEducationInput, TeacherUncheckedUpdateWithoutDepartmentsOfEducationInput>
    create: XOR<TeacherCreateWithoutDepartmentsOfEducationInput, TeacherUncheckedCreateWithoutDepartmentsOfEducationInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutDepartmentsOfEducationInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutDepartmentsOfEducationInput, TeacherUncheckedUpdateWithoutDepartmentsOfEducationInput>
  }

  export type TeacherUpdateManyWithWhereWithoutDepartmentsOfEducationInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutDepartmentsOfEducationInput>
  }

  export type TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    update: XOR<TeachersCoursePlanningUpdateWithoutDepartmentOfEducationInput, TeachersCoursePlanningUncheckedUpdateWithoutDepartmentOfEducationInput>
    create: XOR<TeachersCoursePlanningCreateWithoutDepartmentOfEducationInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentOfEducationInput>
  }

  export type TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    data: XOR<TeachersCoursePlanningUpdateWithoutDepartmentOfEducationInput, TeachersCoursePlanningUncheckedUpdateWithoutDepartmentOfEducationInput>
  }

  export type TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput = {
    where: TeachersCoursePlanningScalarWhereInput
    data: XOR<TeachersCoursePlanningUpdateManyMutationInput, TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentOfEducationInput>
  }

  export type TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentOfEducationInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    update: XOR<TeachersMajorPlanningUpdateWithoutDepartmentOfEducationInput, TeachersMajorPlanningUncheckedUpdateWithoutDepartmentOfEducationInput>
    create: XOR<TeachersMajorPlanningCreateWithoutDepartmentOfEducationInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentOfEducationInput>
  }

  export type TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentOfEducationInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    data: XOR<TeachersMajorPlanningUpdateWithoutDepartmentOfEducationInput, TeachersMajorPlanningUncheckedUpdateWithoutDepartmentOfEducationInput>
  }

  export type TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentOfEducationInput = {
    where: TeachersMajorPlanningScalarWhereInput
    data: XOR<TeachersMajorPlanningUpdateManyMutationInput, TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentOfEducationInput>
  }

  export type DepartmentUpsertWithWhereUniqueWithoutDepartmentOfEducationInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutDepartmentOfEducationInput, DepartmentUncheckedUpdateWithoutDepartmentOfEducationInput>
    create: XOR<DepartmentCreateWithoutDepartmentOfEducationInput, DepartmentUncheckedCreateWithoutDepartmentOfEducationInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutDepartmentOfEducationInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutDepartmentOfEducationInput, DepartmentUncheckedUpdateWithoutDepartmentOfEducationInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutDepartmentOfEducationInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutDepartmentOfEducationInput>
  }

  export type DepartmentsOfEducationCreateWithoutDepartmentInput = {
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsCreateNestedManyWithoutDepartmentOfEducationInput
    Teacher?: TeacherCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationUncheckedCreateWithoutDepartmentInput = {
    departmentsOfEducationId?: number
    edDepartmentName: string
    edDepartmentCode: string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutDepartmentsOfEducationInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutDepartmentOfEducationInput
  }

  export type DepartmentsOfEducationCreateOrConnectWithoutDepartmentInput = {
    where: DepartmentsOfEducationWhereUniqueInput
    create: XOR<DepartmentsOfEducationCreateWithoutDepartmentInput, DepartmentsOfEducationUncheckedCreateWithoutDepartmentInput>
  }

  export type ClassroomsCreateWithoutDepartmentInput = {
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
    departmentOfEducation?: DepartmentsOfEducationCreateNestedOneWithoutClassroomsInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutClassroomInput
  }

  export type ClassroomsUncheckedCreateWithoutDepartmentInput = {
    classroom_id?: number
    department_id?: number | null
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutClassroomInput
  }

  export type ClassroomsCreateOrConnectWithoutDepartmentInput = {
    where: ClassroomsWhereUniqueInput
    create: XOR<ClassroomsCreateWithoutDepartmentInput, ClassroomsUncheckedCreateWithoutDepartmentInput>
  }

  export type CoursesCreateWithoutDepartmentInput = {
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    major: MajorCreateNestedOneWithoutCoursesInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutCourseInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutCourseInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutDepartmentInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    majorId: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutCourseInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutCourseInput
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutDepartmentInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutDepartmentInput, CoursesUncheckedCreateWithoutDepartmentInput>
  }

  export type CoursesCreateManyDepartmentInputEnvelope = {
    data: CoursesCreateManyDepartmentInput | CoursesCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type MajorCreateWithoutDepartmentInput = {
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    departmentOfEdu: DepartmentCreateNestedOneWithoutMajorsOfEducationInput
    Courses?: CoursesCreateNestedManyWithoutMajorInput
    Student?: StudentCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClubMajorInput
  }

  export type MajorUncheckedCreateWithoutDepartmentInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    Courses?: CoursesUncheckedCreateNestedManyWithoutMajorInput
    Student?: StudentUncheckedCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClubMajorInput
  }

  export type MajorCreateOrConnectWithoutDepartmentInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutDepartmentInput, MajorUncheckedCreateWithoutDepartmentInput>
  }

  export type MajorCreateManyDepartmentInputEnvelope = {
    data: MajorCreateManyDepartmentInput | MajorCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type MajorCreateWithoutDepartmentOfEduInput = {
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department?: DepartmentCreateNestedOneWithoutMajorsInput
    Courses?: CoursesCreateNestedManyWithoutMajorInput
    Student?: StudentCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClubMajorInput
  }

  export type MajorUncheckedCreateWithoutDepartmentOfEduInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department_id?: number
    Courses?: CoursesUncheckedCreateNestedManyWithoutMajorInput
    Student?: StudentUncheckedCreateNestedManyWithoutMajorInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClubMajorInput
  }

  export type MajorCreateOrConnectWithoutDepartmentOfEduInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutDepartmentOfEduInput, MajorUncheckedCreateWithoutDepartmentOfEduInput>
  }

  export type MajorCreateManyDepartmentOfEduInputEnvelope = {
    data: MajorCreateManyDepartmentOfEduInput | MajorCreateManyDepartmentOfEduInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutDepartmentInput = {
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userCreateNestedOneWithoutStudentInput
    major: MajorCreateNestedOneWithoutStudentInput
    student_clubs?: StudentClubsCreateNestedOneWithoutStudentInput
    StudentCurriculum?: StudentCurriculumCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutDepartmentInput = {
    student_id?: number
    user_id: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    StudentCurriculum?: StudentCurriculumUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput>
  }

  export type StudentCreateManyDepartmentInputEnvelope = {
    data: StudentCreateManyDepartmentInput | StudentCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutDepartmentInput = {
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    auth_user?: auth_userCreateNestedOneWithoutTeacherInput
    departmentsOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeacherInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherUncheckedCreateWithoutDepartmentInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutTeacherInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeacherInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedCreateNestedManyWithoutTeacherInput
    StudentClubs?: StudentClubsUncheckedCreateNestedManyWithoutClub_advisor_teacherInput
  }

  export type TeacherCreateOrConnectWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput>
  }

  export type TeacherCreateManyDepartmentInputEnvelope = {
    data: TeacherCreateManyDepartmentInput | TeacherCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type TeachersCoursePlanningCreateWithoutDepartmentInput = {
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    createdAt?: Date | string | null
    courseCode: string
    course: CoursesCreateNestedOneWithoutTeachersCoursePlanningInput
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersCoursePlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersCoursePlanningInput
    teachersMajorPlanning: TeachersMajorPlanningCreateNestedOneWithoutTeachersCoursePlanningInput
  }

  export type TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersCoursePlanningCreateOrConnectWithoutDepartmentInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    create: XOR<TeachersCoursePlanningCreateWithoutDepartmentInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput>
  }

  export type TeachersCoursePlanningCreateManyDepartmentInputEnvelope = {
    data: TeachersCoursePlanningCreateManyDepartmentInput | TeachersCoursePlanningCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type TeachersMajorPlanningCreateWithoutDepartmentInput = {
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    createdAt?: Date | string | null
    departmentOfEducation: DepartmentsOfEducationCreateNestedOneWithoutTeachersMajorPlanningInput
    teacher: TeacherCreateNestedOneWithoutTeachersMajorPlanningInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput = {
    teacherMajorId?: number
    teacherId: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    createdAt?: Date | string | null
    departmentOfEducationsId: number
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutTeachersMajorPlanningInput
  }

  export type TeachersMajorPlanningCreateOrConnectWithoutDepartmentInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    create: XOR<TeachersMajorPlanningCreateWithoutDepartmentInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput>
  }

  export type TeachersMajorPlanningCreateManyDepartmentInputEnvelope = {
    data: TeachersMajorPlanningCreateManyDepartmentInput | TeachersMajorPlanningCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type TeacherScheduleCreateWithoutDepartmentInput = {
    weekDay: string
    periodOfClass: string
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    createdAt?: Date | string | null
    classroom: ClassroomsCreateNestedOneWithoutTeacherScheduleInput
    course: CoursesCreateNestedOneWithoutTeacherScheduleInput
    teacher: TeacherCreateNestedOneWithoutTeacherScheduleInput
  }

  export type TeacherScheduleUncheckedCreateWithoutDepartmentInput = {
    teacherScheduleId?: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    createdAt?: Date | string | null
  }

  export type TeacherScheduleCreateOrConnectWithoutDepartmentInput = {
    where: TeacherScheduleWhereUniqueInput
    create: XOR<TeacherScheduleCreateWithoutDepartmentInput, TeacherScheduleUncheckedCreateWithoutDepartmentInput>
  }

  export type TeacherScheduleCreateManyDepartmentInputEnvelope = {
    data: TeacherScheduleCreateManyDepartmentInput | TeacherScheduleCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentsOfEducationUpsertWithoutDepartmentInput = {
    update: XOR<DepartmentsOfEducationUpdateWithoutDepartmentInput, DepartmentsOfEducationUncheckedUpdateWithoutDepartmentInput>
    create: XOR<DepartmentsOfEducationCreateWithoutDepartmentInput, DepartmentsOfEducationUncheckedCreateWithoutDepartmentInput>
    where?: DepartmentsOfEducationWhereInput
  }

  export type DepartmentsOfEducationUpdateToOneWithWhereWithoutDepartmentInput = {
    where?: DepartmentsOfEducationWhereInput
    data: XOR<DepartmentsOfEducationUpdateWithoutDepartmentInput, DepartmentsOfEducationUncheckedUpdateWithoutDepartmentInput>
  }

  export type DepartmentsOfEducationUpdateWithoutDepartmentInput = {
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentOfEducationNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type DepartmentsOfEducationUncheckedUpdateWithoutDepartmentInput = {
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    edDepartmentName?: StringFieldUpdateOperationsInput | string
    edDepartmentCode?: StringFieldUpdateOperationsInput | string
    teachers?: NullableJsonNullValueInput | InputJsonValue
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentsOfEducationNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentOfEducationNestedInput
  }

  export type ClassroomsUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: ClassroomsWhereUniqueInput
    update: XOR<ClassroomsUpdateWithoutDepartmentInput, ClassroomsUncheckedUpdateWithoutDepartmentInput>
    create: XOR<ClassroomsCreateWithoutDepartmentInput, ClassroomsUncheckedCreateWithoutDepartmentInput>
  }

  export type ClassroomsUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: ClassroomsWhereUniqueInput
    data: XOR<ClassroomsUpdateWithoutDepartmentInput, ClassroomsUncheckedUpdateWithoutDepartmentInput>
  }

  export type ClassroomsUpdateManyWithWhereWithoutDepartmentInput = {
    where: ClassroomsScalarWhereInput
    data: XOR<ClassroomsUpdateManyMutationInput, ClassroomsUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type CoursesUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: CoursesWhereUniqueInput
    update: XOR<CoursesUpdateWithoutDepartmentInput, CoursesUncheckedUpdateWithoutDepartmentInput>
    create: XOR<CoursesCreateWithoutDepartmentInput, CoursesUncheckedCreateWithoutDepartmentInput>
  }

  export type CoursesUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: CoursesWhereUniqueInput
    data: XOR<CoursesUpdateWithoutDepartmentInput, CoursesUncheckedUpdateWithoutDepartmentInput>
  }

  export type CoursesUpdateManyWithWhereWithoutDepartmentInput = {
    where: CoursesScalarWhereInput
    data: XOR<CoursesUpdateManyMutationInput, CoursesUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type MajorUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: MajorWhereUniqueInput
    update: XOR<MajorUpdateWithoutDepartmentInput, MajorUncheckedUpdateWithoutDepartmentInput>
    create: XOR<MajorCreateWithoutDepartmentInput, MajorUncheckedCreateWithoutDepartmentInput>
  }

  export type MajorUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: MajorWhereUniqueInput
    data: XOR<MajorUpdateWithoutDepartmentInput, MajorUncheckedUpdateWithoutDepartmentInput>
  }

  export type MajorUpdateManyWithWhereWithoutDepartmentInput = {
    where: MajorScalarWhereInput
    data: XOR<MajorUpdateManyMutationInput, MajorUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type MajorScalarWhereInput = {
    AND?: MajorScalarWhereInput | MajorScalarWhereInput[]
    OR?: MajorScalarWhereInput[]
    NOT?: MajorScalarWhereInput | MajorScalarWhereInput[]
    major_id?: IntFilter<"Major"> | number
    major_name?: StringFilter<"Major"> | string
    majors_year?: DateTimeFilter<"Major"> | Date | string
    majors_type?: EnumMajorTypeEnumFilter<"Major"> | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFilter<"Major"> | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFilter<"Major"> | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFilter<"Major"> | string
    total_years?: IntFilter<"Major"> | number
    total_credits_per_year?: IntFilter<"Major"> | number
    department_of_edu_id?: IntFilter<"Major"> | number
    created_at?: DateTimeNullableFilter<"Major"> | Date | string | null
    exam1?: FloatFilter<"Major"> | number
    exam2?: FloatFilter<"Major"> | number
    majors_description?: StringFilter<"Major"> | string
    description_brief?: StringNullableFilter<"Major"> | string | null
    qualifications?: JsonNullableFilter<"Major">
    qualifications1?: StringNullableFilter<"Major"> | string | null
    qualifications2?: StringNullableFilter<"Major"> | string | null
    sign_ups?: EnumSignUpsEnumFilter<"Major"> | $Enums.SignUpsEnum
    department_id?: IntFilter<"Major"> | number
  }

  export type MajorUpsertWithWhereUniqueWithoutDepartmentOfEduInput = {
    where: MajorWhereUniqueInput
    update: XOR<MajorUpdateWithoutDepartmentOfEduInput, MajorUncheckedUpdateWithoutDepartmentOfEduInput>
    create: XOR<MajorCreateWithoutDepartmentOfEduInput, MajorUncheckedCreateWithoutDepartmentOfEduInput>
  }

  export type MajorUpdateWithWhereUniqueWithoutDepartmentOfEduInput = {
    where: MajorWhereUniqueInput
    data: XOR<MajorUpdateWithoutDepartmentOfEduInput, MajorUncheckedUpdateWithoutDepartmentOfEduInput>
  }

  export type MajorUpdateManyWithWhereWithoutDepartmentOfEduInput = {
    where: MajorScalarWhereInput
    data: XOR<MajorUpdateManyMutationInput, MajorUncheckedUpdateManyWithoutDepartmentOfEduInput>
  }

  export type StudentUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutDepartmentInput, StudentUncheckedUpdateWithoutDepartmentInput>
    create: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutDepartmentInput, StudentUncheckedUpdateWithoutDepartmentInput>
  }

  export type StudentUpdateManyWithWhereWithoutDepartmentInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type TeacherUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutDepartmentInput, TeacherUncheckedUpdateWithoutDepartmentInput>
    create: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutDepartmentInput, TeacherUncheckedUpdateWithoutDepartmentInput>
  }

  export type TeacherUpdateManyWithWhereWithoutDepartmentInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type TeachersCoursePlanningUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    update: XOR<TeachersCoursePlanningUpdateWithoutDepartmentInput, TeachersCoursePlanningUncheckedUpdateWithoutDepartmentInput>
    create: XOR<TeachersCoursePlanningCreateWithoutDepartmentInput, TeachersCoursePlanningUncheckedCreateWithoutDepartmentInput>
  }

  export type TeachersCoursePlanningUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: TeachersCoursePlanningWhereUniqueInput
    data: XOR<TeachersCoursePlanningUpdateWithoutDepartmentInput, TeachersCoursePlanningUncheckedUpdateWithoutDepartmentInput>
  }

  export type TeachersCoursePlanningUpdateManyWithWhereWithoutDepartmentInput = {
    where: TeachersCoursePlanningScalarWhereInput
    data: XOR<TeachersCoursePlanningUpdateManyMutationInput, TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type TeachersMajorPlanningUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    update: XOR<TeachersMajorPlanningUpdateWithoutDepartmentInput, TeachersMajorPlanningUncheckedUpdateWithoutDepartmentInput>
    create: XOR<TeachersMajorPlanningCreateWithoutDepartmentInput, TeachersMajorPlanningUncheckedCreateWithoutDepartmentInput>
  }

  export type TeachersMajorPlanningUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: TeachersMajorPlanningWhereUniqueInput
    data: XOR<TeachersMajorPlanningUpdateWithoutDepartmentInput, TeachersMajorPlanningUncheckedUpdateWithoutDepartmentInput>
  }

  export type TeachersMajorPlanningUpdateManyWithWhereWithoutDepartmentInput = {
    where: TeachersMajorPlanningScalarWhereInput
    data: XOR<TeachersMajorPlanningUpdateManyMutationInput, TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type TeacherScheduleUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: TeacherScheduleWhereUniqueInput
    update: XOR<TeacherScheduleUpdateWithoutDepartmentInput, TeacherScheduleUncheckedUpdateWithoutDepartmentInput>
    create: XOR<TeacherScheduleCreateWithoutDepartmentInput, TeacherScheduleUncheckedCreateWithoutDepartmentInput>
  }

  export type TeacherScheduleUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: TeacherScheduleWhereUniqueInput
    data: XOR<TeacherScheduleUpdateWithoutDepartmentInput, TeacherScheduleUncheckedUpdateWithoutDepartmentInput>
  }

  export type TeacherScheduleUpdateManyWithWhereWithoutDepartmentInput = {
    where: TeacherScheduleScalarWhereInput
    data: XOR<TeacherScheduleUpdateManyMutationInput, TeacherScheduleUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type StudentCreateWithoutStudentCurriculumInput = {
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userCreateNestedOneWithoutStudentInput
    major: MajorCreateNestedOneWithoutStudentInput
    student_clubs?: StudentClubsCreateNestedOneWithoutStudentInput
    department?: DepartmentCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentCurriculumInput = {
    student_id?: number
    user_id: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
  }

  export type StudentCreateOrConnectWithoutStudentCurriculumInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentCurriculumInput, StudentUncheckedCreateWithoutStudentCurriculumInput>
  }

  export type CoursesCreateWithoutStudentCurriculumInput = {
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    major: MajorCreateNestedOneWithoutCoursesInput
    TeacherSchedule?: TeacherScheduleCreateNestedManyWithoutCourseInput
    TeachersCoursePlanning?: TeachersCoursePlanningCreateNestedManyWithoutCourseInput
    department?: DepartmentCreateNestedOneWithoutCoursesInput
  }

  export type CoursesUncheckedCreateWithoutStudentCurriculumInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    majorId: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    departmentId?: number | null
    TeacherSchedule?: TeacherScheduleUncheckedCreateNestedManyWithoutCourseInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutStudentCurriculumInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutStudentCurriculumInput, CoursesUncheckedCreateWithoutStudentCurriculumInput>
  }

  export type StudentUpsertWithoutStudentCurriculumInput = {
    update: XOR<StudentUpdateWithoutStudentCurriculumInput, StudentUncheckedUpdateWithoutStudentCurriculumInput>
    create: XOR<StudentCreateWithoutStudentCurriculumInput, StudentUncheckedCreateWithoutStudentCurriculumInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentCurriculumInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentCurriculumInput, StudentUncheckedUpdateWithoutStudentCurriculumInput>
  }

  export type StudentUpdateWithoutStudentCurriculumInput = {
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userUpdateOneWithoutStudentNestedInput
    major?: MajorUpdateOneRequiredWithoutStudentNestedInput
    student_clubs?: StudentClubsUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentCurriculumInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CoursesUpsertWithoutStudentCurriculumInput = {
    update: XOR<CoursesUpdateWithoutStudentCurriculumInput, CoursesUncheckedUpdateWithoutStudentCurriculumInput>
    create: XOR<CoursesCreateWithoutStudentCurriculumInput, CoursesUncheckedCreateWithoutStudentCurriculumInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutStudentCurriculumInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutStudentCurriculumInput, CoursesUncheckedUpdateWithoutStudentCurriculumInput>
  }

  export type CoursesUpdateWithoutStudentCurriculumInput = {
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    major?: MajorUpdateOneRequiredWithoutCoursesNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutCourseNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutCourseNestedInput
    department?: DepartmentUpdateOneWithoutCoursesNestedInput
  }

  export type CoursesUncheckedUpdateWithoutStudentCurriculumInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutCourseNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type TeacherCreateManyAuth_userInput = {
    teacherId?: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
    departmentId?: number | null
  }

  export type StudentClubsCreateManyClubAssistantLeaderInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
  }

  export type StudentClubsCreateManyClubPrimaryLeaderInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
  }

  export type StudentCreateManyAuth_userInput = {
    student_id?: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
  }

  export type TeacherUpdateWithoutAuth_userInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneWithoutTeacherNestedInput
    departmentsOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeacherNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutAuth_userInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateManyWithoutAuth_userInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentClubsUpdateWithoutClubAssistantLeaderInput = {
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_advisor_teacher?: TeacherUpdateOneRequiredWithoutStudentClubsNestedInput
    clubMajor?: MajorUpdateOneRequiredWithoutStudentClubsNestedInput
    clubPrimaryLeader?: auth_userUpdateOneRequiredWithoutPrimaryLeaderInNestedInput
    Student?: StudentUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateWithoutClubAssistantLeaderInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Student?: StudentUncheckedUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateManyWithoutClubAssistantLeaderInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentClubsUpdateWithoutClubPrimaryLeaderInput = {
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_advisor_teacher?: TeacherUpdateOneRequiredWithoutStudentClubsNestedInput
    clubAssistantLeader?: auth_userUpdateOneRequiredWithoutAssistantLeaderInNestedInput
    clubMajor?: MajorUpdateOneRequiredWithoutStudentClubsNestedInput
    Student?: StudentUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateWithoutClubPrimaryLeaderInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Student?: StudentUncheckedUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateManyWithoutClubPrimaryLeaderInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentUpdateWithoutAuth_userInput = {
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    major?: MajorUpdateOneRequiredWithoutStudentNestedInput
    student_clubs?: StudentClubsUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneWithoutStudentNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAuth_userInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutAuth_userInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeacherScheduleCreateManyClassroomInput = {
    teacherScheduleId?: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type TeacherScheduleUpdateWithoutClassroomInput = {
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CoursesUpdateOneRequiredWithoutTeacherScheduleNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeacherSchedulesNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeacherScheduleNestedInput
  }

  export type TeacherScheduleUncheckedUpdateWithoutClassroomInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeacherScheduleUncheckedUpdateManyWithoutClassroomInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentUpdateWithoutClassroomsInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutClassroomsInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutClassroomsInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherScheduleCreateManyCourseInput = {
    teacherScheduleId?: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type TeachersCoursePlanningCreateManyCourseInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
  }

  export type StudentCurriculumCreateManyCourseInput = {
    studentCurriculumId?: number
    studentId: number
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
  }

  export type TeacherScheduleUpdateWithoutCourseInput = {
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classroom?: ClassroomsUpdateOneRequiredWithoutTeacherScheduleNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeacherSchedulesNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeacherScheduleNestedInput
  }

  export type TeacherScheduleUncheckedUpdateWithoutCourseInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classroomId?: IntFieldUpdateOperationsInput | number
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeacherScheduleUncheckedUpdateManyWithoutCourseInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classroomId?: IntFieldUpdateOperationsInput | number
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeachersCoursePlanningUpdateWithoutCourseInput = {
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teachersMajorPlanning?: TeachersMajorPlanningUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
  }

  export type TeachersCoursePlanningUncheckedUpdateWithoutCourseInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutCourseInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCurriculumUpdateWithoutCourseInput = {
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutStudentCurriculumNestedInput
  }

  export type StudentCurriculumUncheckedUpdateWithoutCourseInput = {
    studentCurriculumId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCurriculumUncheckedUpdateManyWithoutCourseInput = {
    studentCurriculumId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type TeachersCoursePlanningCreateManyTeachersMajorPlanningInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
  }

  export type TeachersCoursePlanningUpdateWithoutTeachersMajorPlanningInput = {
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    course?: CoursesUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
  }

  export type TeachersCoursePlanningUncheckedUpdateWithoutTeachersMajorPlanningInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutTeachersMajorPlanningInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherScheduleCreateManyTeacherInput = {
    teacherScheduleId?: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type TeachersCoursePlanningCreateManyTeacherInput = {
    teacherCoursePlanningId?: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersMajorPlanningCreateManyTeacherInput = {
    teacherMajorId?: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    departmentId: number
    createdAt?: Date | string | null
    departmentOfEducationsId: number
  }

  export type StudentClubsCreateManyClub_advisor_teacherInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubMajorId: number
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
  }

  export type TeacherScheduleUpdateWithoutTeacherInput = {
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classroom?: ClassroomsUpdateOneRequiredWithoutTeacherScheduleNestedInput
    course?: CoursesUpdateOneRequiredWithoutTeacherScheduleNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeacherSchedulesNestedInput
  }

  export type TeacherScheduleUncheckedUpdateWithoutTeacherInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classroomId?: IntFieldUpdateOperationsInput | number
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeacherScheduleUncheckedUpdateManyWithoutTeacherInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classroomId?: IntFieldUpdateOperationsInput | number
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeachersCoursePlanningUpdateWithoutTeacherInput = {
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    course?: CoursesUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teachersMajorPlanning?: TeachersMajorPlanningUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
  }

  export type TeachersCoursePlanningUncheckedUpdateWithoutTeacherInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersMajorPlanningUpdateWithoutTeacherInput = {
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningUncheckedUpdateWithoutTeacherInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducationsId?: IntFieldUpdateOperationsInput | number
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducationsId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentClubsUpdateWithoutClub_advisor_teacherInput = {
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clubAssistantLeader?: auth_userUpdateOneRequiredWithoutAssistantLeaderInNestedInput
    clubMajor?: MajorUpdateOneRequiredWithoutStudentClubsNestedInput
    clubPrimaryLeader?: auth_userUpdateOneRequiredWithoutPrimaryLeaderInNestedInput
    Student?: StudentUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateWithoutClub_advisor_teacherInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Student?: StudentUncheckedUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubMajorId?: IntFieldUpdateOperationsInput | number
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentCreateManyStudent_clubsInput = {
    student_id?: number
    user_id: number
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
  }

  export type StudentUpdateWithoutStudent_clubsInput = {
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userUpdateOneWithoutStudentNestedInput
    major?: MajorUpdateOneRequiredWithoutStudentNestedInput
    department?: DepartmentUpdateOneWithoutStudentNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudent_clubsInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutStudent_clubsInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentCurriculumCreateManyStudentInput = {
    studentCurriculumId?: number
    courseId: number
    credit: number
    studentYear: Date | string
    semesterYear: string
    modifiedAt?: Date | string | null
    courseCode: string
  }

  export type StudentCurriculumUpdateWithoutStudentInput = {
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    course?: CoursesUpdateOneRequiredWithoutStudentCurriculumNestedInput
  }

  export type StudentCurriculumUncheckedUpdateWithoutStudentInput = {
    studentCurriculumId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCurriculumUncheckedUpdateManyWithoutStudentInput = {
    studentCurriculumId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    credit?: IntFieldUpdateOperationsInput | number
    studentYear?: DateTimeFieldUpdateOperationsInput | Date | string
    semesterYear?: StringFieldUpdateOperationsInput | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
  }

  export type CoursesCreateManyMajorInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
    departmentId?: number | null
  }

  export type StudentCreateManyMajorInput = {
    student_id?: number
    user_id: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: number | null
  }

  export type StudentClubsCreateManyClubMajorInput = {
    studentClubId?: number
    clubCode: string
    clubName: string
    clubMembers?: number
    clubType?: $Enums.ClubTypeEnum
    clubPrimaryLeaderId: number
    clubAssistantLeaderId: number
    clubAdvisorTeacherId: number
    clubLogo: string
    clubMoto: string
    createdAt?: Date | string | null
  }

  export type CoursesUpdateWithoutMajorInput = {
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutCourseNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutCourseNestedInput
    department?: DepartmentUpdateOneWithoutCoursesNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutMajorInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutCourseNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutCourseNestedInput
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateManyWithoutMajorInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentUpdateWithoutMajorInput = {
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userUpdateOneWithoutStudentNestedInput
    student_clubs?: StudentClubsUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneWithoutStudentNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutMajorInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutMajorInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentClubsUpdateWithoutClubMajorInput = {
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_advisor_teacher?: TeacherUpdateOneRequiredWithoutStudentClubsNestedInput
    clubAssistantLeader?: auth_userUpdateOneRequiredWithoutAssistantLeaderInNestedInput
    clubPrimaryLeader?: auth_userUpdateOneRequiredWithoutPrimaryLeaderInNestedInput
    Student?: StudentUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateWithoutClubMajorInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Student?: StudentUncheckedUpdateManyWithoutStudent_clubsNestedInput
  }

  export type StudentClubsUncheckedUpdateManyWithoutClubMajorInput = {
    studentClubId?: IntFieldUpdateOperationsInput | number
    clubCode?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    clubMembers?: IntFieldUpdateOperationsInput | number
    clubType?: EnumClubTypeEnumFieldUpdateOperationsInput | $Enums.ClubTypeEnum
    clubPrimaryLeaderId?: IntFieldUpdateOperationsInput | number
    clubAssistantLeaderId?: IntFieldUpdateOperationsInput | number
    clubAdvisorTeacherId?: IntFieldUpdateOperationsInput | number
    clubLogo?: StringFieldUpdateOperationsInput | string
    clubMoto?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClassroomsCreateManyDepartmentOfEducationInput = {
    classroom_id?: number
    classroom_type: $Enums.ClassroomTypeEnum
    classroom_number: string
    projector?: $Enums.ProjectorEnum
    tv?: $Enums.TvEnum
    createdAt?: Date | string | null
    capacity: number
  }

  export type TeacherCreateManyDepartmentsOfEducationInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentId?: number | null
  }

  export type TeachersCoursePlanningCreateManyDepartmentOfEducationInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    departmentId: number
    createdAt?: Date | string | null
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersMajorPlanningCreateManyDepartmentOfEducationInput = {
    teacherMajorId?: number
    teacherId: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    departmentId: number
    createdAt?: Date | string | null
  }

  export type DepartmentCreateManyDepartmentOfEducationInput = {
    department_id?: number
    department_name: string
    department_code: string
    department_email: string
    number_of_staff?: number | null
    logo: string
    created_at?: Date | string | null
  }

  export type ClassroomsUpdateWithoutDepartmentOfEducationInput = {
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutClassroomNestedInput
    Department?: DepartmentUpdateManyWithoutClassroomsNestedInput
  }

  export type ClassroomsUncheckedUpdateWithoutDepartmentOfEducationInput = {
    classroom_id?: IntFieldUpdateOperationsInput | number
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutClassroomNestedInput
    Department?: DepartmentUncheckedUpdateManyWithoutClassroomsNestedInput
  }

  export type ClassroomsUncheckedUpdateManyWithoutDepartmentOfEducationInput = {
    classroom_id?: IntFieldUpdateOperationsInput | number
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherUpdateWithoutDepartmentsOfEducationInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    auth_user?: auth_userUpdateOneWithoutTeacherNestedInput
    department?: DepartmentUpdateOneWithoutTeacherNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutDepartmentsOfEducationInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateManyWithoutDepartmentsOfEducationInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeachersCoursePlanningUpdateWithoutDepartmentOfEducationInput = {
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    course?: CoursesUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teachersMajorPlanning?: TeachersMajorPlanningUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
  }

  export type TeachersCoursePlanningUncheckedUpdateWithoutDepartmentOfEducationInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentOfEducationInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersMajorPlanningUpdateWithoutDepartmentOfEducationInput = {
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningUncheckedUpdateWithoutDepartmentOfEducationInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentOfEducationInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentUpdateWithoutDepartmentOfEducationInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Classrooms?: ClassroomsUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutDepartmentOfEducationInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Classrooms?: ClassroomsUncheckedUpdateManyWithoutDepartmentNestedInput
    Courses?: CoursesUncheckedUpdateManyWithoutDepartmentNestedInput
    majors?: MajorUncheckedUpdateManyWithoutDepartmentNestedInput
    majorsOfEducation?: MajorUncheckedUpdateManyWithoutDepartmentOfEduNestedInput
    Student?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentNestedInput
    teacherSchedules?: TeacherScheduleUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutDepartmentOfEducationInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    department_code?: StringFieldUpdateOperationsInput | string
    department_email?: StringFieldUpdateOperationsInput | string
    number_of_staff?: NullableIntFieldUpdateOperationsInput | number | null
    logo?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CoursesCreateManyDepartmentInput = {
    courseId?: number
    courseName: string
    courseCode: string
    courseType: $Enums.CourseTypeEnum
    courseYear: string
    totalCredits: number
    majorId: number
    description?: string
    courseSeason?: $Enums.CourseSeasonTypeEnum
    timesPerWeek?: number | null
  }

  export type MajorCreateManyDepartmentInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    department_of_edu_id: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
  }

  export type MajorCreateManyDepartmentOfEduInput = {
    major_id?: number
    major_name: string
    majors_year: Date | string
    majors_type: $Enums.MajorTypeEnum
    credit_unit_rate: Decimal | DecimalJsLike | number | string
    major_tuition: Decimal | DecimalJsLike | number | string
    academic_degree: string
    total_years: number
    total_credits_per_year: number
    created_at?: Date | string | null
    exam1: number
    exam2: number
    majors_description: string
    description_brief?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: string | null
    qualifications2?: string | null
    sign_ups?: $Enums.SignUpsEnum
    department_id?: number
  }

  export type StudentCreateManyDepartmentInput = {
    student_id?: number
    user_id: number
    student_club_id?: number | null
    additional_roles?: $Enums.AdditionalRolesEnum
    student_code: string
    student_email: string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: number
    enrollment_year: number
    year_classification: $Enums.YearClassificationEnum
    is_active?: $Enums.StudentIsActiveEnum | null
    current_academic_degree: string
    academic_degree_file?: string | null
    major_id: number
    created_at?: Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TeacherCreateManyDepartmentInput = {
    teacherId?: number
    userId: number
    teacherCode: string
    teacherEmail: string
    certificate?: string | null
    profession: string
    academicDegree: string
    jobTitle?: string | null
    isActive?: $Enums.IsActiveEnum
    jobDescription?: string
    departmentsOfEducationId: number
  }

  export type TeachersCoursePlanningCreateManyDepartmentInput = {
    teacherCoursePlanningId?: number
    teacherId: number
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    courseName: string
    credit: number
    courseId: number
    createdAt?: Date | string | null
    departmentOfEduId: number
    courseCode: string
    teacherMajorId: number
  }

  export type TeachersMajorPlanningCreateManyDepartmentInput = {
    teacherMajorId?: number
    teacherId: number
    academicDegreeOfMajor: string
    majorName: string
    majorId?: Decimal | DecimalJsLike | number | string | null
    credit: number
    createdAt?: Date | string | null
    departmentOfEducationsId: number
  }

  export type TeacherScheduleCreateManyDepartmentInput = {
    teacherScheduleId?: number
    teacherId: number
    weekDay: string
    periodOfClass: string
    classroomId: number
    classGroup: string
    courseName: string
    credit: number
    numberOfStudents: number
    courseId: number
    createdAt?: Date | string | null
  }

  export type ClassroomsUpdateWithoutDepartmentInput = {
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    departmentOfEducation?: DepartmentsOfEducationUpdateOneWithoutClassroomsNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutClassroomNestedInput
  }

  export type ClassroomsUncheckedUpdateWithoutDepartmentInput = {
    classroom_id?: IntFieldUpdateOperationsInput | number
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutClassroomNestedInput
  }

  export type ClassroomsUncheckedUpdateManyWithoutDepartmentInput = {
    classroom_id?: IntFieldUpdateOperationsInput | number
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    classroom_type?: EnumClassroomTypeEnumFieldUpdateOperationsInput | $Enums.ClassroomTypeEnum
    classroom_number?: StringFieldUpdateOperationsInput | string
    projector?: EnumProjectorEnumFieldUpdateOperationsInput | $Enums.ProjectorEnum
    tv?: EnumTvEnumFieldUpdateOperationsInput | $Enums.TvEnum
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type CoursesUpdateWithoutDepartmentInput = {
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    major?: MajorUpdateOneRequiredWithoutCoursesNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutCourseNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutCourseNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutDepartmentInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutCourseNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutCourseNestedInput
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateManyWithoutDepartmentInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeEnumFieldUpdateOperationsInput | $Enums.CourseTypeEnum
    courseYear?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseSeason?: EnumCourseSeasonTypeEnumFieldUpdateOperationsInput | $Enums.CourseSeasonTypeEnum
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MajorUpdateWithoutDepartmentInput = {
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    departmentOfEdu?: DepartmentUpdateOneRequiredWithoutMajorsOfEducationNestedInput
    Courses?: CoursesUpdateManyWithoutMajorNestedInput
    Student?: StudentUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClubMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutDepartmentInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    Courses?: CoursesUncheckedUpdateManyWithoutMajorNestedInput
    Student?: StudentUncheckedUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClubMajorNestedInput
  }

  export type MajorUncheckedUpdateManyWithoutDepartmentInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    department_of_edu_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
  }

  export type MajorUpdateWithoutDepartmentOfEduInput = {
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department?: DepartmentUpdateOneRequiredWithoutMajorsNestedInput
    Courses?: CoursesUpdateManyWithoutMajorNestedInput
    Student?: StudentUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClubMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutDepartmentOfEduInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department_id?: IntFieldUpdateOperationsInput | number
    Courses?: CoursesUncheckedUpdateManyWithoutMajorNestedInput
    Student?: StudentUncheckedUpdateManyWithoutMajorNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClubMajorNestedInput
  }

  export type MajorUncheckedUpdateManyWithoutDepartmentOfEduInput = {
    major_id?: IntFieldUpdateOperationsInput | number
    major_name?: StringFieldUpdateOperationsInput | string
    majors_year?: DateTimeFieldUpdateOperationsInput | Date | string
    majors_type?: EnumMajorTypeEnumFieldUpdateOperationsInput | $Enums.MajorTypeEnum
    credit_unit_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    major_tuition?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    academic_degree?: StringFieldUpdateOperationsInput | string
    total_years?: IntFieldUpdateOperationsInput | number
    total_credits_per_year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam1?: FloatFieldUpdateOperationsInput | number
    exam2?: FloatFieldUpdateOperationsInput | number
    majors_description?: StringFieldUpdateOperationsInput | string
    description_brief?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    qualifications1?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications2?: NullableStringFieldUpdateOperationsInput | string | null
    sign_ups?: EnumSignUpsEnumFieldUpdateOperationsInput | $Enums.SignUpsEnum
    department_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUpdateWithoutDepartmentInput = {
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    auth_user?: auth_userUpdateOneWithoutStudentNestedInput
    major?: MajorUpdateOneRequiredWithoutStudentNestedInput
    student_clubs?: StudentClubsUpdateOneWithoutStudentNestedInput
    StudentCurriculum?: StudentCurriculumUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutDepartmentInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
    StudentCurriculum?: StudentCurriculumUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutDepartmentInput = {
    student_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    student_club_id?: NullableIntFieldUpdateOperationsInput | number | null
    additional_roles?: EnumAdditionalRolesEnumFieldUpdateOperationsInput | $Enums.AdditionalRolesEnum
    student_code?: StringFieldUpdateOperationsInput | string
    student_email?: StringFieldUpdateOperationsInput | string
    student_file?: NullableJsonNullValueInput | InputJsonValue
    enrollment_number?: IntFieldUpdateOperationsInput | number
    enrollment_year?: IntFieldUpdateOperationsInput | number
    year_classification?: EnumYearClassificationEnumFieldUpdateOperationsInput | $Enums.YearClassificationEnum
    is_active?: NullableEnumStudentIsActiveEnumFieldUpdateOperationsInput | $Enums.StudentIsActiveEnum | null
    current_academic_degree?: StringFieldUpdateOperationsInput | string
    academic_degree_file?: NullableStringFieldUpdateOperationsInput | string | null
    major_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contracts?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TeacherUpdateWithoutDepartmentInput = {
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    auth_user?: auth_userUpdateOneWithoutTeacherNestedInput
    departmentsOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeacherNestedInput
    TeacherSchedule?: TeacherScheduleUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutDepartmentInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
    TeacherSchedule?: TeacherScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeacherNestedInput
    TeachersMajorPlanning?: TeachersMajorPlanningUncheckedUpdateManyWithoutTeacherNestedInput
    StudentClubs?: StudentClubsUncheckedUpdateManyWithoutClub_advisor_teacherNestedInput
  }

  export type TeacherUncheckedUpdateManyWithoutDepartmentInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teacherCode?: StringFieldUpdateOperationsInput | string
    teacherEmail?: StringFieldUpdateOperationsInput | string
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: StringFieldUpdateOperationsInput | string
    academicDegree?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: EnumIsActiveEnumFieldUpdateOperationsInput | $Enums.IsActiveEnum
    jobDescription?: StringFieldUpdateOperationsInput | string
    departmentsOfEducationId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersCoursePlanningUpdateWithoutDepartmentInput = {
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCode?: StringFieldUpdateOperationsInput | string
    course?: CoursesUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
    teachersMajorPlanning?: TeachersMajorPlanningUpdateOneRequiredWithoutTeachersCoursePlanningNestedInput
  }

  export type TeachersCoursePlanningUncheckedUpdateWithoutDepartmentInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersCoursePlanningUncheckedUpdateManyWithoutDepartmentInput = {
    teacherCoursePlanningId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEduId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    teacherMajorId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersMajorPlanningUpdateWithoutDepartmentInput = {
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducation?: DepartmentsOfEducationUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeachersMajorPlanningNestedInput
    TeachersCoursePlanning?: TeachersCoursePlanningUpdateManyWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningUncheckedUpdateWithoutDepartmentInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducationsId?: IntFieldUpdateOperationsInput | number
    TeachersCoursePlanning?: TeachersCoursePlanningUncheckedUpdateManyWithoutTeachersMajorPlanningNestedInput
  }

  export type TeachersMajorPlanningUncheckedUpdateManyWithoutDepartmentInput = {
    teacherMajorId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    academicDegreeOfMajor?: StringFieldUpdateOperationsInput | string
    majorName?: StringFieldUpdateOperationsInput | string
    majorId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    credit?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentOfEducationsId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherScheduleUpdateWithoutDepartmentInput = {
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classroom?: ClassroomsUpdateOneRequiredWithoutTeacherScheduleNestedInput
    course?: CoursesUpdateOneRequiredWithoutTeacherScheduleNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeacherScheduleNestedInput
  }

  export type TeacherScheduleUncheckedUpdateWithoutDepartmentInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classroomId?: IntFieldUpdateOperationsInput | number
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeacherScheduleUncheckedUpdateManyWithoutDepartmentInput = {
    teacherScheduleId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    weekDay?: StringFieldUpdateOperationsInput | string
    periodOfClass?: StringFieldUpdateOperationsInput | string
    classroomId?: IntFieldUpdateOperationsInput | number
    classGroup?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    credit?: IntFieldUpdateOperationsInput | number
    numberOfStudents?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}